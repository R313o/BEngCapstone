
STM32H743-DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b80c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00077788  0800bac0  0800bac0  0000cac0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08083248  08083248  00084248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08083250  08083250  00084250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08083254  08083254  00084254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08083258  00085000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcm_bss     00011020  20000000  20000000  00086000  2**5
                  ALLOC
  8 .dtcm_data    00000000  20011020  20011020  00085078  2**0
                  CONTENTS
  9 .bss          0006f534  24000078  24000078  00085078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2406f5ac  2406f5ac  00085078  2**0
                  ALLOC
 11 .ramd2        00000000  30000000  30000000  00085078  2**0
                  CONTENTS
 12 .ramd3        0000f1ac  38000000  38000000  00086000  2**2
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00085078  2**0
                  CONTENTS, READONLY
 14 .debug_info   000337eb  00000000  00000000  000850a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000064b5  00000000  00000000  000b8891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00017125  00000000  00000000  000bed46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001990  00000000  00000000  000d5e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002993  00000000  00000000  000d7800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003dfa1  00000000  00000000  000da193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00035e89  00000000  00000000  00118134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001836f1  00000000  00000000  0014dfbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000b3  00000000  00000000  002d16ae  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000052c0  00000000  00000000  002d1764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000094  00000000  00000000  002d6a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    000041c4  00000000  00000000  002d6ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_ranges 000000e0  00000000  00000000  002dac7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ba94 	.word	0x0800ba94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800ba94 	.word	0x0800ba94

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <__aeabi_uldivmod>:
 8000440:	b953      	cbnz	r3, 8000458 <__aeabi_uldivmod+0x18>
 8000442:	b94a      	cbnz	r2, 8000458 <__aeabi_uldivmod+0x18>
 8000444:	2900      	cmp	r1, #0
 8000446:	bf08      	it	eq
 8000448:	2800      	cmpeq	r0, #0
 800044a:	bf1c      	itt	ne
 800044c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000450:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000454:	f000 b988 	b.w	8000768 <__aeabi_idiv0>
 8000458:	f1ad 0c08 	sub.w	ip, sp, #8
 800045c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000460:	f000 f806 	bl	8000470 <__udivmoddi4>
 8000464:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800046c:	b004      	add	sp, #16
 800046e:	4770      	bx	lr

08000470 <__udivmoddi4>:
 8000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000474:	9d08      	ldr	r5, [sp, #32]
 8000476:	468e      	mov	lr, r1
 8000478:	4604      	mov	r4, r0
 800047a:	4688      	mov	r8, r1
 800047c:	2b00      	cmp	r3, #0
 800047e:	d14a      	bne.n	8000516 <__udivmoddi4+0xa6>
 8000480:	428a      	cmp	r2, r1
 8000482:	4617      	mov	r7, r2
 8000484:	d962      	bls.n	800054c <__udivmoddi4+0xdc>
 8000486:	fab2 f682 	clz	r6, r2
 800048a:	b14e      	cbz	r6, 80004a0 <__udivmoddi4+0x30>
 800048c:	f1c6 0320 	rsb	r3, r6, #32
 8000490:	fa01 f806 	lsl.w	r8, r1, r6
 8000494:	fa20 f303 	lsr.w	r3, r0, r3
 8000498:	40b7      	lsls	r7, r6
 800049a:	ea43 0808 	orr.w	r8, r3, r8
 800049e:	40b4      	lsls	r4, r6
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80004ac:	0c23      	lsrs	r3, r4, #16
 80004ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80004b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b6:	fb01 f20c 	mul.w	r2, r1, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d909      	bls.n	80004d2 <__udivmoddi4+0x62>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80004c4:	f080 80ea 	bcs.w	800069c <__udivmoddi4+0x22c>
 80004c8:	429a      	cmp	r2, r3
 80004ca:	f240 80e7 	bls.w	800069c <__udivmoddi4+0x22c>
 80004ce:	3902      	subs	r1, #2
 80004d0:	443b      	add	r3, r7
 80004d2:	1a9a      	subs	r2, r3, r2
 80004d4:	b2a3      	uxth	r3, r4
 80004d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80004da:	fb0e 2210 	mls	r2, lr, r0, r2
 80004de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80004e6:	459c      	cmp	ip, r3
 80004e8:	d909      	bls.n	80004fe <__udivmoddi4+0x8e>
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80004f0:	f080 80d6 	bcs.w	80006a0 <__udivmoddi4+0x230>
 80004f4:	459c      	cmp	ip, r3
 80004f6:	f240 80d3 	bls.w	80006a0 <__udivmoddi4+0x230>
 80004fa:	443b      	add	r3, r7
 80004fc:	3802      	subs	r0, #2
 80004fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000502:	eba3 030c 	sub.w	r3, r3, ip
 8000506:	2100      	movs	r1, #0
 8000508:	b11d      	cbz	r5, 8000512 <__udivmoddi4+0xa2>
 800050a:	40f3      	lsrs	r3, r6
 800050c:	2200      	movs	r2, #0
 800050e:	e9c5 3200 	strd	r3, r2, [r5]
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	428b      	cmp	r3, r1
 8000518:	d905      	bls.n	8000526 <__udivmoddi4+0xb6>
 800051a:	b10d      	cbz	r5, 8000520 <__udivmoddi4+0xb0>
 800051c:	e9c5 0100 	strd	r0, r1, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	4608      	mov	r0, r1
 8000524:	e7f5      	b.n	8000512 <__udivmoddi4+0xa2>
 8000526:	fab3 f183 	clz	r1, r3
 800052a:	2900      	cmp	r1, #0
 800052c:	d146      	bne.n	80005bc <__udivmoddi4+0x14c>
 800052e:	4573      	cmp	r3, lr
 8000530:	d302      	bcc.n	8000538 <__udivmoddi4+0xc8>
 8000532:	4282      	cmp	r2, r0
 8000534:	f200 8105 	bhi.w	8000742 <__udivmoddi4+0x2d2>
 8000538:	1a84      	subs	r4, r0, r2
 800053a:	eb6e 0203 	sbc.w	r2, lr, r3
 800053e:	2001      	movs	r0, #1
 8000540:	4690      	mov	r8, r2
 8000542:	2d00      	cmp	r5, #0
 8000544:	d0e5      	beq.n	8000512 <__udivmoddi4+0xa2>
 8000546:	e9c5 4800 	strd	r4, r8, [r5]
 800054a:	e7e2      	b.n	8000512 <__udivmoddi4+0xa2>
 800054c:	2a00      	cmp	r2, #0
 800054e:	f000 8090 	beq.w	8000672 <__udivmoddi4+0x202>
 8000552:	fab2 f682 	clz	r6, r2
 8000556:	2e00      	cmp	r6, #0
 8000558:	f040 80a4 	bne.w	80006a4 <__udivmoddi4+0x234>
 800055c:	1a8a      	subs	r2, r1, r2
 800055e:	0c03      	lsrs	r3, r0, #16
 8000560:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000564:	b280      	uxth	r0, r0
 8000566:	b2bc      	uxth	r4, r7
 8000568:	2101      	movs	r1, #1
 800056a:	fbb2 fcfe 	udiv	ip, r2, lr
 800056e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000576:	fb04 f20c 	mul.w	r2, r4, ip
 800057a:	429a      	cmp	r2, r3
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x11e>
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000584:	d202      	bcs.n	800058c <__udivmoddi4+0x11c>
 8000586:	429a      	cmp	r2, r3
 8000588:	f200 80e0 	bhi.w	800074c <__udivmoddi4+0x2dc>
 800058c:	46c4      	mov	ip, r8
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	fbb3 f2fe 	udiv	r2, r3, lr
 8000594:	fb0e 3312 	mls	r3, lr, r2, r3
 8000598:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800059c:	fb02 f404 	mul.w	r4, r2, r4
 80005a0:	429c      	cmp	r4, r3
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x144>
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80005aa:	d202      	bcs.n	80005b2 <__udivmoddi4+0x142>
 80005ac:	429c      	cmp	r4, r3
 80005ae:	f200 80ca 	bhi.w	8000746 <__udivmoddi4+0x2d6>
 80005b2:	4602      	mov	r2, r0
 80005b4:	1b1b      	subs	r3, r3, r4
 80005b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80005ba:	e7a5      	b.n	8000508 <__udivmoddi4+0x98>
 80005bc:	f1c1 0620 	rsb	r6, r1, #32
 80005c0:	408b      	lsls	r3, r1
 80005c2:	fa22 f706 	lsr.w	r7, r2, r6
 80005c6:	431f      	orrs	r7, r3
 80005c8:	fa0e f401 	lsl.w	r4, lr, r1
 80005cc:	fa20 f306 	lsr.w	r3, r0, r6
 80005d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80005d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80005d8:	4323      	orrs	r3, r4
 80005da:	fa00 f801 	lsl.w	r8, r0, r1
 80005de:	fa1f fc87 	uxth.w	ip, r7
 80005e2:	fbbe f0f9 	udiv	r0, lr, r9
 80005e6:	0c1c      	lsrs	r4, r3, #16
 80005e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80005ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80005f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80005f4:	45a6      	cmp	lr, r4
 80005f6:	fa02 f201 	lsl.w	r2, r2, r1
 80005fa:	d909      	bls.n	8000610 <__udivmoddi4+0x1a0>
 80005fc:	193c      	adds	r4, r7, r4
 80005fe:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000602:	f080 809c 	bcs.w	800073e <__udivmoddi4+0x2ce>
 8000606:	45a6      	cmp	lr, r4
 8000608:	f240 8099 	bls.w	800073e <__udivmoddi4+0x2ce>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	eba4 040e 	sub.w	r4, r4, lr
 8000614:	fa1f fe83 	uxth.w	lr, r3
 8000618:	fbb4 f3f9 	udiv	r3, r4, r9
 800061c:	fb09 4413 	mls	r4, r9, r3, r4
 8000620:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000624:	fb03 fc0c 	mul.w	ip, r3, ip
 8000628:	45a4      	cmp	ip, r4
 800062a:	d908      	bls.n	800063e <__udivmoddi4+0x1ce>
 800062c:	193c      	adds	r4, r7, r4
 800062e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000632:	f080 8082 	bcs.w	800073a <__udivmoddi4+0x2ca>
 8000636:	45a4      	cmp	ip, r4
 8000638:	d97f      	bls.n	800073a <__udivmoddi4+0x2ca>
 800063a:	3b02      	subs	r3, #2
 800063c:	443c      	add	r4, r7
 800063e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000642:	eba4 040c 	sub.w	r4, r4, ip
 8000646:	fba0 ec02 	umull	lr, ip, r0, r2
 800064a:	4564      	cmp	r4, ip
 800064c:	4673      	mov	r3, lr
 800064e:	46e1      	mov	r9, ip
 8000650:	d362      	bcc.n	8000718 <__udivmoddi4+0x2a8>
 8000652:	d05f      	beq.n	8000714 <__udivmoddi4+0x2a4>
 8000654:	b15d      	cbz	r5, 800066e <__udivmoddi4+0x1fe>
 8000656:	ebb8 0203 	subs.w	r2, r8, r3
 800065a:	eb64 0409 	sbc.w	r4, r4, r9
 800065e:	fa04 f606 	lsl.w	r6, r4, r6
 8000662:	fa22 f301 	lsr.w	r3, r2, r1
 8000666:	431e      	orrs	r6, r3
 8000668:	40cc      	lsrs	r4, r1
 800066a:	e9c5 6400 	strd	r6, r4, [r5]
 800066e:	2100      	movs	r1, #0
 8000670:	e74f      	b.n	8000512 <__udivmoddi4+0xa2>
 8000672:	fbb1 fcf2 	udiv	ip, r1, r2
 8000676:	0c01      	lsrs	r1, r0, #16
 8000678:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800067c:	b280      	uxth	r0, r0
 800067e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000682:	463b      	mov	r3, r7
 8000684:	4638      	mov	r0, r7
 8000686:	463c      	mov	r4, r7
 8000688:	46b8      	mov	r8, r7
 800068a:	46be      	mov	lr, r7
 800068c:	2620      	movs	r6, #32
 800068e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000692:	eba2 0208 	sub.w	r2, r2, r8
 8000696:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800069a:	e766      	b.n	800056a <__udivmoddi4+0xfa>
 800069c:	4601      	mov	r1, r0
 800069e:	e718      	b.n	80004d2 <__udivmoddi4+0x62>
 80006a0:	4610      	mov	r0, r2
 80006a2:	e72c      	b.n	80004fe <__udivmoddi4+0x8e>
 80006a4:	f1c6 0220 	rsb	r2, r6, #32
 80006a8:	fa2e f302 	lsr.w	r3, lr, r2
 80006ac:	40b7      	lsls	r7, r6
 80006ae:	40b1      	lsls	r1, r6
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006b8:	430a      	orrs	r2, r1
 80006ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80006be:	b2bc      	uxth	r4, r7
 80006c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80006c4:	0c11      	lsrs	r1, r2, #16
 80006c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ca:	fb08 f904 	mul.w	r9, r8, r4
 80006ce:	40b0      	lsls	r0, r6
 80006d0:	4589      	cmp	r9, r1
 80006d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80006d6:	b280      	uxth	r0, r0
 80006d8:	d93e      	bls.n	8000758 <__udivmoddi4+0x2e8>
 80006da:	1879      	adds	r1, r7, r1
 80006dc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80006e0:	d201      	bcs.n	80006e6 <__udivmoddi4+0x276>
 80006e2:	4589      	cmp	r9, r1
 80006e4:	d81f      	bhi.n	8000726 <__udivmoddi4+0x2b6>
 80006e6:	eba1 0109 	sub.w	r1, r1, r9
 80006ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80006ee:	fb09 f804 	mul.w	r8, r9, r4
 80006f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80006f6:	b292      	uxth	r2, r2
 80006f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006fc:	4542      	cmp	r2, r8
 80006fe:	d229      	bcs.n	8000754 <__udivmoddi4+0x2e4>
 8000700:	18ba      	adds	r2, r7, r2
 8000702:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000706:	d2c4      	bcs.n	8000692 <__udivmoddi4+0x222>
 8000708:	4542      	cmp	r2, r8
 800070a:	d2c2      	bcs.n	8000692 <__udivmoddi4+0x222>
 800070c:	f1a9 0102 	sub.w	r1, r9, #2
 8000710:	443a      	add	r2, r7
 8000712:	e7be      	b.n	8000692 <__udivmoddi4+0x222>
 8000714:	45f0      	cmp	r8, lr
 8000716:	d29d      	bcs.n	8000654 <__udivmoddi4+0x1e4>
 8000718:	ebbe 0302 	subs.w	r3, lr, r2
 800071c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000720:	3801      	subs	r0, #1
 8000722:	46e1      	mov	r9, ip
 8000724:	e796      	b.n	8000654 <__udivmoddi4+0x1e4>
 8000726:	eba7 0909 	sub.w	r9, r7, r9
 800072a:	4449      	add	r1, r9
 800072c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000730:	fbb1 f9fe 	udiv	r9, r1, lr
 8000734:	fb09 f804 	mul.w	r8, r9, r4
 8000738:	e7db      	b.n	80006f2 <__udivmoddi4+0x282>
 800073a:	4673      	mov	r3, lr
 800073c:	e77f      	b.n	800063e <__udivmoddi4+0x1ce>
 800073e:	4650      	mov	r0, sl
 8000740:	e766      	b.n	8000610 <__udivmoddi4+0x1a0>
 8000742:	4608      	mov	r0, r1
 8000744:	e6fd      	b.n	8000542 <__udivmoddi4+0xd2>
 8000746:	443b      	add	r3, r7
 8000748:	3a02      	subs	r2, #2
 800074a:	e733      	b.n	80005b4 <__udivmoddi4+0x144>
 800074c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000750:	443b      	add	r3, r7
 8000752:	e71c      	b.n	800058e <__udivmoddi4+0x11e>
 8000754:	4649      	mov	r1, r9
 8000756:	e79c      	b.n	8000692 <__udivmoddi4+0x222>
 8000758:	eba1 0109 	sub.w	r1, r1, r9
 800075c:	46c4      	mov	ip, r8
 800075e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000762:	fb09 f804 	mul.w	r8, r9, r4
 8000766:	e7c4      	b.n	80006f2 <__udivmoddi4+0x282>

08000768 <__aeabi_idiv0>:
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <cabinet_simulation_f32_process>:
 *
 * @param self Generic FX handler containing allocated state and FIR pointers.
 * @param p    Audio pipeline context.
 */
static void cabinet_simulation_f32_process(FX_HANDLER_t *self, pipe *p)
{
 800076c:	4603      	mov	r3, r0
    // self->states[2]: pointer to FIR filter handler
    // self->states[1]: pointer to overlap/state buffer
    partitioned_fir_convolution_fft(
 800076e:	4608      	mov	r0, r1
 8000770:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8000774:	f001 b8ae 	b.w	80018d4 <partitioned_fir_convolution_fft>

08000778 <fx_cabinet_clean>:
    fx->clean =   fx_cabinet_clean;
}


void fx_cabinet_clean(FX_HANDLER_t *fx)
{
 8000778:	b538      	push	{r3, r4, r5, lr}
 800077a:	4604      	mov	r4, r0

	fir_OD_M212_VINT_DYN_201_P05_00_f32_clean((fir_t *)fx->states[2]);
 800077c:	6940      	ldr	r0, [r0, #20]
 800077e:	f000 fa65 	bl	8000c4c <fir_OD_M212_VINT_DYN_201_P05_00_f32_clean>
    self->fir1  = NULL;
 8000782:	2500      	movs	r5, #0
    cabinet_simulation_clean_f32((cabinet_simulation_f32*)fx->states[3]);
 8000784:	69a3      	ldr	r3, [r4, #24]

    for(int i = 0; i < 8; i++)
    	fx->states[i] = NULL;
 8000786:	2220      	movs	r2, #32
 8000788:	4629      	mov	r1, r5
 800078a:	f104 000c 	add.w	r0, r4, #12
    self->fir1  = NULL;
 800078e:	e9c3 550b 	strd	r5, r5, [r3, #44]	@ 0x2c
    	fx->states[i] = NULL;
 8000792:	f00a f8bd 	bl	800a910 <memset>

    fx->process = NULL;
 8000796:	6065      	str	r5, [r4, #4]

}
 8000798:	bd38      	pop	{r3, r4, r5, pc}
 800079a:	bf00      	nop

0800079c <fx_cabinet_init>:
{
 800079c:	b510      	push	{r4, lr}
    fx->states[0] = _static_mem_alloc(
 800079e:	2104      	movs	r1, #4
{
 80007a0:	4604      	mov	r4, r0
    fx->states[0] = _static_mem_alloc(
 80007a2:	f242 0008 	movw	r0, #8200	@ 0x2008
 80007a6:	f000 fb05 	bl	8000db4 <_static_mem_alloc>
 80007aa:	4603      	mov	r3, r0
    fx->states[1] = _dctm_static_mem_alloc(
 80007ac:	2104      	movs	r1, #4
 80007ae:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    fx->states[0] = _static_mem_alloc(
 80007b2:	60e3      	str	r3, [r4, #12]
    fx->states[1] = _dctm_static_mem_alloc(
 80007b4:	f000 fae8 	bl	8000d88 <_dctm_static_mem_alloc>
 80007b8:	4603      	mov	r3, r0
    fx->states[2] = _static_mem_alloc(
 80007ba:	2104      	movs	r1, #4
 80007bc:	2014      	movs	r0, #20
    fx->states[1] = _dctm_static_mem_alloc(
 80007be:	6123      	str	r3, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 80007c0:	f000 faf8 	bl	8000db4 <_static_mem_alloc>
 80007c4:	4603      	mov	r3, r0
    fx->states[3] = _static_mem_alloc(
 80007c6:	2104      	movs	r1, #4
 80007c8:	2034      	movs	r0, #52	@ 0x34
    fx->states[2] = _static_mem_alloc(
 80007ca:	6163      	str	r3, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 80007cc:	f000 faf2 	bl	8000db4 <_static_mem_alloc>
 80007d0:	4603      	mov	r3, r0
    fir_OD_M212_VINT_DYN_201_P05_00_f32_init(
 80007d2:	68e1      	ldr	r1, [r4, #12]
 80007d4:	6960      	ldr	r0, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 80007d6:	61a3      	str	r3, [r4, #24]
    fir_OD_M212_VINT_DYN_201_P05_00_f32_init(
 80007d8:	f000 fa24 	bl	8000c24 <fir_OD_M212_VINT_DYN_201_P05_00_f32_init>
        (cabinet_simulation_f32 *)fx->states[3],
 80007dc:	69a3      	ldr	r3, [r4, #24]
    fx->process = cabinet_simulation_f32_process;
 80007de:	4904      	ldr	r1, [pc, #16]	@ (80007f0 <fx_cabinet_init+0x54>)
        (fir_t *)fx->states[2]
 80007e0:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    self->fir1  = fir;
 80007e4:	631a      	str	r2, [r3, #48]	@ 0x30
    fx->clean =   fx_cabinet_clean;
 80007e6:	4a03      	ldr	r2, [pc, #12]	@ (80007f4 <fx_cabinet_init+0x58>)
    self->fir1  = fir;
 80007e8:	62d8      	str	r0, [r3, #44]	@ 0x2c
    fx->clean =   fx_cabinet_clean;
 80007ea:	e9c4 1201 	strd	r1, r2, [r4, #4]
}
 80007ee:	bd10      	pop	{r4, pc}
 80007f0:	0800076d 	.word	0x0800076d
 80007f4:	08000779 	.word	0x08000779

080007f8 <convolution_reverb_f32_process>:
 */
static void convolution_reverb_f32_process(
    FX_HANDLER_t *self,
    pipe         *p
)
{
 80007f8:	4603      	mov	r3, r0
    // self->states[2]: FIR handler pointer
    // self->states[1]: overlap/state buffer pointer
    partitioned_fir_convolution_fft(
 80007fa:	4608      	mov	r0, r1
 80007fc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8000800:	f001 b868 	b.w	80018d4 <partitioned_fir_convolution_fft>

08000804 <fx_reverb_init>:
 * convolution_reverb instance, then initializes and assigns the processing callback.
 *
 * @param fx Pointer to FX_HANDLER_t to configure for reverb effect.
 */
void fx_reverb_init(FX_HANDLER_t *fx)
{
 8000804:	b510      	push	{r4, lr}
    // Allocate FFT-domain memory for reverb: numSegments * FFT_SIZE + space for Handlers
    fx->states[0] = _static_mem_alloc(
 8000806:	2104      	movs	r1, #4
{
 8000808:	4604      	mov	r4, r0
    fx->states[0] = _static_mem_alloc(
 800080a:	4813      	ldr	r0, [pc, #76]	@ (8000858 <fx_reverb_init+0x54>)
 800080c:	f000 fad2 	bl	8000db4 <_static_mem_alloc>
 8000810:	4603      	mov	r3, r0
        (NUMSEGMENTS_EMT * FFT_SIZE + 2 * NUMSEGMENTS_EMT) * sizeof(float),
        _Alignof(float)
    );

    // Allocate DTCM state buffer for overlap (BUFFER_SIZE floats)
    fx->states[1] = _dctm_static_mem_alloc(
 8000812:	2104      	movs	r1, #4
 8000814:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    fx->states[0] = _static_mem_alloc(
 8000818:	60e3      	str	r3, [r4, #12]
    fx->states[1] = _dctm_static_mem_alloc(
 800081a:	f000 fab5 	bl	8000d88 <_dctm_static_mem_alloc>
 800081e:	4603      	mov	r3, r0
        BUFFER_SIZE * sizeof(float),
        _Alignof(float)
    );

    // Allocate FIR filter handler
    fx->states[2] = _static_mem_alloc(
 8000820:	2104      	movs	r1, #4
 8000822:	2014      	movs	r0, #20
    fx->states[1] = _dctm_static_mem_alloc(
 8000824:	6123      	str	r3, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 8000826:	f000 fac5 	bl	8000db4 <_static_mem_alloc>
 800082a:	4603      	mov	r3, r0
        sizeof(fir_t),
        _Alignof(fir_t)
    );

    // Allocate convolution reverb simulation instance
    fx->states[3] = _static_mem_alloc(
 800082c:	2104      	movs	r1, #4
 800082e:	2034      	movs	r0, #52	@ 0x34
    fx->states[2] = _static_mem_alloc(
 8000830:	6163      	str	r3, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 8000832:	f000 fabf 	bl	8000db4 <_static_mem_alloc>
 8000836:	4603      	mov	r3, r0
        sizeof(convolution_reverb_f32),
        _Alignof(convolution_reverb_f32)
    );

    // Initialize FIR handler with FFT memory
    fir_emt_140_dark_3_f32_init(
 8000838:	68e1      	ldr	r1, [r4, #12]
 800083a:	6960      	ldr	r0, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 800083c:	61a3      	str	r3, [r4, #24]
    fir_emt_140_dark_3_f32_init(
 800083e:	f000 fa0b 	bl	8000c58 <fir_emt_140_dark_3_f32_init>
        (float *)fx->states[0]
    );

    // Initialize reverb simulation with state buffer and FIR handler
    convolution_reverb_f32_init(
        (convolution_reverb_f32 *)fx->states[3],
 8000842:	69a3      	ldr	r3, [r4, #24]
        (float32_t *)fx->states[1],
        (fir_t *)fx->states[2]
    );

    // Set processing callback for convolution reverb
    fx->process = convolution_reverb_f32_process;
 8000844:	4905      	ldr	r1, [pc, #20]	@ (800085c <fx_reverb_init+0x58>)
        (fir_t *)fx->states[2]
 8000846:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    self->fir1  = fir;
 800084a:	631a      	str	r2, [r3, #48]	@ 0x30
    fx->clean =   fx_cabinet_clean;
 800084c:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <fx_reverb_init+0x5c>)
    self->fir1  = fir;
 800084e:	62d8      	str	r0, [r3, #44]	@ 0x2c
    fx->clean =   fx_cabinet_clean;
 8000850:	e9c4 1201 	strd	r1, r2, [r4, #4]
}
 8000854:	bd10      	pop	{r4, pc}
 8000856:	bf00      	nop
 8000858:	0005c170 	.word	0x0005c170
 800085c:	080007f9 	.word	0x080007f9
 8000860:	08000779 	.word	0x08000779

08000864 <fx_reverb_clean>:


void fx_reverb_clean(FX_HANDLER_t *fx)
{
 8000864:	b538      	push	{r3, r4, r5, lr}
 8000866:	4604      	mov	r4, r0

    fir_emt_140_dark_3_f32_clean((fir_t *)fx->states[2]);
 8000868:	6940      	ldr	r0, [r0, #20]
 800086a:	f000 fa19 	bl	8000ca0 <fir_emt_140_dark_3_f32_clean>
   self->fir1  = NULL;
 800086e:	2500      	movs	r5, #0
    convolution_reverb_f32_clean((convolution_reverb_f32*)fx->states[3]);
 8000870:	69a3      	ldr	r3, [r4, #24]

    for(int i = 0; i < 8; i++)
    	fx->states[i] = NULL;
 8000872:	2220      	movs	r2, #32
 8000874:	4629      	mov	r1, r5
 8000876:	f104 000c 	add.w	r0, r4, #12
   self->fir1  = NULL;
 800087a:	e9c3 550b 	strd	r5, r5, [r3, #44]	@ 0x2c
    	fx->states[i] = NULL;
 800087e:	f00a f847 	bl	800a910 <memset>

    fx->process = NULL;
 8000882:	6065      	str	r5, [r4, #4]

}
 8000884:	bd38      	pop	{r3, r4, r5, pc}
 8000886:	bf00      	nop

08000888 <supro_simulation_f32_process>:

/**
 * @brief Main FX chain processing: reverb → preamp → reverb → poweramp → reverb.
 */
static void supro_simulation_f32_process(FX_HANDLER_t *fx, pipe *p)
{
 8000888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float32_t *overlap = (float32_t *)fx->states[0];
    fir_t     *firs    = (fir_t *)fx->states[2];

    // 1) Dry signal attenuation
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 800088c:	f244 0708 	movw	r7, #16392	@ 0x4008
    fir_t     *firs    = (fir_t *)fx->states[2];
 8000890:	6943      	ldr	r3, [r0, #20]
    float32_t *overlap = (float32_t *)fx->states[0];
 8000892:	68c5      	ldr	r5, [r0, #12]
{
 8000894:	460c      	mov	r4, r1
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 8000896:	440f      	add	r7, r1
    fir_t     *firs    = (fir_t *)fx->states[2];
 8000898:	461e      	mov	r6, r3
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 800089a:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 8000af4 <supro_simulation_f32_process+0x26c>
 800089e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
{
 80008a2:	4683      	mov	fp, r0
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 80008a4:	4638      	mov	r0, r7
{
 80008a6:	ed2d 8b0a 	vpush	{d8-d12}
 80008aa:	b085      	sub	sp, #20
 80008ac:	9103      	str	r1, [sp, #12]
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 80008ae:	4639      	mov	r1, r7
    fir_t     *firs    = (fir_t *)fx->states[2];
 80008b0:	9302      	str	r3, [sp, #8]
    float32_t *overlap = (float32_t *)fx->states[0];
 80008b2:	9501      	str	r5, [sp, #4]
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 80008b4:	f009 fa26 	bl	8009d04 <arm_scale_f32>

    // 2) First convolution reverb
    partitioned_fir_convolution_fft(p, &firs[0], &overlap[0]);
 80008b8:	462a      	mov	r2, r5
 80008ba:	4631      	mov	r1, r6
 80008bc:	4620      	mov	r0, r4
    float32_t        gWet   = a[SUPRO_P_BLEND_IDX];
    float32_t        bias   = a[SUPRO_P_BIAS_IDX];

    // Envelope detection: squared → lowpass → sqrt(2·env)
    arm_mult_f32(x, x, scratch, BUFFER_SIZE);
    arm_biquad_cascade_df1_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5], scratch, env, BUFFER_SIZE);
 80008be:	4e8e      	ldr	r6, [pc, #568]	@ (8000af8 <supro_simulation_f32_process+0x270>)
    partitioned_fir_convolution_fft(p, &firs[0], &overlap[0]);
 80008c0:	f001 f808 	bl	80018d4 <partitioned_fir_convolution_fft>
    arm_mult_f32(x, x, scratch, BUFFER_SIZE);
 80008c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c8:	4a8c      	ldr	r2, [pc, #560]	@ (8000afc <supro_simulation_f32_process+0x274>)
 80008ca:	4639      	mov	r1, r7
 80008cc:	4638      	mov	r0, r7
 80008ce:	f506 5580 	add.w	r5, r6, #4096	@ 0x1000
 80008d2:	f009 fa83 	bl	8009ddc <arm_mult_f32>
    arm_biquad_cascade_df1_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5], scratch, env, BUFFER_SIZE);
 80008d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008da:	4988      	ldr	r1, [pc, #544]	@ (8000afc <supro_simulation_f32_process+0x274>)
 80008dc:	4632      	mov	r2, r6
 80008de:	f8db 0020 	ldr.w	r0, [fp, #32]
 80008e2:	f009 f943 	bl	8009b6c <arm_biquad_cascade_df1_f32>
    arm_scale_f32(env, 2.0f, env, BUFFER_SIZE);
 80008e6:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80008ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008ee:	4631      	mov	r1, r6
 80008f0:	4630      	mov	r0, r6
 80008f2:	f009 fa07 	bl	8009d04 <arm_scale_f32>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) env[i] = sqrtf(fmaxf(env[i], 0.0f));
 80008f6:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8000b00 <supro_simulation_f32_process+0x278>
    arm_scale_f32(env, 2.0f, env, BUFFER_SIZE);
 80008fa:	4633      	mov	r3, r6
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) env[i] = sqrtf(fmaxf(env[i], 0.0f));
 80008fc:	edd3 7a00 	vldr	s15, [r3]
 8000900:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8000904:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8000908:	eca3 7a01 	vstmia	r3!, {s14}
 800090c:	42ab      	cmp	r3, r5
 800090e:	d1f5      	bne.n	80008fc <supro_simulation_f32_process+0x74>

    // Polynomial distortion via Horner's method
    arm_scale_f32(x, gPre, scratch, BUFFER_SIZE);
 8000910:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8000b04 <supro_simulation_f32_process+0x27c>
 8000914:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000918:	4978      	ldr	r1, [pc, #480]	@ (8000afc <supro_simulation_f32_process+0x274>)
 800091a:	4638      	mov	r0, r7
 800091c:	f009 f9f2 	bl	8009d04 <arm_scale_f32>
    arm_scale_f32(env, bias, env, BUFFER_SIZE);
 8000920:	4975      	ldr	r1, [pc, #468]	@ (8000af8 <supro_simulation_f32_process+0x270>)
 8000922:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 8000b08 <supro_simulation_f32_process+0x280>
 8000926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800092a:	4608      	mov	r0, r1
 800092c:	4c77      	ldr	r4, [pc, #476]	@ (8000b0c <supro_simulation_f32_process+0x284>)
 800092e:	f009 f9e9 	bl	8009d04 <arm_scale_f32>
    arm_add_f32(scratch, env, scratch, BUFFER_SIZE);
 8000932:	4a72      	ldr	r2, [pc, #456]	@ (8000afc <supro_simulation_f32_process+0x274>)
 8000934:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000938:	496f      	ldr	r1, [pc, #444]	@ (8000af8 <supro_simulation_f32_process+0x270>)
 800093a:	4610      	mov	r0, r2
    uint32_t K = SUPRO_NUM_A_VALS;
    arm_scale_f32(scratch, a[K-1], env, BUFFER_SIZE);
    for (int k = K-2; k >= 0; --k) {
        arm_mult_f32(scratch, env, env, BUFFER_SIZE);
 800093c:	f8df a1b8 	ldr.w	sl, [pc, #440]	@ 8000af8 <supro_simulation_f32_process+0x270>
 8000940:	f8df 91b8 	ldr.w	r9, [pc, #440]	@ 8000afc <supro_simulation_f32_process+0x274>
 8000944:	f1a4 089c 	sub.w	r8, r4, #156	@ 0x9c
    arm_add_f32(scratch, env, scratch, BUFFER_SIZE);
 8000948:	f009 fa8e 	bl	8009e68 <arm_add_f32>
    arm_scale_f32(scratch, a[K-1], env, BUFFER_SIZE);
 800094c:	ed9f 0a70 	vldr	s0, [pc, #448]	@ 8000b10 <supro_simulation_f32_process+0x288>
 8000950:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000954:	4968      	ldr	r1, [pc, #416]	@ (8000af8 <supro_simulation_f32_process+0x270>)
 8000956:	4869      	ldr	r0, [pc, #420]	@ (8000afc <supro_simulation_f32_process+0x274>)
 8000958:	f009 f9d4 	bl	8009d04 <arm_scale_f32>
        arm_mult_f32(scratch, env, env, BUFFER_SIZE);
 800095c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000960:	4652      	mov	r2, sl
 8000962:	4965      	ldr	r1, [pc, #404]	@ (8000af8 <supro_simulation_f32_process+0x270>)
 8000964:	4648      	mov	r0, r9
 8000966:	f009 fa39 	bl	8009ddc <arm_mult_f32>
        for (uint32_t i = 0; i < BUFFER_SIZE; ++i) env[i] += a[k];
 800096a:	ed34 7a01 	vldmdb	r4!, {s14}
 800096e:	4633      	mov	r3, r6
 8000970:	edd3 7a00 	vldr	s15, [r3]
 8000974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000978:	ece3 7a01 	vstmia	r3!, {s15}
 800097c:	42ab      	cmp	r3, r5
 800097e:	d1f7      	bne.n	8000970 <supro_simulation_f32_process+0xe8>
    for (int k = K-2; k >= 0; --k) {
 8000980:	45a0      	cmp	r8, r4
 8000982:	d1eb      	bne.n	800095c <supro_simulation_f32_process+0xd4>
    }

    // Wet/dry mix and postgain
    arm_scale_f32(env, gWet, env, BUFFER_SIZE);
 8000984:	495c      	ldr	r1, [pc, #368]	@ (8000af8 <supro_simulation_f32_process+0x270>)
 8000986:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800098a:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 8000b14 <supro_simulation_f32_process+0x28c>
 800098e:	4608      	mov	r0, r1
 8000990:	4c61      	ldr	r4, [pc, #388]	@ (8000b18 <supro_simulation_f32_process+0x290>)
 8000992:	f009 f9b7 	bl	8009d04 <arm_scale_f32>
    arm_scale_f32(scratch, 1 - gWet, scratch, BUFFER_SIZE);
 8000996:	4959      	ldr	r1, [pc, #356]	@ (8000afc <supro_simulation_f32_process+0x274>)
 8000998:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 8000b1c <supro_simulation_f32_process+0x294>
 800099c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a0:	4608      	mov	r0, r1
 80009a2:	f504 5680 	add.w	r6, r4, #4096	@ 0x1000
 80009a6:	f009 f9ad 	bl	8009d04 <arm_scale_f32>
    arm_add_f32(env, scratch, scratch, BUFFER_SIZE);
 80009aa:	4a54      	ldr	r2, [pc, #336]	@ (8000afc <supro_simulation_f32_process+0x274>)
 80009ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009b0:	4851      	ldr	r0, [pc, #324]	@ (8000af8 <supro_simulation_f32_process+0x270>)
 80009b2:	4611      	mov	r1, r2
 80009b4:	f009 fa58 	bl	8009e68 <arm_add_f32>
    arm_scale_f32(scratch, gPost, x, BUFFER_SIZE);
 80009b8:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8000b20 <supro_simulation_f32_process+0x298>
 80009bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009c0:	4639      	mov	r1, r7
 80009c2:	484e      	ldr	r0, [pc, #312]	@ (8000afc <supro_simulation_f32_process+0x274>)
 80009c4:	f009 f99e 	bl	8009d04 <arm_scale_f32>
    partitioned_fir_convolution_fft(p, &firs[1], &overlap[BUFFER_SIZE]);
 80009c8:	9b01      	ldr	r3, [sp, #4]
 80009ca:	9803      	ldr	r0, [sp, #12]
 80009cc:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80009d0:	9b02      	ldr	r3, [sp, #8]
 80009d2:	f103 0114 	add.w	r1, r3, #20
 80009d6:	f000 ff7d 	bl	80018d4 <partitioned_fir_convolution_fft>

    float32_t *x       = p->processBuffer;
    float32_t *scratch = pow_scratch;

    // Envelope detection
    arm_mult_f32(x, x, scratch, BUFFER_SIZE);
 80009da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009de:	4a4e      	ldr	r2, [pc, #312]	@ (8000b18 <supro_simulation_f32_process+0x290>)
 80009e0:	4639      	mov	r1, r7
 80009e2:	4638      	mov	r0, r7
 80009e4:	f009 f9fa 	bl	8009ddc <arm_mult_f32>
    arm_biquad_cascade_df1_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[6], scratch, scratch, BUFFER_SIZE);
 80009e8:	4a4b      	ldr	r2, [pc, #300]	@ (8000b18 <supro_simulation_f32_process+0x290>)
 80009ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ee:	f8db 0024 	ldr.w	r0, [fp, #36]	@ 0x24
 80009f2:	4611      	mov	r1, r2
 80009f4:	f009 f8ba 	bl	8009b6c <arm_biquad_cascade_df1_f32>
    arm_scale_f32(scratch, 2.0f, scratch, BUFFER_SIZE);
 80009f8:	4947      	ldr	r1, [pc, #284]	@ (8000b18 <supro_simulation_f32_process+0x290>)
 80009fa:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80009fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a02:	4608      	mov	r0, r1
 8000a04:	f009 f97e 	bl	8009d04 <arm_scale_f32>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) scratch[i] = sqrtf(fmaxf(scratch[i], 0.0f));
 8000a08:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8000b00 <supro_simulation_f32_process+0x278>
    arm_scale_f32(scratch, 2.0f, scratch, BUFFER_SIZE);
 8000a0c:	4623      	mov	r3, r4
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) scratch[i] = sqrtf(fmaxf(scratch[i], 0.0f));
 8000a0e:	edd3 7a00 	vldr	s15, [r3]
 8000a12:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8000a16:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8000a1a:	eca3 7a01 	vstmia	r3!, {s14}
 8000a1e:	42b3      	cmp	r3, r6
 8000a20:	d1f5      	bne.n	8000a0e <supro_simulation_f32_process+0x186>
    float32_t coeffP  = (tanh_kP*tanh_kP - 1.0f) / gP;

    // Nonlinearity per sample
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
        float32_t env   = scratch[i];
        float32_t xBias = x[i] - gBias * env;
 8000a22:	eddf 9a39 	vldr	s19, [pc, #228]	@ 8000b08 <supro_simulation_f32_process+0x280>
 8000a26:	463d      	mov	r5, r7
        float32_t xPre  = gPre * xBias;
 8000a28:	ed9f 9a3e 	vldr	s18, [pc, #248]	@ 8000b24 <supro_simulation_f32_process+0x29c>
        float32_t m;
        if (xPre > kP) {
 8000a2c:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8000b28 <supro_simulation_f32_process+0x2a0>
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
        } else if (xPre >= -kN) {
 8000a30:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8000b2c <supro_simulation_f32_process+0x2a4>
            m = tanhf(xPre);
        } else {
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 8000a34:	eddf aa3e 	vldr	s21, [pc, #248]	@ 8000b30 <supro_simulation_f32_process+0x2a8>
 8000a38:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8000b34 <supro_simulation_f32_process+0x2ac>
 8000a3c:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8000b38 <supro_simulation_f32_process+0x2b0>
 8000a40:	eddf ba3e 	vldr	s23, [pc, #248]	@ 8000b3c <supro_simulation_f32_process+0x2b4>
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
 8000a44:	ed9f 8a3e 	vldr	s16, [pc, #248]	@ 8000b40 <supro_simulation_f32_process+0x2b8>
 8000a48:	e00f      	b.n	8000a6a <supro_simulation_f32_process+0x1e2>
 8000a4a:	f00a fe6b 	bl	800b724 <tanhf>
 8000a4e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8000b44 <supro_simulation_f32_process+0x2bc>
 8000a52:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8000b48 <supro_simulation_f32_process+0x2c0>
 8000a56:	eee0 7a07 	vfma.f32	s15, s0, s14
        }
        x[i] = gPost * m;
 8000a5a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000b4c <supro_simulation_f32_process+0x2c4>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 8000a5e:	42a6      	cmp	r6, r4
        x[i] = gPost * m;
 8000a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a64:	ed45 7a01 	vstr	s15, [r5, #-4]
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 8000a68:	d027      	beq.n	8000aba <supro_simulation_f32_process+0x232>
        float32_t env   = scratch[i];
 8000a6a:	ecb4 7a01 	vldmia	r4!, {s14}
        float32_t xBias = x[i] - gBias * env;
 8000a6e:	ecf5 7a01 	vldmia	r5!, {s15}
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
 8000a72:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8000b50 <supro_simulation_f32_process+0x2c8>
        float32_t xBias = x[i] - gBias * env;
 8000a76:	eee7 7a69 	vfms.f32	s15, s14, s19
        if (xPre > kP) {
 8000a7a:	eef4 7ae8 	vcmpe.f32	s15, s17
        float32_t xPre  = gPre * xBias;
 8000a7e:	ee27 7a89 	vmul.f32	s14, s15, s18
        if (xPre > kP) {
 8000a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
 8000a86:	eea7 0a48 	vfms.f32	s0, s14, s16
        if (xPre > kP) {
 8000a8a:	dcde      	bgt.n	8000a4a <supro_simulation_f32_process+0x1c2>
        } else if (xPre >= -kN) {
 8000a8c:	eef4 7acb 	vcmpe.f32	s15, s22
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 8000a90:	eeb0 0a4a 	vmov.f32	s0, s20
        } else if (xPre >= -kN) {
 8000a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 8000a98:	eea7 0a2a 	vfma.f32	s0, s14, s21
        } else if (xPre >= -kN) {
 8000a9c:	db22      	blt.n	8000ae4 <supro_simulation_f32_process+0x25c>
            m = tanhf(xPre);
 8000a9e:	eeb0 0a47 	vmov.f32	s0, s14
 8000aa2:	f00a fe3f 	bl	800b724 <tanhf>
 8000aa6:	eef0 7a40 	vmov.f32	s15, s0
        x[i] = gPost * m;
 8000aaa:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8000b4c <supro_simulation_f32_process+0x2c4>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 8000aae:	42a6      	cmp	r6, r4
        x[i] = gPost * m;
 8000ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ab4:	ed45 7a01 	vstr	s15, [r5, #-4]
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 8000ab8:	d1d7      	bne.n	8000a6a <supro_simulation_f32_process+0x1e2>
    partitioned_fir_convolution_fft(p, &firs[2], &overlap[2 * BUFFER_SIZE]);
 8000aba:	9b01      	ldr	r3, [sp, #4]
 8000abc:	9902      	ldr	r1, [sp, #8]
 8000abe:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 8000ac2:	9803      	ldr	r0, [sp, #12]
 8000ac4:	3128      	adds	r1, #40	@ 0x28
 8000ac6:	f000 ff05 	bl	80018d4 <partitioned_fir_convolution_fft>
    arm_scale_f32(p->processBuffer, 0.005f, p->processBuffer, BUFFER_SIZE);
 8000aca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ace:	4639      	mov	r1, r7
 8000ad0:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8000b54 <supro_simulation_f32_process+0x2cc>
 8000ad4:	4638      	mov	r0, r7
}
 8000ad6:	b005      	add	sp, #20
 8000ad8:	ecbd 8b0a 	vpop	{d8-d12}
 8000adc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_scale_f32(p->processBuffer, 0.005f, p->processBuffer, BUFFER_SIZE);
 8000ae0:	f009 b910 	b.w	8009d04 <arm_scale_f32>
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 8000ae4:	f00a fe1e 	bl	800b724 <tanhf>
 8000ae8:	eef0 7a6b 	vmov.f32	s15, s23
 8000aec:	eee0 7a4c 	vfms.f32	s15, s0, s24
 8000af0:	e7b3      	b.n	8000a5a <supro_simulation_f32_process+0x1d2>
 8000af2:	bf00      	nop
 8000af4:	3dcccccd 	.word	0x3dcccccd
 8000af8:	24001094 	.word	0x24001094
 8000afc:	24002094 	.word	0x24002094
 8000b00:	00000000 	.word	0x00000000
 8000b04:	3f710983 	.word	0x3f710983
 8000b08:	3f186130 	.word	0x3f186130
 8000b0c:	0800bb70 	.word	0x0800bb70
 8000b10:	d267d638 	.word	0xd267d638
 8000b14:	3f0d61b4 	.word	0x3f0d61b4
 8000b18:	24000094 	.word	0x24000094
 8000b1c:	3ee53c98 	.word	0x3ee53c98
 8000b20:	3f7db881 	.word	0x3f7db881
 8000b24:	3f8e9370 	.word	0x3f8e9370
 8000b28:	3f64018b 	.word	0x3f64018b
 8000b2c:	bf655493 	.word	0xbf655493
 8000b30:	3f7fa057 	.word	0x3f7fa057
 8000b34:	3f7f71fb 	.word	0x3f7f71fb
 8000b38:	bed80d82 	.word	0xbed80d82
 8000b3c:	bf42bc17 	.word	0xbf42bc17
 8000b40:	3f806a2a 	.word	0x3f806a2a
 8000b44:	bed8ee5b 	.word	0xbed8ee5b
 8000b48:	3f421c45 	.word	0x3f421c45
 8000b4c:	40d6c29a 	.word	0x40d6c29a
 8000b50:	3f7df857 	.word	0x3f7df857
 8000b54:	3ba3d70a 	.word	0x3ba3d70a

08000b58 <fx_supro_init>:
{
 8000b58:	b570      	push	{r4, r5, r6, lr}
    fx->states[0] = _dctm_static_mem_alloc(
 8000b5a:	2104      	movs	r1, #4
{
 8000b5c:	4604      	mov	r4, r0
    fx->states[0] = _dctm_static_mem_alloc(
 8000b5e:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8000b62:	f000 f911 	bl	8000d88 <_dctm_static_mem_alloc>
 8000b66:	4603      	mov	r3, r0
    fx->states[1] = _static_mem_alloc(
 8000b68:	2104      	movs	r1, #4
 8000b6a:	f246 0018 	movw	r0, #24600	@ 0x6018
    fx->states[0] = _dctm_static_mem_alloc(
 8000b6e:	60e3      	str	r3, [r4, #12]
    fx->states[1] = _static_mem_alloc(
 8000b70:	f000 f920 	bl	8000db4 <_static_mem_alloc>
 8000b74:	4603      	mov	r3, r0
    fx->states[2] = _static_mem_alloc(
 8000b76:	2104      	movs	r1, #4
 8000b78:	203c      	movs	r0, #60	@ 0x3c
    fx->states[1] = _static_mem_alloc(
 8000b7a:	6123      	str	r3, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 8000b7c:	f000 f91a 	bl	8000db4 <_static_mem_alloc>
        float32_t *fftBuf = (float32_t *)fx->states[1];
 8000b80:	6926      	ldr	r6, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 8000b82:	6160      	str	r0, [r4, #20]
 8000b84:	4605      	mov	r5, r0
        fir_h1_f32_init(&firs[0], &fftBuf[0 * BUFFER_OFFSET]);
 8000b86:	4631      	mov	r1, r6
 8000b88:	f000 f8aa 	bl	8000ce0 <fir_h1_f32_init>
        fir_h2_f32_init(&firs[1], &fftBuf[1 * BUFFER_OFFSET]);
 8000b8c:	f242 0108 	movw	r1, #8200	@ 0x2008
 8000b90:	f105 0014 	add.w	r0, r5, #20
 8000b94:	4431      	add	r1, r6
 8000b96:	f000 f8b7 	bl	8000d08 <fir_h2_f32_init>
        fir_h3_f32_init(&firs[2], &fftBuf[2 * BUFFER_OFFSET]);
 8000b9a:	f244 0110 	movw	r1, #16400	@ 0x4010
 8000b9e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5],
 8000ba2:	4d1d      	ldr	r5, [pc, #116]	@ (8000c18 <fx_supro_init+0xc0>)
        fir_h3_f32_init(&firs[2], &fftBuf[2 * BUFFER_OFFSET]);
 8000ba4:	4431      	add	r1, r6
 8000ba6:	f000 f8c3 	bl	8000d30 <fir_h3_f32_init>
    fx->states[3] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 8000baa:	2104      	movs	r1, #4
 8000bac:	2010      	movs	r0, #16
 8000bae:	f000 f8eb 	bl	8000d88 <_dctm_static_mem_alloc>
 8000bb2:	4603      	mov	r3, r0
    fx->states[4] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	2010      	movs	r0, #16
    fx->states[3] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 8000bb8:	61a3      	str	r3, [r4, #24]
    fx->states[4] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 8000bba:	f000 f8e5 	bl	8000d88 <_dctm_static_mem_alloc>
 8000bbe:	4603      	mov	r3, r0
    fx->states[5] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	200c      	movs	r0, #12
    fx->states[4] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 8000bc4:	61e3      	str	r3, [r4, #28]
    fx->states[5] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 8000bc6:	f000 f8f5 	bl	8000db4 <_static_mem_alloc>
 8000bca:	4603      	mov	r3, r0
    fx->states[6] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 8000bcc:	2104      	movs	r1, #4
 8000bce:	200c      	movs	r0, #12
    fx->states[5] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 8000bd0:	6223      	str	r3, [r4, #32]
    fx->states[6] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 8000bd2:	f000 f8ef 	bl	8000db4 <_static_mem_alloc>
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5],
 8000bd6:	69a3      	ldr	r3, [r4, #24]
 8000bd8:	462a      	mov	r2, r5
 8000bda:	2101      	movs	r1, #1
    fx->states[6] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 8000bdc:	6260      	str	r0, [r4, #36]	@ 0x24
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5],
 8000bde:	6a20      	ldr	r0, [r4, #32]
 8000be0:	f008 ffb6 	bl	8009b50 <arm_biquad_cascade_df1_init_f32>
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[6],
 8000be4:	69e3      	ldr	r3, [r4, #28]
 8000be6:	462a      	mov	r2, r5
 8000be8:	2101      	movs	r1, #1
 8000bea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000bec:	f008 ffb0 	bl	8009b50 <arm_biquad_cascade_df1_init_f32>
    fx->states[7] = _static_mem_alloc(sizeof(supro_simulation_f32), _Alignof(supro_simulation_f32));
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	203c      	movs	r0, #60	@ 0x3c
 8000bf4:	f000 f8de 	bl	8000db4 <_static_mem_alloc>
        fir_t     *firs      = (fir_t *)fx->states[2];
 8000bf8:	6963      	ldr	r3, [r4, #20]
        float32_t *dtcmState = (float32_t *)fx->states[0];
 8000bfa:	68e1      	ldr	r1, [r4, #12]
        supro_simulation_init_f32((supro_simulation_f32 *)fx->states[7],
 8000bfc:	f103 0214 	add.w	r2, r3, #20
    fx->states[7] = _static_mem_alloc(sizeof(supro_simulation_f32), _Alignof(supro_simulation_f32));
 8000c00:	62a0      	str	r0, [r4, #40]	@ 0x28
    self->fir1  = fir1;
 8000c02:	62c3      	str	r3, [r0, #44]	@ 0x2c
        supro_simulation_init_f32((supro_simulation_f32 *)fx->states[7],
 8000c04:	3328      	adds	r3, #40	@ 0x28
    self->fir2  = fir2;
 8000c06:	6302      	str	r2, [r0, #48]	@ 0x30
    fx->process = supro_simulation_f32_process;
 8000c08:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <fx_supro_init+0xc4>)
    self->fir3  = fir3;
 8000c0a:	e9c0 310d 	strd	r3, r1, [r0, #52]	@ 0x34
    fx->clean = fx_reverb_clean;
 8000c0e:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <fx_supro_init+0xc8>)
 8000c10:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
 8000c14:	bd70      	pop	{r4, r5, r6, pc}
 8000c16:	bf00      	nop
 8000c18:	0800bac0 	.word	0x0800bac0
 8000c1c:	08000889 	.word	0x08000889
 8000c20:	08000865 	.word	0x08000865

08000c24 <fir_OD_M212_VINT_DYN_201_P05_00_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + OD_M212_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + OD_M212_SCRATCH_FLOATS + OD_M212_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 8000c24:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 8000c28:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 8000c2c:	440a      	add	r2, r1
void fir_OD_M212_VINT_DYN_201_P05_00_f32_init(fir_t *self, float *state){
 8000c2e:	b430      	push	{r4, r5}
    self->numSegments  = OD_M212_SEGMENTS;
    self->curr_fftidx  = 0;
 8000c30:	2400      	movs	r4, #0
    self->numSegments  = OD_M212_SEGMENTS;
 8000c32:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 8000c34:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < OD_M212_SEGMENTS; ++i) {
        IR_TABLE [i] = &_CAB_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000c38:	4a03      	ldr	r2, [pc, #12]	@ (8000c48 <fir_OD_M212_VINT_DYN_201_P05_00_f32_init+0x24>)
    self->numSegments  = OD_M212_SEGMENTS;
 8000c3a:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 8000c3c:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 8000c40:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_CAB_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000c42:	e9c3 2100 	strd	r2, r1, [r3]
}
 8000c46:	4770      	bx	lr
 8000c48:	0800bbc0 	.word	0x0800bbc0

08000c4c <fir_OD_M212_VINT_DYN_201_P05_00_f32_clean>:

void fir_OD_M212_VINT_DYN_201_P05_00_f32_clean(fir_t *self){

    for (uint32_t i = 0; i < OD_M212_SEGMENTS; ++i) {
    	self->ir_ffts [i]   = NULL;
 8000c4c:	2300      	movs	r3, #0
    	self->prev_ffts [i] = NULL;
 8000c4e:	e9d0 1200 	ldrd	r1, r2, [r0]
    	self->ir_ffts [i]   = NULL;
 8000c52:	600b      	str	r3, [r1, #0]
    	self->prev_ffts [i] = NULL;
 8000c54:	6013      	str	r3, [r2, #0]
    }

}
 8000c56:	4770      	bx	lr

08000c58 <fir_emt_140_dark_3_f32_init>:
#include "impulse_responses.h"
#include "stdio.h"


void fir_emt_140_dark_3_f32_init(fir_t *self, float *state){
 8000c58:	b470      	push	{r4, r5, r6}
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + EMT_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + EMT_SCRATCH_FLOATS + EMT_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 8000c5a:	4c0e      	ldr	r4, [pc, #56]	@ (8000c94 <fir_emt_140_dark_3_f32_init+0x3c>)
    self->numSegments  = EMT_SEGMENTS;
    self->curr_fftidx  = 0;
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <fir_emt_140_dark_3_f32_init+0x40>)
    self->ir_ffts      = IR_TABLE;
 8000c60:	f501 26b8 	add.w	r6, r1, #376832	@ 0x5c000
    self->prev_ffts    = PREV_TABLE;
 8000c64:	440c      	add	r4, r1
 8000c66:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <fir_emt_140_dark_3_f32_init+0x44>)
 8000c68:	f503 2cb8 	add.w	ip, r3, #376832	@ 0x5c000
    self->ir_ffts      = IR_TABLE;
 8000c6c:	6006      	str	r6, [r0, #0]
    self->prev_ffts    = PREV_TABLE;
 8000c6e:	6044      	str	r4, [r0, #4]
    self->numSegments  = EMT_SEGMENTS;
 8000c70:	440a      	add	r2, r1
 8000c72:	242e      	movs	r4, #46	@ 0x2e
    self->curr_fftidx  = 0;
 8000c74:	e9c0 5502 	strd	r5, r5, [r0, #8]
    self->numSegments  = EMT_SEGMENTS;
 8000c78:	6104      	str	r4, [r0, #16]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
        IR_TABLE [i] = &_EMT_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000c7a:	f842 3f04 	str.w	r3, [r2, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 8000c7e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
 8000c82:	f8c2 10b8 	str.w	r1, [r2, #184]	@ 0xb8
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 8000c86:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8000c8a:	4563      	cmp	r3, ip
 8000c8c:	d1f5      	bne.n	8000c7a <fir_emt_140_dark_3_f32_init+0x22>
    }

}
 8000c8e:	bc70      	pop	{r4, r5, r6}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	0005c0b8 	.word	0x0005c0b8
 8000c98:	0800dbc0 	.word	0x0800dbc0
 8000c9c:	0005bffc 	.word	0x0005bffc

08000ca0 <fir_emt_140_dark_3_f32_clean>:


void fir_emt_140_dark_3_f32_clean(fir_t *self)
{
 8000ca0:	4603      	mov	r3, r0
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
    	self->ir_ffts [i]   = NULL;
 8000ca2:	6800      	ldr	r0, [r0, #0]
{
 8000ca4:	b510      	push	{r4, lr}
    	self->prev_ffts [i] = NULL;
 8000ca6:	685c      	ldr	r4, [r3, #4]
 8000ca8:	f100 03b7 	add.w	r3, r0, #183	@ 0xb7
 8000cac:	1b1b      	subs	r3, r3, r4
 8000cae:	f5b3 7fb7 	cmp.w	r3, #366	@ 0x16e
 8000cb2:	d90a      	bls.n	8000cca <fir_emt_140_dark_3_f32_clean+0x2a>
    	self->ir_ffts [i]   = NULL;
 8000cb4:	22b8      	movs	r2, #184	@ 0xb8
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	f009 fe2a 	bl	800a910 <memset>
    	self->prev_ffts [i] = NULL;
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	22b8      	movs	r2, #184	@ 0xb8
 8000cc0:	2100      	movs	r1, #0
    }
}
 8000cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	self->prev_ffts [i] = NULL;
 8000cc6:	f009 be23 	b.w	800a910 <memset>
 8000cca:	1f03      	subs	r3, r0, #4
 8000ccc:	1f22      	subs	r2, r4, #4
 8000cce:	30b4      	adds	r0, #180	@ 0xb4
    	self->ir_ffts [i]   = NULL;
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f843 1f04 	str.w	r1, [r3, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 8000cd6:	4283      	cmp	r3, r0
    	self->prev_ffts [i] = NULL;
 8000cd8:	f842 1f04 	str.w	r1, [r2, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 8000cdc:	d1f9      	bne.n	8000cd2 <fir_emt_140_dark_3_f32_clean+0x32>
}
 8000cde:	bd10      	pop	{r4, pc}

08000ce0 <fir_h1_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + H1_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + H1_SCRATCH_FLOATS + H1_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 8000ce0:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 8000ce4:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 8000ce8:	440a      	add	r2, r1
void fir_h1_f32_init(fir_t *self, float *state){
 8000cea:	b430      	push	{r4, r5}
    self->numSegments  = H1_SEGMENTS;
    self->curr_fftidx  = 0;
 8000cec:	2400      	movs	r4, #0
    self->numSegments  = H1_SEGMENTS;
 8000cee:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 8000cf0:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < H1_SEGMENTS; ++i) {
        IR_TABLE [i] = &_H1_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000cf4:	4a03      	ldr	r2, [pc, #12]	@ (8000d04 <fir_h1_f32_init+0x24>)
    self->numSegments  = H1_SEGMENTS;
 8000cf6:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 8000cf8:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 8000cfc:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_H1_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000cfe:	e9c3 2100 	strd	r2, r1, [r3]
}
 8000d02:	4770      	bx	lr
 8000d04:	08069bc0 	.word	0x08069bc0

08000d08 <fir_h2_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + H2_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + H2_SCRATCH_FLOATS + H2_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 8000d08:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 8000d0c:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 8000d10:	440a      	add	r2, r1
void fir_h2_f32_init(fir_t *self, float *state){
 8000d12:	b430      	push	{r4, r5}
    self->numSegments  = H2_SEGMENTS;
    self->curr_fftidx  = 0;
 8000d14:	2400      	movs	r4, #0
    self->numSegments  = H2_SEGMENTS;
 8000d16:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 8000d18:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < H2_SEGMENTS; ++i) {
        IR_TABLE [i] = &_H2_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000d1c:	4a03      	ldr	r2, [pc, #12]	@ (8000d2c <fir_h2_f32_init+0x24>)
    self->numSegments  = H2_SEGMENTS;
 8000d1e:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 8000d20:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 8000d24:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_H2_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000d26:	e9c3 2100 	strd	r2, r1, [r3]
}
 8000d2a:	4770      	bx	lr
 8000d2c:	0806bbc0 	.word	0x0806bbc0

08000d30 <fir_h3_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + H3_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + H3_SCRATCH_FLOATS + H3_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 8000d30:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 8000d34:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 8000d38:	440a      	add	r2, r1
void fir_h3_f32_init(fir_t *self, float *state){
 8000d3a:	b430      	push	{r4, r5}
    self->numSegments  = H3_SEGMENTS;
    self->curr_fftidx  = 0;
 8000d3c:	2400      	movs	r4, #0
    self->numSegments  = H3_SEGMENTS;
 8000d3e:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 8000d40:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < H3_SEGMENTS; ++i) {
        IR_TABLE [i] = &_H3_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000d44:	4a03      	ldr	r2, [pc, #12]	@ (8000d54 <fir_h3_f32_init+0x24>)
    self->numSegments  = H3_SEGMENTS;
 8000d46:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 8000d48:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 8000d4c:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_H3_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000d4e:	e9c3 2100 	strd	r2, r1, [r3]
}
 8000d52:	4770      	bx	lr
 8000d54:	0806dbc0 	.word	0x0806dbc0

08000d58 <dctm_pool_init>:
 * Clears the dtcm_static_pool to zero and resets the head pointer.
 * Must be called once at system startup before any DTCM allocations.
 */
void dctm_pool_init()
{
    dtcm_pool_head = 0u;
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <dctm_pool_init+0x10>)
    memset(dtcm_static_pool, 0, DTCM_STATIC_POOL_SIZE);
 8000d5c:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <dctm_pool_init+0x14>)
    dtcm_pool_head = 0u;
 8000d62:	6019      	str	r1, [r3, #0]
    memset(dtcm_static_pool, 0, DTCM_STATIC_POOL_SIZE);
 8000d64:	f009 bdd4 	b.w	800a910 <memset>
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000020 	.word	0x20000020

08000d70 <static_pool_init>:
 * Clears the static_pool to zero and resets the head pointer.
 * Must be called once at system startup before any SRAM allocations.
 */
void static_pool_init()
{
    pool_head = 0u;
 8000d70:	2100      	movs	r1, #0
 8000d72:	4b03      	ldr	r3, [pc, #12]	@ (8000d80 <static_pool_init+0x10>)
    memset(static_pool, 0, STATIC_POOL_SIZE);
 8000d74:	f44f 22d0 	mov.w	r2, #425984	@ 0x68000
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <static_pool_init+0x14>)
    pool_head = 0u;
 8000d7a:	6019      	str	r1, [r3, #0]
    memset(static_pool, 0, STATIC_POOL_SIZE);
 8000d7c:	f009 bdc8 	b.w	800a910 <memset>
 8000d80:	24003094 	.word	0x24003094
 8000d84:	24003098 	.word	0x24003098

08000d88 <_dctm_static_mem_alloc>:
 * @param align Required byte alignment for the returned pointer.
 * @return Pointer to the allocated block within dtcm_static_pool.
 *         On overflow, calls _memory_alloc_error_handler().
 */
void *_dctm_static_mem_alloc(size_t size, size_t align)
{
 8000d88:	b410      	push	{r4}
    size_t off = align_up(dtcm_pool_head, align);
 8000d8a:	4c08      	ldr	r4, [pc, #32]	@ (8000dac <_dctm_static_mem_alloc+0x24>)
    return (x + (align - 1u)) & ~(align - 1u);
 8000d8c:	424a      	negs	r2, r1
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	440b      	add	r3, r1
 8000d94:	4013      	ands	r3, r2

    if (off + size > DTCM_STATIC_POOL_SIZE) {
 8000d96:	18c2      	adds	r2, r0, r3
 8000d98:	f5b2 4f70 	cmp.w	r2, #61440	@ 0xf000
 8000d9c:	d805      	bhi.n	8000daa <_dctm_static_mem_alloc+0x22>
        _memory_alloc_error_handler();
    }

    dtcm_pool_head = off + size;
    return &dtcm_static_pool[off];
 8000d9e:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <_dctm_static_mem_alloc+0x28>)
    dtcm_pool_head = off + size;
 8000da0:	6022      	str	r2, [r4, #0]
}
 8000da2:	4418      	add	r0, r3
 8000da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	e7fe      	b.n	8000daa <_dctm_static_mem_alloc+0x22>
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000020 	.word	0x20000020

08000db4 <_static_mem_alloc>:
 * @param align Required byte alignment for the returned pointer.
 * @return Pointer to the allocated block within static_pool.
 *         On overflow, calls _memory_alloc_error_handler().
 */
void *_static_mem_alloc(size_t size, size_t align)
{
 8000db4:	b410      	push	{r4}
    size_t off = align_up(pool_head, align);
 8000db6:	4c08      	ldr	r4, [pc, #32]	@ (8000dd8 <_static_mem_alloc+0x24>)
    return (x + (align - 1u)) & ~(align - 1u);
 8000db8:	424a      	negs	r2, r1
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	440b      	add	r3, r1
 8000dc0:	4013      	ands	r3, r2

    if (off + size > STATIC_POOL_SIZE) {
 8000dc2:	18c2      	adds	r2, r0, r3
 8000dc4:	f5b2 2fd0 	cmp.w	r2, #425984	@ 0x68000
 8000dc8:	d805      	bhi.n	8000dd6 <_static_mem_alloc+0x22>
        _memory_alloc_error_handler();
    }

    pool_head = off + size;
    return &static_pool[off];
 8000dca:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <_static_mem_alloc+0x28>)
    pool_head = off + size;
 8000dcc:	6022      	str	r2, [r4, #0]
}
 8000dce:	4418      	add	r0, r3
 8000dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	e7fe      	b.n	8000dd6 <_static_mem_alloc+0x22>
 8000dd8:	24003094 	.word	0x24003094
 8000ddc:	24003098 	.word	0x24003098

08000de0 <readUART>:
#include <ctype.h>

/* Example implementation: splits node definitions on ';' */
void readUART(dataLink* link, char c)
{
    if (c == '\n' || c == '\r') {
 8000de0:	290a      	cmp	r1, #10
{
 8000de2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de6:	4605      	mov	r5, r0
 8000de8:	b085      	sub	sp, #20
        link->commandBuffer[link->commandIndex] = '\0';
 8000dea:	f890 30db 	ldrb.w	r3, [r0, #219]	@ 0xdb
    if (c == '\n' || c == '\r') {
 8000dee:	d00c      	beq.n	8000e0a <readUART+0x2a>
 8000df0:	290d      	cmp	r1, #13
 8000df2:	d00a      	beq.n	8000e0a <readUART+0x2a>
            }
        }
        return;
    }

    if (link->commandIndex < sizeof(link->commandBuffer) - 1)
 8000df4:	2b7e      	cmp	r3, #126	@ 0x7e
 8000df6:	d805      	bhi.n	8000e04 <readUART+0x24>
    {
        link->commandBuffer[link->commandIndex++] = c;
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	4403      	add	r3, r0
 8000dfc:	f880 20db 	strb.w	r2, [r0, #219]	@ 0xdb
 8000e00:	f883 105b 	strb.w	r1, [r3, #91]	@ 0x5b
    }
}
 8000e04:	b005      	add	sp, #20
 8000e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset(params, 255, sizeof params);   /* all 255, not just first */
 8000e0a:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
        link->commandBuffer[link->commandIndex] = '\0';
 8000e0e:	2100      	movs	r1, #0
 8000e10:	442b      	add	r3, r5
        while ((token = strtok_r(rest, ";", &rest))) {
 8000e12:	f8df 81a4 	ldr.w	r8, [pc, #420]	@ 8000fb8 <readUART+0x1d8>
        char* rest = link->commandBuffer;
 8000e16:	f105 005b 	add.w	r0, r5, #91	@ 0x5b
        uint8_t effectId = 255;
 8000e1a:	f04f 09ff 	mov.w	r9, #255	@ 0xff
        link->commandBuffer[link->commandIndex] = '\0';
 8000e1e:	f883 105b 	strb.w	r1, [r3, #91]	@ 0x5b
        memset(params, 255, sizeof params);   /* all 255, not just first */
 8000e22:	f8ad 2000 	strh.w	r2, [sp]
        uint8_t nodeId = 255;
 8000e26:	464f      	mov	r7, r9
        memset(inputs, 255, sizeof inputs);
 8000e28:	f8ad 2004 	strh.w	r2, [sp, #4]
        link->commandIndex = 0;
 8000e2c:	f885 10db 	strb.w	r1, [r5, #219]	@ 0xdb
        while ((token = strtok_r(rest, ";", &rest))) {
 8000e30:	4641      	mov	r1, r8
        memset(inputs, 255, sizeof inputs);
 8000e32:	f88d 2006 	strb.w	r2, [sp, #6]
        memset(params, 255, sizeof params);   /* all 255, not just first */
 8000e36:	f88d 2002 	strb.w	r2, [sp, #2]
        while ((token = strtok_r(rest, ";", &rest))) {
 8000e3a:	aa02      	add	r2, sp, #8
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 8000e3c:	4e5d      	ldr	r6, [pc, #372]	@ (8000fb4 <readUART+0x1d4>)
        char* rest = link->commandBuffer;
 8000e3e:	9002      	str	r0, [sp, #8]
        while ((token = strtok_r(rest, ";", &rest))) {
 8000e40:	f009 fd96 	bl	800a970 <strtok_r>
 8000e44:	b1b0      	cbz	r0, 8000e74 <readUART+0x94>
            if (token[0] == 'N')
 8000e46:	7803      	ldrb	r3, [r0, #0]
 8000e48:	3b45      	subs	r3, #69	@ 0x45
 8000e4a:	2b0b      	cmp	r3, #11
 8000e4c:	d80b      	bhi.n	8000e66 <readUART+0x86>
 8000e4e:	e8df f003 	tbb	[pc, r3]
 8000e52:	0a9d      	.short	0x0a9d
 8000e54:	0a6f0a0a 	.word	0x0a6f0a0a
 8000e58:	060a0a0a 	.word	0x060a0a0a
 8000e5c:	480a      	.short	0x480a
                nodeId = atoi(&token[1]);
 8000e5e:	3001      	adds	r0, #1
 8000e60:	f009 fb28 	bl	800a4b4 <atoi>
 8000e64:	b2c7      	uxtb	r7, r0
        while ((token = strtok_r(rest, ";", &rest))) {
 8000e66:	9802      	ldr	r0, [sp, #8]
 8000e68:	aa02      	add	r2, sp, #8
 8000e6a:	4641      	mov	r1, r8
 8000e6c:	f009 fd80 	bl	800a970 <strtok_r>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d1e8      	bne.n	8000e46 <readUART+0x66>
        if (nodeId < MAX_NODES)
 8000e74:	2f09      	cmp	r7, #9
 8000e76:	d8c5      	bhi.n	8000e04 <readUART+0x24>
            	n->params[i] = params[i];
 8000e78:	4604      	mov	r4, r0
 8000e7a:	f89d 1000 	ldrb.w	r1, [sp]
 8000e7e:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
            	n->inputs[i] = inputs[i];
 8000e82:	f89d 3004 	ldrb.w	r3, [sp, #4]
            	n->params[i] = params[i];
 8000e86:	f361 0407 	bfi	r4, r1, #0, #8
 8000e8a:	f89d 1001 	ldrb.w	r1, [sp, #1]
            n->nodeId = nodeId;
 8000e8e:	54af      	strb	r7, [r5, r2]
            n->effectId = effectId;
 8000e90:	442a      	add	r2, r5
            	n->params[i] = params[i];
 8000e92:	f361 240f 	bfi	r4, r1, #8, #8
 8000e96:	f89d 1002 	ldrb.w	r1, [sp, #2]
            	n->inputs[i] = inputs[i];
 8000e9a:	f89d 0005 	ldrb.w	r0, [sp, #5]
            	n->params[i] = params[i];
 8000e9e:	f361 4417 	bfi	r4, r1, #16, #8
 8000ea2:	00f9      	lsls	r1, r7, #3
            	n->inputs[i] = inputs[i];
 8000ea4:	71d0      	strb	r0, [r2, #7]
            	n->params[i] = params[i];
 8000ea6:	f363 641f 	bfi	r4, r3, #24, #8
            	if (inputs[i] != 255) inputCount++;
 8000eaa:	3bff      	subs	r3, #255	@ 0xff
            	n->inputs[i] = inputs[i];
 8000eac:	4439      	add	r1, r7
            n->effectId = effectId;
 8000eae:	f882 9001 	strb.w	r9, [r2, #1]
            	if (inputs[i] != 255) inputCount++;
 8000eb2:	bf18      	it	ne
 8000eb4:	2301      	movne	r3, #1
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
            	n->inputs[i] = inputs[i];
 8000eb8:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8000ebc:	4429      	add	r1, r5
            	if (inputs[i] != 255) inputCount++;
 8000ebe:	bf18      	it	ne
 8000ec0:	3301      	addne	r3, #1
            	n->params[i] = params[i];
 8000ec2:	f8c2 4003 	str.w	r4, [r2, #3]
            	if (inputs[i] != 255) inputCount++;
 8000ec6:	28ff      	cmp	r0, #255	@ 0xff
            	n->inputs[i] = inputs[i];
 8000ec8:	7208      	strb	r0, [r1, #8]
            	if (inputs[i] != 255) inputCount++;
 8000eca:	d001      	beq.n	8000ed0 <readUART+0xf0>
 8000ecc:	3301      	adds	r3, #1
 8000ece:	b2db      	uxtb	r3, r3
            n->numInputs = inputCount;
 8000ed0:	7093      	strb	r3, [r2, #2]
            if (nodeId >= link->nodeCount)
 8000ed2:	f895 305a 	ldrb.w	r3, [r5, #90]	@ 0x5a
 8000ed6:	42bb      	cmp	r3, r7
 8000ed8:	d894      	bhi.n	8000e04 <readUART+0x24>
            	link->nodeCount = nodeId + 1;
 8000eda:	3701      	adds	r7, #1
 8000edc:	f885 705a 	strb.w	r7, [r5, #90]	@ 0x5a
        return;
 8000ee0:	e790      	b.n	8000e04 <readUART+0x24>
                while (*p && i < NUM_PARAMETERS)
 8000ee2:	7843      	ldrb	r3, [r0, #1]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0be      	beq.n	8000e66 <readUART+0x86>
                char* p = &token[1];
 8000ee8:	1c44      	adds	r4, r0, #1
 8000eea:	46eb      	mov	fp, sp
                uint8_t i = 0;
 8000eec:	f04f 0a00 	mov.w	sl, #0
                    params[i++] = atoi(p);
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f10a 0a01 	add.w	sl, sl, #1
 8000ef6:	f009 fadd 	bl	800a4b4 <atoi>
 8000efa:	f88b 0000 	strb.w	r0, [fp]
                    while (*p && *p != ',') p++;
 8000efe:	7823      	ldrb	r3, [r4, #0]
                    params[i++] = atoi(p);
 8000f00:	fa5f fa8a 	uxtb.w	sl, sl
                    while (*p && *p != ',') p++;
 8000f04:	1e1a      	subs	r2, r3, #0
 8000f06:	bf18      	it	ne
 8000f08:	2201      	movne	r2, #1
 8000f0a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f0c:	d008      	beq.n	8000f20 <readUART+0x140>
 8000f0e:	2a00      	cmp	r2, #0
 8000f10:	d043      	beq.n	8000f9a <readUART+0x1ba>
 8000f12:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000f16:	1e1a      	subs	r2, r3, #0
 8000f18:	bf18      	it	ne
 8000f1a:	2201      	movne	r2, #1
 8000f1c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f1e:	d1f6      	bne.n	8000f0e <readUART+0x12e>
                while (*p && i < NUM_PARAMETERS)
 8000f20:	7863      	ldrb	r3, [r4, #1]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d09f      	beq.n	8000e66 <readUART+0x86>
 8000f26:	f1ba 0f03 	cmp.w	sl, #3
 8000f2a:	d09c      	beq.n	8000e66 <readUART+0x86>
                    	p++;
 8000f2c:	3401      	adds	r4, #1
 8000f2e:	e03d      	b.n	8000fac <readUART+0x1cc>
                char* p = &token[1];
 8000f30:	1c44      	adds	r4, r0, #1
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 8000f32:	f04f 0a00 	mov.w	sl, #0
                char* p = &token[1];
 8000f36:	9403      	str	r4, [sp, #12]
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 8000f38:	7823      	ldrb	r3, [r4, #0]
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 8000f3a:	220a      	movs	r2, #10
 8000f3c:	a903      	add	r1, sp, #12
 8000f3e:	4620      	mov	r0, r4
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d090      	beq.n	8000e66 <readUART+0x86>
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 8000f44:	5cf3      	ldrb	r3, [r6, r3]
 8000f46:	075b      	lsls	r3, r3, #29
 8000f48:	d40a      	bmi.n	8000f60 <readUART+0x180>
 8000f4a:	3401      	adds	r4, #1
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	a903      	add	r1, sp, #12
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 8000f50:	9403      	str	r4, [sp, #12]
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 8000f52:	4620      	mov	r0, r4
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 8000f54:	7823      	ldrb	r3, [r4, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d085      	beq.n	8000e66 <readUART+0x86>
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 8000f5a:	5cf3      	ldrb	r3, [r6, r3]
 8000f5c:	075b      	lsls	r3, r3, #29
 8000f5e:	d5f4      	bpl.n	8000f4a <readUART+0x16a>
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 8000f60:	f009 fcae 	bl	800a8c0 <strtoul>
 8000f64:	f10a 0310 	add.w	r3, sl, #16
					if (*p == ',') p++;
 8000f68:	9c03      	ldr	r4, [sp, #12]
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 8000f6a:	eb0d 0203 	add.w	r2, sp, r3
 8000f6e:	f10a 0301 	add.w	r3, sl, #1
 8000f72:	f802 0c0c 	strb.w	r0, [r2, #-12]
 8000f76:	b2db      	uxtb	r3, r3
					if (*p == ',') p++;
 8000f78:	7822      	ldrb	r2, [r4, #0]
 8000f7a:	469a      	mov	sl, r3
 8000f7c:	2a2c      	cmp	r2, #44	@ 0x2c
 8000f7e:	d101      	bne.n	8000f84 <readUART+0x1a4>
 8000f80:	3401      	adds	r4, #1
 8000f82:	9403      	str	r4, [sp, #12]
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d1d7      	bne.n	8000f38 <readUART+0x158>
        while ((token = strtok_r(rest, ";", &rest))) {
 8000f88:	9802      	ldr	r0, [sp, #8]
 8000f8a:	e76d      	b.n	8000e68 <readUART+0x88>
                effectId = atoi(&token[1]);
 8000f8c:	3001      	adds	r0, #1
 8000f8e:	f009 fa91 	bl	800a4b4 <atoi>
 8000f92:	fa5f f980 	uxtb.w	r9, r0
        while ((token = strtok_r(rest, ";", &rest))) {
 8000f96:	9802      	ldr	r0, [sp, #8]
 8000f98:	e766      	b.n	8000e68 <readUART+0x88>
                    if (*p == ',')
 8000f9a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f9c:	d0c0      	beq.n	8000f20 <readUART+0x140>
                while (*p && i < NUM_PARAMETERS)
 8000f9e:	f1ba 0f03 	cmp.w	sl, #3
 8000fa2:	f43f af60 	beq.w	8000e66 <readUART+0x86>
 8000fa6:	2a00      	cmp	r2, #0
 8000fa8:	f43f af5d 	beq.w	8000e66 <readUART+0x86>
 8000fac:	f10b 0b01 	add.w	fp, fp, #1
 8000fb0:	e79e      	b.n	8000ef0 <readUART+0x110>
 8000fb2:	bf00      	nop
 8000fb4:	0808313b 	.word	0x0808313b
 8000fb8:	0806fbc0 	.word	0x0806fbc0

08000fbc <initDataLink>:


void initDataLink(dataLink* link)
{
 8000fbc:	b410      	push	{r4}
    link->nodeCount = 0;
 8000fbe:	2400      	movs	r4, #0
    {

        link->nodes[i].nodeId = 255;
        link->nodes[i].effectId = 255;
        link->nodes[i].numInputs = 0;
        link->processOrder[i] = 255;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
        link->nodes[i].nodeId = 255;
 8000fc4:	f46f 017f 	mvn.w	r1, #16711680	@ 0xff0000
 8000fc8:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
    link->nodeCount = 0;
 8000fcc:	f880 405a 	strb.w	r4, [r0, #90]	@ 0x5a
    link->commandIndex = 0;
 8000fd0:	f880 40db 	strb.w	r4, [r0, #219]	@ 0xdb
    link->readUART = readUART;
 8000fd4:	4c14      	ldr	r4, [pc, #80]	@ (8001028 <initDataLink+0x6c>)
        link->processOrder[i] = 255;
 8000fd6:	f8c0 30dc 	str.w	r3, [r0, #220]	@ 0xdc
    link->readUART = readUART;
 8000fda:	f8c0 40e8 	str.w	r4, [r0, #232]	@ 0xe8
        link->nodes[i].nodeId = 255;
 8000fde:	f06f 04ff 	mvn.w	r4, #255	@ 0xff
 8000fe2:	6183      	str	r3, [r0, #24]
 8000fe4:	6384      	str	r4, [r0, #56]	@ 0x38
 8000fe6:	6203      	str	r3, [r0, #32]
        link->processOrder[i] = 255;
 8000fe8:	f8c0 30e0 	str.w	r3, [r0, #224]	@ 0xe0
        link->nodes[i].nodeId = 255;
 8000fec:	6343      	str	r3, [r0, #52]	@ 0x34
 8000fee:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8000ff0:	6443      	str	r3, [r0, #68]	@ 0x44
        link->processOrder[i] = 255;
 8000ff2:	f8a0 30e4 	strh.w	r3, [r0, #228]	@ 0xe4
        link->nodes[i].nodeId = 255;
 8000ff6:	e9c0 3404 	strd	r3, r4, [r0, #16]
 8000ffa:	e9c0 1300 	strd	r1, r3, [r0]
        link->processOrder[i] = 255;
 8000ffe:	f64f 74ff 	movw	r4, #65535	@ 0xffff
        link->nodes[i].nodeId = 255;
 8001002:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8001006:	e9c0 1309 	strd	r1, r3, [r0, #36]	@ 0x24
 800100a:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
 800100e:	e9c0 1312 	strd	r1, r3, [r0, #72]	@ 0x48
 8001012:	e9c0 2314 	strd	r2, r3, [r0, #80]	@ 0x50
 8001016:	f46f 437f 	mvn.w	r3, #65280	@ 0xff00
            link->nodes[i].params[j] = 255;
        }

        for (int j = 0; j < MAX_INPUTS; j++)
        {
            link->nodes[i].inputs[j] = 255;
 800101a:	f8a0 4058 	strh.w	r4, [r0, #88]	@ 0x58
        link->nodes[i].nodeId = 255;
 800101e:	61c3      	str	r3, [r0, #28]
 8001020:	6403      	str	r3, [r0, #64]	@ 0x40
        }

    }
}
 8001022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	08000de1 	.word	0x08000de1

0800102c <HAL_ADC_ConvHalfCpltCallback>:
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800102c:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800102e:	f003 021f 	and.w	r2, r3, #31
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001032:	f3bf 8f4f 	dsb	sy
 8001036:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800103a:	480a      	ldr	r0, [pc, #40]	@ (8001064 <HAL_ADC_ConvHalfCpltCallback+0x38>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 800103c:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800103e:	f8c0 325c 	str.w	r3, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001042:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8001044:	1aca      	subs	r2, r1, r3
 8001046:	2a00      	cmp	r2, #0
 8001048:	dcf9      	bgt.n	800103e <HAL_ADC_ConvHalfCpltCallback+0x12>
 800104a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800104e:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[0…BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)adcInput,
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcHalfComplete(&apipe, adcInput);
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001054:	4902      	ldr	r1, [pc, #8]	@ (8001060 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001056:	6943      	ldr	r3, [r0, #20]
 8001058:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 800105c:	4718      	bx	r3
 800105e:	bf00      	nop
 8001060:	2406c098 	.word	0x2406c098
 8001064:	e000ed00 	.word	0xe000ed00
 8001068:	3800f180 	.word	0x3800f180

0800106c <HAL_ADC_ConvCpltCallback>:
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800106c:	490d      	ldr	r1, [pc, #52]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0x38>)
 800106e:	f001 021f 	and.w	r2, r1, #31
 8001072:	f502 6300 	add.w	r3, r2, #2048	@ 0x800
  __ASM volatile ("dsb 0xF":::"memory");
 8001076:	f3bf 8f4f 	dsb	sy
 800107a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800107e:	480a      	ldr	r0, [pc, #40]	@ (80010a8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001080:	4411      	add	r1, r2
 8001082:	1aca      	subs	r2, r1, r3
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001084:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8001086:	2b00      	cmp	r3, #0
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001088:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
      } while ( op_size > 0 );
 800108c:	dcf9      	bgt.n	8001082 <HAL_ADC_ConvCpltCallback+0x16>
 800108e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001092:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[BUFFER_SIZE…2*BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)&adcInput[BUFFER_SIZE],
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcComplete(&apipe, adcInput);
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <HAL_ADC_ConvCpltCallback+0x40>)
 8001098:	4905      	ldr	r1, [pc, #20]	@ (80010b0 <HAL_ADC_ConvCpltCallback+0x44>)
 800109a:	6983      	ldr	r3, [r0, #24]
 800109c:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 80010a0:	4718      	bx	r3
 80010a2:	bf00      	nop
 80010a4:	2406c898 	.word	0x2406c898
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	3800f180 	.word	0x3800f180
 80010b0:	2406c098 	.word	0x2406c098

080010b4 <HAL_UART_RxCpltCallback>:
volatile unsigned long now = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

	if (huart == &huart2)
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <HAL_UART_RxCpltCallback+0x48>)
 80010b6:	4283      	cmp	r3, r0
 80010b8:	d000      	beq.n	80010bc <HAL_UART_RxCpltCallback+0x8>
 80010ba:	4770      	bx	lr
	{
		char received = rxRecieve[0];
 80010bc:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <HAL_UART_RxCpltCallback+0x4c>)

		link.readUART(&link, received);
 80010be:	4811      	ldr	r0, [pc, #68]	@ (8001104 <HAL_UART_RxCpltCallback+0x50>)
{
 80010c0:	b510      	push	{r4, lr}
		char received = rxRecieve[0];
 80010c2:	781c      	ldrb	r4, [r3, #0]
		link.readUART(&link, received);
 80010c4:	f8d0 30e8 	ldr.w	r3, [r0, #232]	@ 0xe8
 80010c8:	4621      	mov	r1, r4
 80010ca:	4798      	blx	r3

		UARTrxBuffer[uartRxIndex++] = received;
 80010cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <HAL_UART_RxCpltCallback+0x54>)
 80010ce:	490f      	ldr	r1, [pc, #60]	@ (800110c <HAL_UART_RxCpltCallback+0x58>)
 80010d0:	7810      	ldrb	r0, [r2, #0]
 80010d2:	1c43      	adds	r3, r0, #1
 80010d4:	540c      	strb	r4, [r1, r0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	7013      	strb	r3, [r2, #0]

		if (uartRxIndex >= UART_BUFFER_SIZE)
 80010da:	061b      	lsls	r3, r3, #24
 80010dc:	d40a      	bmi.n	80010f4 <HAL_UART_RxCpltCallback+0x40>
		{
			uartRxIndex = 0;
		}

		testCounter++;
 80010de:	4c0c      	ldr	r4, [pc, #48]	@ (8001110 <HAL_UART_RxCpltCallback+0x5c>)

		HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	4907      	ldr	r1, [pc, #28]	@ (8001100 <HAL_UART_RxCpltCallback+0x4c>)
		testCounter++;
 80010e4:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <HAL_UART_RxCpltCallback+0x48>)
		testCounter++;
 80010e8:	4413      	add	r3, r2
 80010ea:	6023      	str	r3, [r4, #0]
	}
}
 80010ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 80010f0:	f006 bdd4 	b.w	8007c9c <HAL_UART_Receive_IT>
			uartRxIndex = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	7013      	strb	r3, [r2, #0]
 80010f8:	e7f1      	b.n	80010de <HAL_UART_RxCpltCallback+0x2a>
 80010fa:	bf00      	nop
 80010fc:	2406d178 	.word	0x2406d178
 8001100:	38000080 	.word	0x38000080
 8001104:	38000094 	.word	0x38000094
 8001108:	2406d0b0 	.word	0x2406d0b0
 800110c:	38000000 	.word	0x38000000
 8001110:	38000090 	.word	0x38000090

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b530      	push	{r4, r5, lr}
 8001116:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001118:	224c      	movs	r2, #76	@ 0x4c
 800111a:	2100      	movs	r1, #0
 800111c:	a80a      	add	r0, sp, #40	@ 0x28
 800111e:	f009 fbf7 	bl	800a910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001122:	2220      	movs	r2, #32
 8001124:	2100      	movs	r1, #0
 8001126:	a802      	add	r0, sp, #8
 8001128:	f009 fbf2 	bl	800a910 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800112c:	2002      	movs	r0, #2
 800112e:	f004 f9c5 	bl	80054bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001132:	4a26      	ldr	r2, [pc, #152]	@ (80011cc <SystemClock_Config+0xb8>)
 8001134:	2100      	movs	r1, #0
 8001136:	4b26      	ldr	r3, [pc, #152]	@ (80011d0 <SystemClock_Config+0xbc>)
 8001138:	9101      	str	r1, [sp, #4]
 800113a:	6991      	ldr	r1, [r2, #24]
 800113c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8001140:	6191      	str	r1, [r2, #24]
 8001142:	6991      	ldr	r1, [r2, #24]
 8001144:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 8001148:	9101      	str	r1, [sp, #4]
 800114a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800114c:	f041 0101 	orr.w	r1, r1, #1
 8001150:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8001152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800115c:	6993      	ldr	r3, [r2, #24]
 800115e:	0499      	lsls	r1, r3, #18
 8001160:	d5fc      	bpl.n	800115c <SystemClock_Config+0x48>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001162:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001164:	2200      	movs	r2, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001166:	2003      	movs	r0, #3
 8001168:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116c:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800116e:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001170:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001172:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001174:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001176:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001178:	951a      	str	r5, [sp, #104]	@ 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800117a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLR = 2;
 800117e:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001182:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001184:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001188:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800118a:	e9cd 221b 	strd	r2, r2, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800118e:	2205      	movs	r2, #5
 8001190:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f004 fa28 	bl	80055e8 <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	b108      	cbz	r0, 80011a0 <SystemClock_Config+0x8c>
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119e:	e7fe      	b.n	800119e <SystemClock_Config+0x8a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a0:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011a2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ac:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ae:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011b0:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011b4:	e9cd 5405 	strd	r5, r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011b8:	e9cd 4307 	strd	r4, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011bc:	f004 fd90 	bl	8005ce0 <HAL_RCC_ClockConfig>
 80011c0:	b108      	cbz	r0, 80011c6 <SystemClock_Config+0xb2>
 80011c2:	b672      	cpsid	i
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <SystemClock_Config+0xb0>
}
 80011c6:	b01f      	add	sp, #124	@ 0x7c
 80011c8:	bd30      	pop	{r4, r5, pc}
 80011ca:	bf00      	nop
 80011cc:	58024800 	.word	0x58024800
 80011d0:	58000400 	.word	0x58000400

080011d4 <PeriphCommonClock_Config>:
{
 80011d4:	b500      	push	{lr}
 80011d6:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	22b8      	movs	r2, #184	@ 0xb8
 80011da:	2100      	movs	r1, #0
 80011dc:	a802      	add	r0, sp, #8
 80011de:	f009 fb97 	bl	800a910 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80011e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80011e6:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e8:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80011ea:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ee:	f005 f851 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	b108      	cbz	r0, 80011f8 <PeriphCommonClock_Config+0x24>
 80011f4:	b672      	cpsid	i
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <PeriphCommonClock_Config+0x22>
}
 80011f8:	b031      	add	sp, #196	@ 0xc4
 80011fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80011fe:	bf00      	nop

08001200 <main>:
{
 8001200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001204:	2400      	movs	r4, #0
{
 8001206:	b09b      	sub	sp, #108	@ 0x6c
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001208:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
 800120c:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
  HAL_MPU_Disable();
 8001210:	f002 fa06 	bl	8003620 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001214:	f248 721f 	movw	r2, #34591	@ 0x871f
 8001218:	f240 1301 	movw	r3, #257	@ 0x101
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800121c:	2101      	movs	r1, #1
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800121e:	a811      	add	r0, sp, #68	@ 0x44
  MPU_InitStruct.BaseAddress = 0x0;
 8001220:	9412      	str	r4, [sp, #72]	@ 0x48
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001222:	f8ad 1044 	strh.w	r1, [sp, #68]	@ 0x44
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001226:	e9cd 2313 	strd	r2, r3, [sp, #76]	@ 0x4c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800122a:	f002 fa17 	bl	800365c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800122e:	2004      	movs	r0, #4
 8001230:	f002 fa04 	bl	800363c <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001234:	4ab1      	ldr	r2, [pc, #708]	@ (80014fc <main+0x2fc>)
 8001236:	6953      	ldr	r3, [r2, #20]
 8001238:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800123c:	d111      	bne.n	8001262 <main+0x62>
  __ASM volatile ("dsb 0xF":::"memory");
 800123e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001242:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001246:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800124a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800124e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001252:	6953      	ldr	r3, [r2, #20]
 8001254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001258:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800125a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800125e:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001262:	48a6      	ldr	r0, [pc, #664]	@ (80014fc <main+0x2fc>)
 8001264:	6943      	ldr	r3, [r0, #20]
 8001266:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800126a:	d124      	bne.n	80012b6 <main+0xb6>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800126c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001270:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001274:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001278:	f643 7ce0 	movw	ip, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800127c:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001280:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8001284:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001286:	ea04 010c 	and.w	r1, r4, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800128a:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800128c:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8001290:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001292:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	d1f8      	bne.n	800128c <main+0x8c>
    } while(sets-- != 0U);
 800129a:	3c20      	subs	r4, #32
 800129c:	f114 0f20 	cmn.w	r4, #32
 80012a0:	d1f1      	bne.n	8001286 <main+0x86>
 80012a2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012a6:	6943      	ldr	r3, [r0, #20]
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ac:	6143      	str	r3, [r0, #20]
 80012ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80012b2:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4d92      	ldr	r5, [pc, #584]	@ (8001500 <main+0x300>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	2400      	movs	r4, #0
  HAL_Init();
 80012ba:	f001 f9c7 	bl	800264c <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2601      	movs	r6, #1
  SystemClock_Config();
 80012c0:	f7ff ff28 	bl	8001114 <SystemClock_Config>
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012c4:	f44f 679c 	mov.w	r7, #1248	@ 0x4e0
  PeriphCommonClock_Config();
 80012c8:	f7ff ff84 	bl	80011d4 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012ce:	4622      	mov	r2, r4
 80012d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012d4:	488b      	ldr	r0, [pc, #556]	@ (8001504 <main+0x304>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
 80012da:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80012ea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	9307      	str	r3, [sp, #28]
 80012f4:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8001302:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	9308      	str	r3, [sp, #32]
 800130c:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001316:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800131a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800131e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001322:	9309      	str	r3, [sp, #36]	@ 0x24
 8001324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8001332:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	930a      	str	r3, [sp, #40]	@ 0x28
 800133c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800133e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001346:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800134a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800134e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001352:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001356:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8001362:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	930c      	str	r3, [sp, #48]	@ 0x30
 800136c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800137a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	930d      	str	r3, [sp, #52]	@ 0x34
 8001384:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001386:	f004 f895 	bl	80054b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 800138a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800138e:	a911      	add	r1, sp, #68	@ 0x44
 8001390:	485c      	ldr	r0, [pc, #368]	@ (8001504 <main+0x304>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pin = LED_Pin;
 8001394:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	9414      	str	r4, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800139a:	f003 fe7f 	bl	800509c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139e:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013a2:	4622      	mov	r2, r4
 80013a4:	4621      	mov	r1, r4
 80013a6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a8:	4333      	orrs	r3, r6
 80013aa:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 80013ae:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc1.Instance = ADC1;
 80013b2:	4d55      	ldr	r5, [pc, #340]	@ (8001508 <main+0x308>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b4:	4033      	ands	r3, r6
 80013b6:	9306      	str	r3, [sp, #24]
 80013b8:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013ba:	f002 f8d1 	bl	8003560 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013be:	200b      	movs	r0, #11
 80013c0:	f002 f90a 	bl	80035d8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013c4:	4622      	mov	r2, r4
 80013c6:	4621      	mov	r1, r4
 80013c8:	200c      	movs	r0, #12
 80013ca:	f002 f8c9 	bl	8003560 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013ce:	200c      	movs	r0, #12
 80013d0:	f002 f902 	bl	80035d8 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 80013d4:	4b4d      	ldr	r3, [pc, #308]	@ (800150c <main+0x30c>)
  ADC_MultiModeTypeDef multimode = {0};
 80013d6:	940e      	str	r4, [sp, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013d8:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 80013da:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80013dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  ADC_ChannelConfTypeDef sConfig = {0};
 80013e0:	9417      	str	r4, [sp, #92]	@ 0x5c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80013e2:	606b      	str	r3, [r5, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013e8:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ea:	772c      	strb	r4, [r5, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 80013ec:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.NbrOfConversion = 1;
 80013f0:	61ae      	str	r6, [r5, #24]
  hadc1.Init.Oversampling.Ratio = 1;
 80013f2:	63ee      	str	r6, [r5, #60]	@ 0x3c
  ADC_ChannelConfTypeDef sConfig = {0};
 80013f4:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
 80013f8:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
 80013fc:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001400:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001404:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  ADC_MultiModeTypeDef multimode = {0};
 8001408:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800140c:	e9c5 7309 	strd	r7, r3, [r5, #36]	@ 0x24
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001410:	2408      	movs	r4, #8
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001412:	2703      	movs	r7, #3
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001414:	612c      	str	r4, [r5, #16]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001416:	62ef      	str	r7, [r5, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001418:	f001 fec6 	bl	80031a8 <HAL_ADC_Init>
 800141c:	b108      	cbz	r0, 8001422 <main+0x222>
  __ASM volatile ("cpsid i" : : : "memory");
 800141e:	b672      	cpsid	i
  while (1)
 8001420:	e7fe      	b.n	8001420 <main+0x220>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001422:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001424:	a90e      	add	r1, sp, #56	@ 0x38
 8001426:	4628      	mov	r0, r5
 8001428:	f002 f826 	bl	8003478 <HAL_ADCEx_MultiModeConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	b108      	cbz	r0, 8001434 <main+0x234>
 8001430:	b672      	cpsid	i
  while (1)
 8001432:	e7fe      	b.n	8001432 <main+0x232>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001434:	4936      	ldr	r1, [pc, #216]	@ (8001510 <main+0x310>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	4628      	mov	r0, r5
  sConfig.Offset = 0;
 8001438:	9316      	str	r3, [sp, #88]	@ 0x58
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800143a:	2505      	movs	r5, #5
  sConfig.OffsetSignedSaturation = DISABLE;
 800143c:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001440:	2306      	movs	r3, #6
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001442:	f04f 0804 	mov.w	r8, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001446:	e9cd 1311 	strd	r1, r3, [sp, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800144a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144e:	a911      	add	r1, sp, #68	@ 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001450:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001454:	e9cd 5313 	strd	r5, r3, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001458:	f001 faca 	bl	80029f0 <HAL_ADC_ConfigChannel>
 800145c:	b108      	cbz	r0, 8001462 <main+0x262>
 800145e:	b672      	cpsid	i
  while (1)
 8001460:	e7fe      	b.n	8001460 <main+0x260>
  htim8.Instance = TIM8;
 8001462:	4d2c      	ldr	r5, [pc, #176]	@ (8001514 <main+0x314>)
  htim8.Init.Prescaler = 50-1;
 8001464:	2331      	movs	r3, #49	@ 0x31
 8001466:	4a2c      	ldr	r2, [pc, #176]	@ (8001518 <main+0x318>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	9010      	str	r0, [sp, #64]	@ 0x40
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	60a8      	str	r0, [r5, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	61a8      	str	r0, [r5, #24]
  htim8.Init.Prescaler = 50-1;
 800146e:	e9c5 2300 	strd	r2, r3, [r5]
  htim8.Init.Period = 100-1;
 8001472:	2363      	movs	r3, #99	@ 0x63
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001474:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
 8001478:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  htim8.Init.RepetitionCounter = 0;
 8001480:	e9c5 0004 	strd	r0, r0, [r5, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001484:	4628      	mov	r0, r5
  htim8.Init.Period = 100-1;
 8001486:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001488:	f006 f9f2 	bl	8007870 <HAL_TIM_Base_Init>
 800148c:	b108      	cbz	r0, 8001492 <main+0x292>
 800148e:	b672      	cpsid	i
  while (1)
 8001490:	e7fe      	b.n	8001490 <main+0x290>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001492:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001496:	a911      	add	r1, sp, #68	@ 0x44
 8001498:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149a:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800149e:	f006 fadb 	bl	8007a58 <HAL_TIM_ConfigClockSource>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b108      	cbz	r0, 80014aa <main+0x2aa>
 80014a6:	b672      	cpsid	i
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <main+0x2a8>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ae:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014b0:	a90e      	add	r1, sp, #56	@ 0x38
 80014b2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014b4:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014b6:	f006 fb97 	bl	8007be8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4601      	mov	r1, r0
 80014bc:	b108      	cbz	r0, 80014c2 <main+0x2c2>
 80014be:	b672      	cpsid	i
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <main+0x2c0>
  DAC_ChannelConfTypeDef sConfig = {0};
 80014c2:	2224      	movs	r2, #36	@ 0x24
  hdac1.Instance = DAC1;
 80014c4:	4d15      	ldr	r5, [pc, #84]	@ (800151c <main+0x31c>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80014c6:	a811      	add	r0, sp, #68	@ 0x44
 80014c8:	f009 fa22 	bl	800a910 <memset>
  hdac1.Instance = DAC1;
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <main+0x320>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014ce:	4628      	mov	r0, r5
  hdac1.Instance = DAC1;
 80014d0:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014d2:	f002 f8f3 	bl	80036bc <HAL_DAC_Init>
 80014d6:	4602      	mov	r2, r0
 80014d8:	b108      	cbz	r0, 80014de <main+0x2de>
 80014da:	b672      	cpsid	i
  while (1)
 80014dc:	e7fe      	b.n	80014dc <main+0x2dc>
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80014de:	231e      	movs	r3, #30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014e0:	4628      	mov	r0, r5
 80014e2:	a911      	add	r1, sp, #68	@ 0x44
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014e4:	9211      	str	r2, [sp, #68]	@ 0x44
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80014e6:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014e8:	9215      	str	r2, [sp, #84]	@ 0x54
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014ea:	e9cd 2613 	strd	r2, r6, [sp, #76]	@ 0x4c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014ee:	f002 f9c9 	bl	8003884 <HAL_DAC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b1b0      	cbz	r0, 8001524 <main+0x324>
 80014f6:	b672      	cpsid	i
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <main+0x2f8>
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	58024400 	.word	0x58024400
 8001504:	58020800 	.word	0x58020800
 8001508:	2406d3f0 	.word	0x2406d3f0
 800150c:	40022000 	.word	0x40022000
 8001510:	43210000 	.word	0x43210000
 8001514:	2406d2a0 	.word	0x2406d2a0
 8001518:	40010400 	.word	0x40010400
 800151c:	2406d364 	.word	0x2406d364
 8001520:	40007400 	.word	0x40007400
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001524:	483c      	ldr	r0, [pc, #240]	@ (8001618 <main+0x418>)
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001526:	2210      	movs	r2, #16
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001528:	a911      	add	r1, sp, #68	@ 0x44
  SdramTiming.SelfRefreshTime = 4;
 800152a:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800152e:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001530:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001532:	2240      	movs	r2, #64	@ 0x40
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8001534:	60c4      	str	r4, [r0, #12]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8001536:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800153a:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800153c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  SdramTiming.WriteRecoveryTime = 3;
 8001540:	9715      	str	r7, [sp, #84]	@ 0x54
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8001542:	6284      	str	r4, [r0, #40]	@ 0x28
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001544:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001548:	6182      	str	r2, [r0, #24]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800154a:	e9c0 3601 	strd	r3, r6, [r0, #4]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800154e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001552:	6203      	str	r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
 8001554:	2302      	movs	r3, #2
 8001556:	9311      	str	r3, [sp, #68]	@ 0x44
  SdramTiming.RCDDelay = 2;
 8001558:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  SdramTiming.ExitSelfRefreshDelay = 7;
 800155c:	2307      	movs	r3, #7
 800155e:	9312      	str	r3, [sp, #72]	@ 0x48
  SdramTiming.RowCycleDelay = 7;
 8001560:	9314      	str	r3, [sp, #80]	@ 0x50
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001562:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <main+0x41c>)
 8001564:	6003      	str	r3, [r0, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001566:	f006 f959 	bl	800781c <HAL_SDRAM_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	b108      	cbz	r0, 8001572 <main+0x372>
 800156e:	b672      	cpsid	i
  while (1)
 8001570:	e7fe      	b.n	8001570 <main+0x370>
  huart1.Instance = USART1;
 8001572:	482b      	ldr	r0, [pc, #172]	@ (8001620 <main+0x420>)
  huart1.Init.BaudRate = 115200;
 8001574:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart1.Instance = USART1;
 8001578:	4c2a      	ldr	r4, [pc, #168]	@ (8001624 <main+0x424>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 800157a:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 800157c:	6004      	str	r4, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800157e:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001582:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158e:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001592:	f007 fc27 	bl	8008de4 <HAL_UART_Init>
 8001596:	b108      	cbz	r0, 800159c <main+0x39c>
 8001598:	b672      	cpsid	i
  while (1)
 800159a:	e7fe      	b.n	800159a <main+0x39a>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159c:	2100      	movs	r1, #0
 800159e:	4820      	ldr	r0, [pc, #128]	@ (8001620 <main+0x420>)
 80015a0:	f007 fc78 	bl	8008e94 <HAL_UARTEx_SetTxFifoThreshold>
 80015a4:	4601      	mov	r1, r0
 80015a6:	b108      	cbz	r0, 80015ac <main+0x3ac>
 80015a8:	b672      	cpsid	i
  while (1)
 80015aa:	e7fe      	b.n	80015aa <main+0x3aa>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ac:	481c      	ldr	r0, [pc, #112]	@ (8001620 <main+0x420>)
 80015ae:	f007 fcb3 	bl	8008f18 <HAL_UARTEx_SetRxFifoThreshold>
 80015b2:	b108      	cbz	r0, 80015b8 <main+0x3b8>
 80015b4:	b672      	cpsid	i
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <main+0x3b6>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015b8:	4819      	ldr	r0, [pc, #100]	@ (8001620 <main+0x420>)
 80015ba:	f007 fc4d 	bl	8008e58 <HAL_UARTEx_DisableFifoMode>
 80015be:	4603      	mov	r3, r0
 80015c0:	b108      	cbz	r0, 80015c6 <main+0x3c6>
 80015c2:	b672      	cpsid	i
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <main+0x3c4>
  huart2.Instance = USART2;
 80015c6:	4c18      	ldr	r4, [pc, #96]	@ (8001628 <main+0x428>)
  huart2.Init.BaudRate = 115200;
 80015c8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart2.Instance = USART2;
 80015cc:	4817      	ldr	r0, [pc, #92]	@ (800162c <main+0x42c>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ce:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 80015d0:	e884 000b 	stmia.w	r4, {r0, r1, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d4:	4620      	mov	r0, r4
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d6:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015de:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e2:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e6:	f007 fbfd 	bl	8008de4 <HAL_UART_Init>
 80015ea:	4601      	mov	r1, r0
 80015ec:	b108      	cbz	r0, 80015f2 <main+0x3f2>
 80015ee:	b672      	cpsid	i
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <main+0x3f0>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f2:	4620      	mov	r0, r4
 80015f4:	f007 fc4e 	bl	8008e94 <HAL_UARTEx_SetTxFifoThreshold>
 80015f8:	4601      	mov	r1, r0
 80015fa:	b108      	cbz	r0, 8001600 <main+0x400>
 80015fc:	b672      	cpsid	i
  while (1)
 80015fe:	e7fe      	b.n	80015fe <main+0x3fe>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001600:	4620      	mov	r0, r4
 8001602:	f007 fc89 	bl	8008f18 <HAL_UARTEx_SetRxFifoThreshold>
 8001606:	b108      	cbz	r0, 800160c <main+0x40c>
 8001608:	b672      	cpsid	i
  while (1)
 800160a:	e7fe      	b.n	800160a <main+0x40a>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800160c:	4620      	mov	r0, r4
 800160e:	f007 fc23 	bl	8008e58 <HAL_UARTEx_DisableFifoMode>
 8001612:	b168      	cbz	r0, 8001630 <main+0x430>
 8001614:	b672      	cpsid	i
  while (1)
 8001616:	e7fe      	b.n	8001616 <main+0x416>
 8001618:	2406d144 	.word	0x2406d144
 800161c:	52004140 	.word	0x52004140
 8001620:	2406d20c 	.word	0x2406d20c
 8001624:	40011000 	.word	0x40011000
 8001628:	2406d178 	.word	0x2406d178
 800162c:	40004400 	.word	0x40004400
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001630:	4b93      	ldr	r3, [pc, #588]	@ (8001880 <main+0x680>)
 8001632:	695a      	ldr	r2, [r3, #20]
 8001634:	f412 3280 	ands.w	r2, r2, #65536	@ 0x10000
 8001638:	d123      	bne.n	8001682 <main+0x482>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800163a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800163e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001642:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001646:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800164a:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800164e:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8001652:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001654:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001658:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800165a:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
      } while (ways-- != 0U);
 800165e:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001660:	f8c3 6260 	str.w	r6, [r3, #608]	@ 0x260
      } while (ways-- != 0U);
 8001664:	d2f9      	bcs.n	800165a <main+0x45a>
    } while(sets-- != 0U);
 8001666:	3a20      	subs	r2, #32
 8001668:	f112 0f20 	cmn.w	r2, #32
 800166c:	d1f2      	bne.n	8001654 <main+0x454>
 800166e:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001678:	615a      	str	r2, [r3, #20]
 800167a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800167e:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001682:	4b7f      	ldr	r3, [pc, #508]	@ (8001880 <main+0x680>)
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800168a:	d111      	bne.n	80016b0 <main+0x4b0>
  __ASM volatile ("dsb 0xF":::"memory");
 800168c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001690:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001694:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001698:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800169c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80016a6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80016a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016ac:	f3bf 8f6f 	isb	sy
  dctm_pool_init();
 80016b0:	f7ff fb52 	bl	8000d58 <dctm_pool_init>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 80016b4:	2400      	movs	r4, #0
  static_pool_init();
 80016b6:	f7ff fb5b 	bl	8000d70 <static_pool_init>
  initDataLink(&link);
 80016ba:	4872      	ldr	r0, [pc, #456]	@ (8001884 <main+0x684>)
 80016bc:	f7ff fc7e 	bl	8000fbc <initDataLink>
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 80016c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016c4:	4870      	ldr	r0, [pc, #448]	@ (8001888 <main+0x688>)
  for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 80016c6:	4626      	mov	r6, r4
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 80016c8:	f007 fd2a 	bl	8009120 <arm_rfft_fast_init_f32>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80016cc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80016d0:	2100      	movs	r1, #0
 80016d2:	486e      	ldr	r0, [pc, #440]	@ (800188c <main+0x68c>)
 80016d4:	f001 fe74 	bl	80033c0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcInput, BUFFER_SIZE*2);
 80016d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016dc:	496c      	ldr	r1, [pc, #432]	@ (8001890 <main+0x690>)
 80016de:	486b      	ldr	r0, [pc, #428]	@ (800188c <main+0x68c>)
 80016e0:	f001 fbee 	bl	8002ec0 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 80016e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001894 <main+0x694>)
 80016ea:	4621      	mov	r1, r4
 80016ec:	486a      	ldr	r0, [pc, #424]	@ (8001898 <main+0x698>)
 80016ee:	9400      	str	r4, [sp, #0]
 80016f0:	f001 fffa 	bl	80036e8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 80016f4:	4869      	ldr	r0, [pc, #420]	@ (800189c <main+0x69c>)
 80016f6:	f006 f961 	bl	80079bc <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 80016fa:	2201      	movs	r2, #1
 80016fc:	4968      	ldr	r1, [pc, #416]	@ (80018a0 <main+0x6a0>)
 80016fe:	4869      	ldr	r0, [pc, #420]	@ (80018a4 <main+0x6a4>)
  nodes[0] = &fx_handle_0;
 8001700:	4d69      	ldr	r5, [pc, #420]	@ (80018a8 <main+0x6a8>)
  HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 8001702:	f006 facb 	bl	8007c9c <HAL_UART_Receive_IT>
  nodes[0] = &fx_handle_0;
 8001706:	4969      	ldr	r1, [pc, #420]	@ (80018ac <main+0x6ac>)
  nodes[1] = &fx_handle_1;
 8001708:	4a69      	ldr	r2, [pc, #420]	@ (80018b0 <main+0x6b0>)
  nodes[2]->type = FX_REVERB;
 800170a:	462f      	mov	r7, r5
  nodes[2] = &fx_handle_2;
 800170c:	4b69      	ldr	r3, [pc, #420]	@ (80018b4 <main+0x6b4>)
 800170e:	f8df a1b8 	ldr.w	sl, [pc, #440]	@ 80018c8 <main+0x6c8>
 8001712:	60ab      	str	r3, [r5, #8]
  nodes[1] = &fx_handle_1;
 8001714:	e9c5 1200 	strd	r1, r2, [r5]
  srand(HAL_GetTick());  // seed the PRNG
 8001718:	f000 ffd4 	bl	80026c4 <HAL_GetTick>
 800171c:	f008 fece 	bl	800a4bc <srand>
  pipeInit(&apipe);
 8001720:	4865      	ldr	r0, [pc, #404]	@ (80018b8 <main+0x6b8>)
 8001722:	f000 fbdf 	bl	8001ee4 <pipeInit>
  nodes[0]->type = FX_SUPRO;
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	2102      	movs	r1, #2
  nodes[1]->type = FX_CABINET;
 800172a:	2201      	movs	r2, #1
  nodes[0]->type = FX_SUPRO;
 800172c:	7019      	strb	r1, [r3, #0]
  nodes[1]->type = FX_CABINET;
 800172e:	686b      	ldr	r3, [r5, #4]
 8001730:	701a      	strb	r2, [r3, #0]
  nodes[2]->type = FX_REVERB;
 8001732:	68ab      	ldr	r3, [r5, #8]
 8001734:	701c      	strb	r4, [r3, #0]
		 fx_init[nodes[i]->type](nodes[i]);
 8001736:	f857 0b04 	ldr.w	r0, [r7], #4
  for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 800173a:	3601      	adds	r6, #1
		 fx_init[nodes[i]->type](nodes[i]);
 800173c:	7803      	ldrb	r3, [r0, #0]
 800173e:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8001742:	4798      	blx	r3
  for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 8001744:	2e03      	cmp	r6, #3
 8001746:	d1f6      	bne.n	8001736 <main+0x536>
 8001748:	4e5c      	ldr	r6, [pc, #368]	@ (80018bc <main+0x6bc>)
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800174a:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 80018cc <main+0x6cc>
 800174e:	f5a6 4b30 	sub.w	fp, r6, #45056	@ 0xb000
		 apipe.updateDelayBuffer(&apipe);
 8001752:	f5a6 4770 	sub.w	r7, r6, #61440	@ 0xf000
	     arm_scale_f32(apipe.processBuffer, 0.01, apipe.processBuffer, BUFFER_SIZE);
 8001756:	f10b 0808 	add.w	r8, fp, #8
	  if (apipe.bufferReady)
 800175a:	7c33      	ldrb	r3, [r6, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 808c 	beq.w	800187a <main+0x67a>
		 apipe.updateDelayBuffer(&apipe);
 8001762:	69f3      	ldr	r3, [r6, #28]
 8001764:	4638      	mov	r0, r7
 8001766:	4798      	blx	r3
		 apipe.loadProcess(&apipe);
 8001768:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800176a:	4638      	mov	r0, r7
		 for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 800176c:	2400      	movs	r4, #0
		 apipe.loadProcess(&apipe);
 800176e:	4798      	blx	r3
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	2108      	movs	r1, #8
 8001774:	4648      	mov	r0, r9
 8001776:	f003 fe9d 	bl	80054b4 <HAL_GPIO_WritePin>
 800177a:	462b      	mov	r3, r5
				nodes[i]->process(nodes[i], &apipe);
 800177c:	f853 0b04 	ldr.w	r0, [r3], #4
		 for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 8001780:	3401      	adds	r4, #1
				nodes[i]->process(nodes[i], &apipe);
 8001782:	4639      	mov	r1, r7
 8001784:	6842      	ldr	r2, [r0, #4]
 8001786:	9303      	str	r3, [sp, #12]
 8001788:	4790      	blx	r2
		 for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 800178a:	2c03      	cmp	r4, #3
 800178c:	9b03      	ldr	r3, [sp, #12]
 800178e:	d1f5      	bne.n	800177c <main+0x57c>
	     arm_scale_f32(apipe.processBuffer, 0.01, apipe.processBuffer, BUFFER_SIZE);
 8001790:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 80018c0 <main+0x6c0>
 8001794:	4641      	mov	r1, r8
		 apipe.updateDACOutput(&apipe, dacOutput);
 8001796:	4c3f      	ldr	r4, [pc, #252]	@ (8001894 <main+0x694>)
	     arm_scale_f32(apipe.processBuffer, 0.01, apipe.processBuffer, BUFFER_SIZE);
 8001798:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800179c:	4849      	ldr	r0, [pc, #292]	@ (80018c4 <main+0x6c4>)
 800179e:	f008 fab1 	bl	8009d04 <arm_scale_f32>
		 arm_copy_f32(apipe.processBuffer, apipe.outBuffer, BUFFER_SIZE);
 80017a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017a6:	f8db 1004 	ldr.w	r1, [fp, #4]
 80017aa:	4640      	mov	r0, r8
 80017ac:	f007 fc88 	bl	80090c0 <arm_copy_f32>
		 apipe.updateDACOutput(&apipe, dacOutput);
 80017b0:	6a33      	ldr	r3, [r6, #32]
 80017b2:	4638      	mov	r0, r7
 80017b4:	4621      	mov	r1, r4
 80017b6:	4798      	blx	r3
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80017b8:	f004 021f 	and.w	r2, r4, #31
 80017bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
  __ASM volatile ("dsb 0xF":::"memory");
 80017c0:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80017c4:	492e      	ldr	r1, [pc, #184]	@ (8001880 <main+0x680>)
 80017c6:	3a20      	subs	r2, #32
 80017c8:	f8c1 4268 	str.w	r4, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80017cc:	3420      	adds	r4, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	dcf9      	bgt.n	80017c6 <main+0x5c6>
 80017d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017d6:	f3bf 8f6f 	isb	sy
		 apipe.bufferReady = false;
 80017da:	2400      	movs	r4, #0
		 volatile GPIO_PinState trig = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 80017dc:	2108      	movs	r1, #8
 80017de:	4648      	mov	r0, r9
		 apipe.bufferReady = false;
 80017e0:	7434      	strb	r4, [r6, #16]
		 volatile GPIO_PinState trig = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 80017e2:	f003 fe61 	bl	80054a8 <HAL_GPIO_ReadPin>
 80017e6:	f88d 0013 	strb.w	r0, [sp, #19]
		 if (trig == GPIO_PIN_SET) {
 80017ea:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d1b3      	bne.n	800175a <main+0x55a>
 80017f2:	462b      	mov	r3, r5
    	    	  nodes[i]->clean(nodes[i]);
 80017f4:	f853 0b04 	ldr.w	r0, [r3], #4
    	    for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 80017f8:	3401      	adds	r4, #1
    	    	  nodes[i]->clean(nodes[i]);
 80017fa:	6882      	ldr	r2, [r0, #8]
 80017fc:	9303      	str	r3, [sp, #12]
 80017fe:	4790      	blx	r2
    	    for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 8001800:	2c03      	cmp	r4, #3
 8001802:	9b03      	ldr	r3, [sp, #12]
 8001804:	d1f6      	bne.n	80017f4 <main+0x5f4>
		     dctm_pool_init();
 8001806:	f7ff faa7 	bl	8000d58 <dctm_pool_init>
		     static_pool_init();
 800180a:	f7ff fab1 	bl	8000d70 <static_pool_init>
		     memset(apipe.processBuffer, 0,  BUFFER_SIZE *sizeof(apipe.processBuffer[0]));
 800180e:	2100      	movs	r1, #0
 8001810:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001814:	4640      	mov	r0, r8
 8001816:	f009 f87b 	bl	800a910 <memset>
			 volatile uint32_t idx1 = rand() % 3;
 800181a:	f008 fe7d 	bl	800a518 <rand>
 800181e:	fb90 f2f4 	sdiv	r2, r0, r4
 8001822:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001826:	1a83      	subs	r3, r0, r2
 8001828:	9305      	str	r3, [sp, #20]
			 volatile uint32_t idx2 = rand() % 3;
 800182a:	f008 fe75 	bl	800a518 <rand>
 800182e:	fb90 f2f4 	sdiv	r2, r0, r4
 8001832:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001836:	1a83      	subs	r3, r0, r2
 8001838:	930e      	str	r3, [sp, #56]	@ 0x38
			 volatile uint32_t idx3 = rand() % 3;
 800183a:	f008 fe6d 	bl	800a518 <rand>
		     nodes[idx1]->type = FX_SUPRO;
 800183e:	2202      	movs	r2, #2
			 volatile uint32_t idx3 = rand() % 3;
 8001840:	fb90 f4f4 	sdiv	r4, r0, r4
 8001844:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001848:	1b03      	subs	r3, r0, r4
		    for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 800184a:	2400      	movs	r4, #0
			 volatile uint32_t idx3 = rand() % 3;
 800184c:	9311      	str	r3, [sp, #68]	@ 0x44
		     nodes[idx1]->type = FX_SUPRO;
 800184e:	9b05      	ldr	r3, [sp, #20]
 8001850:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001854:	701a      	strb	r2, [r3, #0]
		     nodes[idx2]->type = FX_CABINET;
 8001856:	2201      	movs	r2, #1
 8001858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800185a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	462b      	mov	r3, r5
		   		 fx_init[nodes[i]->type](nodes[i]);
 8001862:	f853 0b04 	ldr.w	r0, [r3], #4
		    for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 8001866:	3401      	adds	r4, #1
		   		 fx_init[nodes[i]->type](nodes[i]);
 8001868:	7802      	ldrb	r2, [r0, #0]
 800186a:	9303      	str	r3, [sp, #12]
 800186c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8001870:	4790      	blx	r2
		    for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 8001872:	2c03      	cmp	r4, #3
 8001874:	9b03      	ldr	r3, [sp, #12]
 8001876:	d1f4      	bne.n	8001862 <main+0x662>
 8001878:	e76f      	b.n	800175a <main+0x55a>
	      __WFI();
 800187a:	bf30      	wfi
 800187c:	e76d      	b.n	800175a <main+0x55a>
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00
 8001884:	38000094 	.word	0x38000094
 8001888:	2406d098 	.word	0x2406d098
 800188c:	2406d3f0 	.word	0x2406d3f0
 8001890:	2406c098 	.word	0x2406c098
 8001894:	2406b098 	.word	0x2406b098
 8001898:	2406d364 	.word	0x2406d364
 800189c:	2406d2a0 	.word	0x2406d2a0
 80018a0:	38000080 	.word	0x38000080
 80018a4:	2406d178 	.word	0x2406d178
 80018a8:	2406d0b4 	.word	0x2406d0b4
 80018ac:	2406d118 	.word	0x2406d118
 80018b0:	2406d0ec 	.word	0x2406d0ec
 80018b4:	2406d0c0 	.word	0x2406d0c0
 80018b8:	38000180 	.word	0x38000180
 80018bc:	3800f180 	.word	0x3800f180
 80018c0:	3c23d70a 	.word	0x3c23d70a
 80018c4:	38004188 	.word	0x38004188
 80018c8:	24000000 	.word	0x24000000
 80018cc:	58020800 	.word	0x58020800

080018d0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <Error_Handler+0x2>

080018d4 <partitioned_fir_convolution_fft>:
__attribute__((section(".dtcm"), aligned(32))) float zeropad[FFT_SIZE];
float fftOut[FFT_SIZE];


void partitioned_fir_convolution_fft(pipe *pipe, fir_t *fir, float* overlap_state_buf )
{
 80018d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	float *zeropaddedinput = zeropad;
	float *overlap         = overlap_state_buf;

    // prepare input
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80018d8:	f244 0408 	movw	r4, #16392	@ 0x4008
{
 80018dc:	b08b      	sub	sp, #44	@ 0x2c
 80018de:	4613      	mov	r3, r2
 80018e0:	460d      	mov	r5, r1
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80018e2:	4404      	add	r4, r0
 80018e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018e8:	4933      	ldr	r1, [pc, #204]	@ (80019b8 <partitioned_fir_convolution_fft+0xe4>)
 80018ea:	4620      	mov	r0, r4
{
 80018ec:	9307      	str	r3, [sp, #28]
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80018ee:	f007 fbe7 	bl	80090c0 <arm_copy_f32>
    arm_fill_f32(0.0f, &zeropaddedinput[BUFFER_SIZE], BUFFER_SIZE);
 80018f2:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80019bc <partitioned_fir_convolution_fft+0xe8>
 80018f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018fa:	4831      	ldr	r0, [pc, #196]	@ (80019c0 <partitioned_fir_convolution_fft+0xec>)
 80018fc:	f007 fbc2 	bl	8009084 <arm_fill_f32>

    // forward FFT
    arm_rfft_fast_f32(&fft, zeropaddedinput, fftOut, 0);
 8001900:	2300      	movs	r3, #0
 8001902:	4a30      	ldr	r2, [pc, #192]	@ (80019c4 <partitioned_fir_convolution_fft+0xf0>)
 8001904:	492c      	ldr	r1, [pc, #176]	@ (80019b8 <partitioned_fir_convolution_fft+0xe4>)
 8001906:	4830      	ldr	r0, [pc, #192]	@ (80019c8 <partitioned_fir_convolution_fft+0xf4>)
 8001908:	f007 fcbc 	bl	8009284 <arm_rfft_fast_f32>

    // save index and spectrum
    fir->prev_fftidx = fir->curr_fftidx;
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 800190c:	482d      	ldr	r0, [pc, #180]	@ (80019c4 <partitioned_fir_convolution_fft+0xf0>)
 800190e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8001912:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001916:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    fir->prev_fftidx = fir->curr_fftidx;
 800191a:	60eb      	str	r3, [r5, #12]
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 800191c:	f007 fbd0 	bl	80090c0 <arm_copy_f32>

    arm_fill_f32(0.0f, fftOut, FFT_SIZE);              /* clear accumulator */
 8001920:	4828      	ldr	r0, [pc, #160]	@ (80019c4 <partitioned_fir_convolution_fft+0xf0>)
 8001922:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001926:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80019bc <partitioned_fir_convolution_fft+0xe8>
 800192a:	f007 fbab 	bl	8009084 <arm_fill_f32>

    const uint32_t segs = fir->numSegments;
 800192e:	692b      	ldr	r3, [r5, #16]
 8001930:	f8df e090 	ldr.w	lr, [pc, #144]	@ 80019c4 <partitioned_fir_convolution_fft+0xf0>
    uint32_t i = 0;
 8001934:	f04f 0c00 	mov.w	ip, #0
    const uint32_t segs = fir->numSegments;
 8001938:	9303      	str	r3, [sp, #12]
    uint32_t idx = fir->prev_fftidx;

    // partitioned convolution with pointer arithmetic
    do {
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 800193a:	686b      	ldr	r3, [r5, #4]
 800193c:	f50e 50ff 	add.w	r0, lr, #8160	@ 0x1fe0
		}
		if (idx-- == 0) {
			idx = segs - 1;
		}

    } while (idx != fir->curr_fftidx);
 8001940:	68aa      	ldr	r2, [r5, #8]
 8001942:	f50e 5700 	add.w	r7, lr, #8192	@ 0x2000
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8001946:	9305      	str	r3, [sp, #20]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8001948:	682b      	ldr	r3, [r5, #0]
    } while (idx != fir->curr_fftidx);
 800194a:	9204      	str	r2, [sp, #16]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 800194c:	9306      	str	r3, [sp, #24]
 800194e:	f50e 5380 	add.w	r3, lr, #4096	@ 0x1000
    uint32_t idx = fir->prev_fftidx;
 8001952:	68ee      	ldr	r6, [r5, #12]
                     float accR = __builtin_fmaf(xr, hr,
 8001954:	f603 72f8 	addw	r2, r3, #4088	@ 0xff8
 8001958:	f603 7be8 	addw	fp, r3, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 800195c:	f603 7aec 	addw	sl, r3, #4076	@ 0xfec
                     float accR = __builtin_fmaf(xr, hr,
 8001960:	f503 697f 	add.w	r9, r3, #4080	@ 0xff0
                     float accI = __builtin_fmaf(xr, hi,
 8001964:	f603 78f4 	addw	r8, r3, #4084	@ 0xff4
 8001968:	f603 73fc 	addw	r3, r3, #4092	@ 0xffc
                     float accR = __builtin_fmaf(xr, hr,
 800196c:	9201      	str	r2, [sp, #4]
                     float accI = __builtin_fmaf(xr, hi,
 800196e:	9302      	str	r3, [sp, #8]
 8001970:	e9cd 4508 	strd	r4, r5, [sp, #32]
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8001974:	9b05      	ldr	r3, [sp, #20]
                 yPtr[0] += xPtr[0] * hPtr[0];
 8001976:	ed9e 7a00 	vldr	s14, [lr]
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 800197a:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 800197e:	9b06      	ldr	r3, [sp, #24]
                 yPtr[1] += xPtr[1] * hPtr[1];
 8001980:	edde 7a01 	vldr	s15, [lr, #4]
 8001984:	f105 0158 	add.w	r1, r5, #88	@ 0x58
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8001988:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
                 yPtr[0] += xPtr[0] * hPtr[0];
 800198c:	ed95 5a00 	vldr	s10, [r5]
 8001990:	edd4 5a00 	vldr	s11, [r4]
 8001994:	f104 0258 	add.w	r2, r4, #88	@ 0x58
                 yPtr[1] += xPtr[1] * hPtr[1];
 8001998:	ed95 6a01 	vldr	s12, [r5, #4]
 800199c:	edd4 6a01 	vldr	s13, [r4, #4]
                 yPtr[0] += xPtr[0] * hPtr[0];
 80019a0:	eea5 7a25 	vfma.f32	s14, s10, s11
                 yPtr[1] += xPtr[1] * hPtr[1];
 80019a4:	eee6 7a26 	vfma.f32	s15, s12, s13
                 yPtr[0] += xPtr[0] * hPtr[0];
 80019a8:	ed8e 7a00 	vstr	s14, [lr]
                 yPtr[1] += xPtr[1] * hPtr[1];
 80019ac:	edce 7a01 	vstr	s15, [lr, #4]
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80019b0:	f8df e010 	ldr.w	lr, [pc, #16]	@ 80019c4 <partitioned_fir_convolution_fft+0xf0>
 80019b4:	4673      	mov	r3, lr
 80019b6:	e009      	b.n	80019cc <partitioned_fir_convolution_fft+0xf8>
 80019b8:	2000f020 	.word	0x2000f020
 80019bc:	00000000 	.word	0x00000000
 80019c0:	20010020 	.word	0x20010020
 80019c4:	2406d454 	.word	0x2406d454
 80019c8:	2406d098 	.word	0x2406d098
                         float xr = *xPtr++; float xi = *xPtr++;
 80019cc:	ed51 7a13 	vldr	s15, [r1, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80019d0:	3350      	adds	r3, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 80019d2:	ed52 2a14 	vldr	s5, [r2, #-80]	@ 0xffffffb0
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80019d6:	3150      	adds	r1, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 80019d8:	ed52 3a13 	vldr	s7, [r2, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80019dc:	3250      	adds	r2, #80	@ 0x50
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80019de:	ed13 4a12 	vldr	s8, [r3, #-72]	@ 0xffffffb8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80019e2:	ed53 4a11 	vldr	s9, [r3, #-68]	@ 0xffffffbc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80019e6:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float xr = *xPtr++; float xi = *xPtr++;
 80019ea:	ed11 3a28 	vldr	s6, [r1, #-160]	@ 0xffffff60
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80019ee:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80019f2:	ed13 5a10 	vldr	s10, [r3, #-64]	@ 0xffffffc0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80019f6:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80019fa:	ed53 6a0e 	vldr	s13, [r3, #-56]	@ 0xffffffc8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80019fe:	ed13 6a0d 	vldr	s12, [r3, #-52]	@ 0xffffffcc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001a02:	ed13 7a0c 	vldr	s14, [r3, #-48]	@ 0xffffffd0
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001a06:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001a0a:	ed53 7a0b 	vldr	s15, [r3, #-44]	@ 0xffffffd4
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001a0e:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 8001a12:	ed03 4a12 	vstr	s8, [r3, #-72]	@ 0xffffffb8
                         *(yPtr+1) = accI;
 8001a16:	ed43 4a11 	vstr	s9, [r3, #-68]	@ 0xffffffbc
                         float hr = *hPtr++; float hi = *hPtr++;
 8001a1a:	ed52 3a26 	vldr	s7, [r2, #-152]	@ 0xffffff68
 8001a1e:	ed52 4a25 	vldr	s9, [r2, #-148]	@ 0xffffff6c
                         float xr = *xPtr++; float xi = *xPtr++;
 8001a22:	ed11 3a25 	vldr	s6, [r1, #-148]	@ 0xffffff6c
 8001a26:	ed11 4a26 	vldr	s8, [r1, #-152]	@ 0xffffff68
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001a2a:	eea3 5a64 	vfms.f32	s10, s6, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001a2e:	eee3 5a23 	vfma.f32	s11, s6, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001a32:	eea4 5a23 	vfma.f32	s10, s8, s7
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001a36:	eee4 5a24 	vfma.f32	s11, s8, s9
                         *yPtr     = accR;
 8001a3a:	ed03 5a10 	vstr	s10, [r3, #-64]	@ 0xffffffc0
                         *(yPtr+1) = accI;
 8001a3e:	ed43 5a0f 	vstr	s11, [r3, #-60]	@ 0xffffffc4
                         float xr = *xPtr++; float xi = *xPtr++;
 8001a42:	ed11 4a23 	vldr	s8, [r1, #-140]	@ 0xffffff74
                         float hr = *hPtr++; float hi = *hPtr++;
 8001a46:	ed52 5a24 	vldr	s11, [r2, #-144]	@ 0xffffff70
 8001a4a:	ed52 4a23 	vldr	s9, [r2, #-140]	@ 0xffffff74
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001a4e:	eea4 6a25 	vfma.f32	s12, s8, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8001a52:	ed11 5a24 	vldr	s10, [r1, #-144]	@ 0xffffff70
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001a56:	eee4 6a64 	vfms.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001a5a:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001a5e:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *(yPtr+1) = accI;
 8001a62:	ed03 6a0d 	vstr	s12, [r3, #-52]	@ 0xffffffcc
                         *yPtr     = accR;
 8001a66:	ed43 6a0e 	vstr	s13, [r3, #-56]	@ 0xffffffc8
                         float xr = *xPtr++; float xi = *xPtr++;
 8001a6a:	ed11 5a21 	vldr	s10, [r1, #-132]	@ 0xffffff7c
                         float hr = *hPtr++; float hi = *hPtr++;
 8001a6e:	ed52 5a22 	vldr	s11, [r2, #-136]	@ 0xffffff78
 8001a72:	ed52 6a21 	vldr	s13, [r2, #-132]	@ 0xffffff7c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001a76:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8001a7a:	ed11 6a22 	vldr	s12, [r1, #-136]	@ 0xffffff78
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001a7e:	eea5 7a66 	vfms.f32	s14, s10, s13
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001a82:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001a86:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 8001a8a:	ed43 7a0b 	vstr	s15, [r3, #-44]	@ 0xffffffd4
                         *yPtr     = accR;
 8001a8e:	ed03 7a0c 	vstr	s14, [r3, #-48]	@ 0xffffffd0
                         float xr = *xPtr++; float xi = *xPtr++;
 8001a92:	ed11 3a20 	vldr	s6, [r1, #-128]	@ 0xffffff80
 8001a96:	ed51 7a1f 	vldr	s15, [r1, #-124]	@ 0xffffff84
                         float hr = *hPtr++; float hi = *hPtr++;
 8001a9a:	ed52 3a1f 	vldr	s7, [r2, #-124]	@ 0xffffff84
 8001a9e:	ed52 2a20 	vldr	s5, [r2, #-128]	@ 0xffffff80
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001aa2:	ed13 4a0a 	vldr	s8, [r3, #-40]	@ 0xffffffd8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001aa6:	ed53 4a09 	vldr	s9, [r3, #-36]	@ 0xffffffdc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001aaa:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001aae:	ed53 5a08 	vldr	s11, [r3, #-32]	@ 0xffffffe0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001ab2:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001ab6:	ed13 5a07 	vldr	s10, [r3, #-28]	@ 0xffffffe4
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001aba:	ed13 6a06 	vldr	s12, [r3, #-24]	@ 0xffffffe8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001abe:	ed53 6a05 	vldr	s13, [r3, #-20]	@ 0xffffffec
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001ac2:	ed53 7a04 	vldr	s15, [r3, #-16]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001ac6:	ed13 7a03 	vldr	s14, [r3, #-12]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001aca:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001ace:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 8001ad2:	ed03 4a0a 	vstr	s8, [r3, #-40]	@ 0xffffffd8
                         *(yPtr+1) = accI;
 8001ad6:	ed43 4a09 	vstr	s9, [r3, #-36]	@ 0xffffffdc
                         float hr = *hPtr++; float hi = *hPtr++;
 8001ada:	ed52 4a1e 	vldr	s9, [r2, #-120]	@ 0xffffff88
                         float xr = *xPtr++; float xi = *xPtr++;
 8001ade:	ed11 3a1d 	vldr	s6, [r1, #-116]	@ 0xffffff8c
                         float hr = *hPtr++; float hi = *hPtr++;
 8001ae2:	ed52 3a1d 	vldr	s7, [r2, #-116]	@ 0xffffff8c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001ae6:	eea3 5a24 	vfma.f32	s10, s6, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 8001aea:	ed11 4a1e 	vldr	s8, [r1, #-120]	@ 0xffffff88
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001aee:	eee3 5a63 	vfms.f32	s11, s6, s7
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001af2:	eea4 5a23 	vfma.f32	s10, s8, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001af6:	eee4 5a24 	vfma.f32	s11, s8, s9
                         *(yPtr+1) = accI;
 8001afa:	ed03 5a07 	vstr	s10, [r3, #-28]	@ 0xffffffe4
                         *yPtr     = accR;
 8001afe:	ed43 5a08 	vstr	s11, [r3, #-32]	@ 0xffffffe0
                         float xr = *xPtr++; float xi = *xPtr++;
 8001b02:	ed11 4a1b 	vldr	s8, [r1, #-108]	@ 0xffffff94
                         float hr = *hPtr++; float hi = *hPtr++;
 8001b06:	ed52 4a1c 	vldr	s9, [r2, #-112]	@ 0xffffff90
 8001b0a:	ed52 5a1b 	vldr	s11, [r2, #-108]	@ 0xffffff94
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001b0e:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 8001b12:	ed11 5a1c 	vldr	s10, [r1, #-112]	@ 0xffffff90
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001b16:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001b1a:	eee5 6a25 	vfma.f32	s13, s10, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001b1e:	eea5 6a24 	vfma.f32	s12, s10, s9
                         *(yPtr+1) = accI;
 8001b22:	ed43 6a05 	vstr	s13, [r3, #-20]	@ 0xffffffec
                         *yPtr     = accR;
 8001b26:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
                         float hr = *hPtr++; float hi = *hPtr++;
 8001b2a:	ed52 6a1a 	vldr	s13, [r2, #-104]	@ 0xffffff98
 8001b2e:	ed52 5a19 	vldr	s11, [r2, #-100]	@ 0xffffff9c
                         float xr = *xPtr++; float xi = *xPtr++;
 8001b32:	ed11 5a19 	vldr	s10, [r1, #-100]	@ 0xffffff9c
 8001b36:	ed11 6a1a 	vldr	s12, [r1, #-104]	@ 0xffffff98
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001b3a:	eea5 7a26 	vfma.f32	s14, s10, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001b3e:	eee5 7a65 	vfms.f32	s15, s10, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001b42:	eea6 7a25 	vfma.f32	s14, s12, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001b46:	eee6 7a26 	vfma.f32	s15, s12, s13
                         *(yPtr+1) = accI;
 8001b4a:	ed03 7a03 	vstr	s14, [r3, #-12]
                         *yPtr     = accR;
 8001b4e:	ed43 7a04 	vstr	s15, [r3, #-16]
                         float xr = *xPtr++; float xi = *xPtr++;
 8001b52:	ed11 5a18 	vldr	s10, [r1, #-96]	@ 0xffffffa0
                         float hr = *hPtr++; float hi = *hPtr++;
 8001b56:	ed52 5a17 	vldr	s11, [r2, #-92]	@ 0xffffffa4
                         float xr = *xPtr++; float xi = *xPtr++;
 8001b5a:	ed11 4a17 	vldr	s8, [r1, #-92]	@ 0xffffffa4
                         float hr = *hPtr++; float hi = *hPtr++;
 8001b5e:	ed52 4a18 	vldr	s9, [r2, #-96]	@ 0xffffffa0
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001b62:	ed13 6a02 	vldr	s12, [r3, #-8]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001b66:	ed53 6a01 	vldr	s13, [r3, #-4]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001b6a:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001b6e:	ed93 7a00 	vldr	s14, [r3]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001b72:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001b76:	edd3 7a01 	vldr	s15, [r3, #4]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001b7a:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001b7e:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *yPtr     = accR;
 8001b82:	ed03 6a02 	vstr	s12, [r3, #-8]
                         *(yPtr+1) = accI;
 8001b86:	ed43 6a01 	vstr	s13, [r3, #-4]
                         float xr = *xPtr++; float xi = *xPtr++;
 8001b8a:	ed11 5a15 	vldr	s10, [r1, #-84]	@ 0xffffffac
                         float hr = *hPtr++; float hi = *hPtr++;
 8001b8e:	ed52 5a16 	vldr	s11, [r2, #-88]	@ 0xffffffa8
 8001b92:	ed52 6a15 	vldr	s13, [r2, #-84]	@ 0xffffffac
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001b96:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8001b9a:	ed11 6a16 	vldr	s12, [r1, #-88]	@ 0xffffffa8
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001b9e:	eea5 7a66 	vfms.f32	s14, s10, s13
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001ba2:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001ba6:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 8001baa:	edc3 7a01 	vstr	s15, [r3, #4]
                         *yPtr     = accR;
 8001bae:	ed83 7a00 	vstr	s14, [r3]
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8001bb2:	4283      	cmp	r3, r0
 8001bb4:	f47f af0a 	bne.w	80019cc <partitioned_fir_convolution_fft+0xf8>
                     float accR = __builtin_fmaf(xr, hr,
 8001bb8:	9b01      	ldr	r3, [sp, #4]
		if (++i >= segs) {
 8001bba:	f10c 0c01 	add.w	ip, ip, #1
                     float accI = __builtin_fmaf(xr, hi,
 8001bbe:	9a02      	ldr	r2, [sp, #8]
                     float accR = __builtin_fmaf(xr, hr,
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001bc4:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
                     float accI = __builtin_fmaf(xr, hi,
 8001bc8:	edd2 7a00 	vldr	s15, [r2]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001bcc:	f505 5500 	add.w	r5, r5, #8192	@ 0x2000
                     float hr = *hPtr++;  float hi = *hPtr++;
 8001bd0:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8001bd4:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
                     float accR = __builtin_fmaf(xr, hr,
 8001bd8:	ed97 5a00 	vldr	s10, [r7]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001bdc:	ed95 2a01 	vldr	s4, [r5, #4]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8001be0:	edd4 2a01 	vldr	s5, [r4, #4]
			i = 0;
 8001be4:	9903      	ldr	r1, [sp, #12]
                     float accR = __builtin_fmaf(xr, hr,
 8001be6:	eea2 5a62 	vfms.f32	s10, s4, s5
                     float accI = __builtin_fmaf(xr, hi,
 8001bea:	edd7 5a01 	vldr	s11, [r7, #4]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001bee:	ed95 3a00 	vldr	s6, [r5]
			i = 0;
 8001bf2:	4561      	cmp	r1, ip
 8001bf4:	bf98      	it	ls
 8001bf6:	f04f 0c00 	movls.w	ip, #0
                     float hr = *hPtr++;  float hi = *hPtr++;
 8001bfa:	edd4 3a00 	vldr	s7, [r4]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001bfe:	f603 71ec 	addw	r1, r3, #4076	@ 0xfec
                     float accR = __builtin_fmaf(xr, hr,
 8001c02:	ed9b 4a00 	vldr	s8, [fp]
                     float accI = __builtin_fmaf(xr, hi,
 8001c06:	eee2 5a23 	vfma.f32	s11, s4, s7
 8001c0a:	edda 4a00 	vldr	s9, [sl]
                     float accR = __builtin_fmaf(xr, hr,
 8001c0e:	ed99 6a00 	vldr	s12, [r9]
 8001c12:	eea3 5a23 	vfma.f32	s10, s6, s7
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001c16:	edd1 3a00 	vldr	s7, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8001c1a:	f602 71e8 	addw	r1, r2, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8001c1e:	edd8 6a00 	vldr	s13, [r8]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8001c22:	edd1 0a00 	vldr	s1, [r1]
 8001c26:	f602 71ec 	addw	r1, r2, #4076	@ 0xfec
                     float accI = __builtin_fmaf(xr, hi,
 8001c2a:	eee3 5a22 	vfma.f32	s11, s6, s5
                     float hr = *hPtr++;  float hi = *hPtr++;
 8001c2e:	edd1 1a00 	vldr	s3, [r1]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001c32:	f603 71f4 	addw	r1, r3, #4084	@ 0xff4
                     float accI = __builtin_fmaf(xr, hi,
 8001c36:	eee3 4aa0 	vfma.f32	s9, s7, s1
                     float accR = __builtin_fmaf(xr, hr,
 8001c3a:	eea3 4ae1 	vfms.f32	s8, s7, s3
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001c3e:	edd1 3a00 	vldr	s7, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8001c42:	f502 617f 	add.w	r1, r2, #4080	@ 0xff0
 8001c46:	ed91 2a00 	vldr	s4, [r1]
 8001c4a:	f602 71f4 	addw	r1, r2, #4084	@ 0xff4
 8001c4e:	edd1 2a00 	vldr	s5, [r1]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001c52:	f603 71fc 	addw	r1, r3, #4092	@ 0xffc
                     float accI = __builtin_fmaf(xr, hi,
 8001c56:	eee3 6a82 	vfma.f32	s13, s7, s4
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001c5a:	ed91 1a00 	vldr	s2, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8001c5e:	f602 71f8 	addw	r1, r2, #4088	@ 0xff8
 8001c62:	f602 72fc 	addw	r2, r2, #4092	@ 0xffc
                     float accR = __builtin_fmaf(xr, hr,
 8001c66:	eea3 6ae2 	vfms.f32	s12, s7, s5
                     float hr = *hPtr++;  float hi = *hPtr++;
 8001c6a:	ed91 3a00 	vldr	s6, [r1]
 8001c6e:	edd2 3a00 	vldr	s7, [r2]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001c72:	f603 72e8 	addw	r2, r3, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8001c76:	eee1 7a03 	vfma.f32	s15, s2, s6
                     float accR = __builtin_fmaf(xr, hr,
 8001c7a:	eea1 7a63 	vfms.f32	s14, s2, s7
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001c7e:	ed92 1a00 	vldr	s2, [r2]
 8001c82:	f503 627f 	add.w	r2, r3, #4080	@ 0xff0
 8001c86:	f603 73f8 	addw	r3, r3, #4088	@ 0xff8
                     float accR = __builtin_fmaf(xr, hr,
 8001c8a:	eea1 4a20 	vfma.f32	s8, s2, s1
                     float accI = __builtin_fmaf(xr, hi,
 8001c8e:	eee1 4a21 	vfma.f32	s9, s2, s3
                     *yPtr     = accR;
 8001c92:	ed8b 4a00 	vstr	s8, [fp]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001c96:	ed92 4a00 	vldr	s8, [r2]
                     *(yPtr+1) = accI;
 8001c9a:	edca 4a00 	vstr	s9, [sl]
                     float accR = __builtin_fmaf(xr, hr,
 8001c9e:	eea4 6a02 	vfma.f32	s12, s8, s4
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001ca2:	edd3 4a00 	vldr	s9, [r3]
                     float accI = __builtin_fmaf(xr, hi,
 8001ca6:	eee4 6a22 	vfma.f32	s13, s8, s5
                     *yPtr     = accR;
 8001caa:	ed87 5a00 	vstr	s10, [r7]
                     float accR = __builtin_fmaf(xr, hr,
 8001cae:	eea4 7a83 	vfma.f32	s14, s9, s6
                     *(yPtr+1) = accI;
 8001cb2:	edc7 5a01 	vstr	s11, [r7, #4]
                     float accI = __builtin_fmaf(xr, hi,
 8001cb6:	eee4 7aa3 	vfma.f32	s15, s9, s7
                     *yPtr     = accR;
 8001cba:	ed89 6a00 	vstr	s12, [r9]
                     *(yPtr+1) = accI;
 8001cbe:	edc8 6a00 	vstr	s13, [r8]
                     *yPtr     = accR;
 8001cc2:	9b01      	ldr	r3, [sp, #4]
                     *(yPtr+1) = accI;
 8001cc4:	9a02      	ldr	r2, [sp, #8]
                     *yPtr     = accR;
 8001cc6:	ed83 7a00 	vstr	s14, [r3]
                     *(yPtr+1) = accI;
 8001cca:	edc2 7a00 	vstr	s15, [r2]
		if (idx-- == 0) {
 8001cce:	b396      	cbz	r6, 8001d36 <partitioned_fir_convolution_fft+0x462>
 8001cd0:	3e01      	subs	r6, #1
    } while (idx != fir->curr_fftidx);
 8001cd2:	9b04      	ldr	r3, [sp, #16]
 8001cd4:	42b3      	cmp	r3, r6
 8001cd6:	f47f ae4d 	bne.w	8001974 <partitioned_fir_convolution_fft+0xa0>

    // advance write index
    if (++fir->curr_fftidx >= segs) {
        fir->curr_fftidx = 0;
 8001cda:	9e03      	ldr	r6, [sp, #12]
    if (++fir->curr_fftidx >= segs) {
 8001cdc:	3301      	adds	r3, #1
    }

    // inverse FFT
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8001cde:	4a17      	ldr	r2, [pc, #92]	@ (8001d3c <partitioned_fir_convolution_fft+0x468>)
        fir->curr_fftidx = 0;
 8001ce0:	42b3      	cmp	r3, r6
 8001ce2:	bf28      	it	cs
 8001ce4:	2300      	movcs	r3, #0
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8001ce6:	4916      	ldr	r1, [pc, #88]	@ (8001d40 <partitioned_fir_convolution_fft+0x46c>)
 8001ce8:	4816      	ldr	r0, [pc, #88]	@ (8001d44 <partitioned_fir_convolution_fft+0x470>)
    if (++fir->curr_fftidx >= segs) {
 8001cea:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8001cee:	60ab      	str	r3, [r5, #8]
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f007 fac7 	bl	8009284 <arm_rfft_fast_f32>

    // overlap-add and scaling
    const float32_t invN = 1.0f / (float32_t)segs;
 8001cf6:	ee07 6a90 	vmov	s15, r6
 8001cfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8001d3c <partitioned_fir_convolution_fft+0x468>)
 8001d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d04:	9b07      	ldr	r3, [sp, #28]
 8001d06:	f502 5180 	add.w	r1, r2, #4096	@ 0x1000
 8001d0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8001d0e:	460d      	mov	r5, r1
        float32_t s = zeropaddedinput[k]            * invN;
 8001d10:	ecf2 7a01 	vldmia	r2!, {s15}
        float32_t o = overlap[k]                    * invN;
 8001d14:	ed93 7a00 	vldr	s14, [r3]
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8001d18:	4295      	cmp	r5, r2
        pipe->processBuffer[k] = s + o;
 8001d1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d22:	ece4 7a01 	vstmia	r4!, {s15}
        overlap[k]             = zeropaddedinput[BUFFER_SIZE + k];
 8001d26:	f851 0b04 	ldr.w	r0, [r1], #4
 8001d2a:	f843 0b04 	str.w	r0, [r3], #4
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8001d2e:	d1ef      	bne.n	8001d10 <partitioned_fir_convolution_fft+0x43c>
    }

}
 8001d30:	b00b      	add	sp, #44	@ 0x2c
 8001d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			idx = segs - 1;
 8001d36:	9b03      	ldr	r3, [sp, #12]
 8001d38:	1e5e      	subs	r6, r3, #1
 8001d3a:	e7ca      	b.n	8001cd2 <partitioned_fir_convolution_fft+0x3fe>
 8001d3c:	2000f020 	.word	0x2000f020
 8001d40:	2406d454 	.word	0x2406d454
 8001d44:	2406d098 	.word	0x2406d098

08001d48 <pipe_getDelayBuffer>:

float32_t *pipe_getDelayBuffer(pipe *self, uint16_t n)
{
    uint32_t offset = n * BUFFER_SIZE;

    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 8001d48:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
 8001d4c:	4a09      	ldr	r2, [pc, #36]	@ (8001d74 <pipe_getDelayBuffer+0x2c>)

    return &self->delayBuffer[index];
 8001d4e:	f241 4c02 	movw	ip, #5122	@ 0x1402
    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8001d58:	eba3 2181 	sub.w	r1, r3, r1, lsl #10
 8001d5c:	fba2 2301 	umull	r2, r3, r2, r1
 8001d60:	0b5b      	lsrs	r3, r3, #13
 8001d62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d66:	eba1 21c3 	sub.w	r1, r1, r3, lsl #11
    return &self->delayBuffer[index];
 8001d6a:	448c      	add	ip, r1
}
 8001d6c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	cccccccd 	.word	0xcccccccd

08001d78 <pipe_loadProcess>:
    }
}

static void pipe_loadProcess(pipe *self)
{
	arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8001d78:	f244 0108 	movw	r1, #16392	@ 0x4008
 8001d7c:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 8001d80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d84:	4401      	add	r1, r0
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	f007 b99a 	b.w	80090c0 <arm_copy_f32>

08001d8c <pipe_updateDelayBuffer>:
{
 8001d8c:	b510      	push	{r4, lr}
    arm_copy_f32(self->inBuffer, &self->delayBuffer[self->delayIndex], BUFFER_SIZE);
 8001d8e:	f500 4470 	add.w	r4, r0, #61440	@ 0xf000
 8001d92:	f241 4102 	movw	r1, #5122	@ 0x1402
 8001d96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d9a:	68e3      	ldr	r3, [r4, #12]
 8001d9c:	4419      	add	r1, r3
 8001d9e:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 8001da2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	f007 f98a 	bl	80090c0 <arm_copy_f32>
    self->delayIndex += BUFFER_SIZE;
 8001dac:	68e3      	ldr	r3, [r4, #12]
 8001dae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
        self->delayIndex = 0;
 8001db2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8001db6:	bf28      	it	cs
 8001db8:	2300      	movcs	r3, #0
 8001dba:	60e3      	str	r3, [r4, #12]
}
 8001dbc:	bd10      	pop	{r4, pc}
 8001dbe:	bf00      	nop

08001dc0 <pipe_updateDACOutput>:
{
 8001dc0:	b570      	push	{r4, r5, r6, lr}
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8001dc2:	f500 4580 	add.w	r5, r0, #16384	@ 0x4000
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8001dc6:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
{
 8001dca:	460c      	mov	r4, r1
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8001dcc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001dd0:	6869      	ldr	r1, [r5, #4]
 8001dd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8001dd6:	7a1e      	ldrb	r6, [r3, #8]
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8001dd8:	4608      	mov	r0, r1
 8001dda:	f007 ffc9 	bl	8009d70 <arm_offset_f32>
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8001dde:	6869      	ldr	r1, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8001de0:	fab6 f686 	clz	r6, r6
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8001de4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001de8:	4608      	mov	r0, r1
 8001dea:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001e18 <pipe_updateDACOutput+0x58>
 8001dee:	f007 ff89 	bl	8009d04 <arm_scale_f32>
 8001df2:	686a      	ldr	r2, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8001df4:	0976      	lsrs	r6, r6, #5
    for (i = 0; i < BUFFER_SIZE; i++)
 8001df6:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 8001dfa:	eb04 21c6 	add.w	r1, r4, r6, lsl #11
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8001dfe:	ecf2 7a01 	vldmia	r2!, {s15}
 8001e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    for (i = 0; i < BUFFER_SIZE; i++)
 8001e06:	4290      	cmp	r0, r2
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8001e08:	ee17 3a90 	vmov	r3, s15
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f821 3b02 	strh.w	r3, [r1], #2
    for (i = 0; i < BUFFER_SIZE; i++)
 8001e12:	d1f4      	bne.n	8001dfe <pipe_updateDACOutput+0x3e>
}
 8001e14:	bd70      	pop	{r4, r5, r6, pc}
 8001e16:	bf00      	nop
 8001e18:	45000000 	.word	0x45000000

08001e1c <pipe_ADC_Complete>:
{
 8001e1c:	b538      	push	{r3, r4, r5, lr}
 8001e1e:	f500 5580 	add.w	r5, r0, #4096	@ 0x1000
 8001e22:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8001e24:	f501 6c00 	add.w	ip, r1, #2048	@ 0x800
 8001e28:	f500 5e00 	add.w	lr, r0, #8192	@ 0x2000
 8001e2c:	462a      	mov	r2, r5
        self->inBuffer2[i] = (float32_t)adcInput[BUFFER_SIZE + i];
 8001e2e:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e3c:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8001e40:	4572      	cmp	r2, lr
 8001e42:	d1f4      	bne.n	8001e2e <pipe_ADC_Complete+0x12>
    arm_scale_f32(self->inBuffer2, ADC_BITS2VOLTS, self->inBuffer2, BUFFER_SIZE);
 8001e44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e48:	4629      	mov	r1, r5
 8001e4a:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8001e80 <pipe_ADC_Complete+0x64>
 8001e4e:	4628      	mov	r0, r5
 8001e50:	f007 ff58 	bl	8009d04 <arm_scale_f32>
    arm_offset_f32(self->inBuffer2, -1.0f, self->inBuffer2, BUFFER_SIZE);
 8001e54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e58:	4629      	mov	r1, r5
 8001e5a:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8001e5e:	4628      	mov	r0, r5
 8001e60:	f007 ff86 	bl	8009d70 <arm_offset_f32>
    self->inBuffer  = self->inBuffer2;
 8001e64:	f504 4280 	add.w	r2, r4, #16384	@ 0x4000
    self->ppState   = 0;
 8001e68:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->outBuffer = self->outBuffer2;
 8001e6c:	f504 5440 	add.w	r4, r4, #12288	@ 0x3000
    self->ppState   = 0;
 8001e70:	2100      	movs	r1, #0
    self->outBuffer = self->outBuffer2;
 8001e72:	e9c2 5400 	strd	r5, r4, [r2]
    self->bufferReady = true;
 8001e76:	2201      	movs	r2, #1
    self->ppState   = 0;
 8001e78:	7219      	strb	r1, [r3, #8]
    self->bufferReady = true;
 8001e7a:	741a      	strb	r2, [r3, #16]
}
 8001e7c:	bd38      	pop	{r3, r4, r5, pc}
 8001e7e:	bf00      	nop
 8001e80:	38000000 	.word	0x38000000

08001e84 <pipe_ADC_HalfComplete>:
{
 8001e84:	b510      	push	{r4, lr}
 8001e86:	468c      	mov	ip, r1
 8001e88:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	f500 5e80 	add.w	lr, r0, #4096	@ 0x1000
        self->inBuffer1[i] = (float32_t)adcInput[i];
 8001e90:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e9e:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8001ea2:	4572      	cmp	r2, lr
 8001ea4:	d1f4      	bne.n	8001e90 <pipe_ADC_HalfComplete+0xc>
    arm_scale_f32(self->inBuffer1, ADC_BITS2VOLTS, self->inBuffer1, BUFFER_SIZE);
 8001ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eaa:	4621      	mov	r1, r4
 8001eac:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001ee0 <pipe_ADC_HalfComplete+0x5c>
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f007 ff27 	bl	8009d04 <arm_scale_f32>
    arm_offset_f32(self->inBuffer1, -1.0f, self->inBuffer1, BUFFER_SIZE);
 8001eb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eba:	4621      	mov	r1, r4
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8001ec2:	f007 ff55 	bl	8009d70 <arm_offset_f32>
    self->ppState   = 1;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->inBuffer  = self->inBuffer1;
 8001ecc:	f504 4180 	add.w	r1, r4, #16384	@ 0x4000
    self->outBuffer = self->outBuffer1;
 8001ed0:	f504 5000 	add.w	r0, r4, #8192	@ 0x2000
 8001ed4:	e9c1 4000 	strd	r4, r0, [r1]
    self->ppState   = 1;
 8001ed8:	721a      	strb	r2, [r3, #8]
    self->bufferReady = true;
 8001eda:	741a      	strb	r2, [r3, #16]
}
 8001edc:	bd10      	pop	{r4, pc}
 8001ede:	bf00      	nop
 8001ee0:	38000000 	.word	0x38000000

08001ee4 <pipeInit>:
}

void pipeInit(pipe *self)
{
 8001ee4:	4684      	mov	ip, r0
    self->delayIndex = 0;
    self->bufferReady = false;

    self->adcHalfComplete = pipe_ADC_HalfComplete;
    self->adcComplete     = pipe_ADC_Complete;
    self->updateDelayBuffer = pipe_updateDelayBuffer;
 8001ee6:	4811      	ldr	r0, [pc, #68]	@ (8001f2c <pipeInit+0x48>)
    self->ppState   = 0;
 8001ee8:	2100      	movs	r1, #0
    self->inBuffer  = self->inBuffer2;
 8001eea:	f50c 4280 	add.w	r2, ip, #16384	@ 0x4000
    self->ppState   = 0;
 8001eee:	f50c 4370 	add.w	r3, ip, #61440	@ 0xf000
{
 8001ef2:	b470      	push	{r4, r5, r6}
    self->inBuffer  = self->inBuffer2;
 8001ef4:	f50c 5680 	add.w	r6, ip, #4096	@ 0x1000
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8001ef8:	4d0d      	ldr	r5, [pc, #52]	@ (8001f30 <pipeInit+0x4c>)
    self->adcComplete     = pipe_ADC_Complete;
 8001efa:	4c0e      	ldr	r4, [pc, #56]	@ (8001f34 <pipeInit+0x50>)
    self->inBuffer  = self->inBuffer2;
 8001efc:	6016      	str	r6, [r2, #0]
    self->outBuffer = self->outBuffer2;
 8001efe:	f50c 5640 	add.w	r6, ip, #12288	@ 0x3000
 8001f02:	6056      	str	r6, [r2, #4]
    self->updateDACOutput = pipe_updateDACOutput;
 8001f04:	4a0c      	ldr	r2, [pc, #48]	@ (8001f38 <pipeInit+0x54>)
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8001f06:	615d      	str	r5, [r3, #20]
    self->ppState   = 0;
 8001f08:	7219      	strb	r1, [r3, #8]
    self->adcComplete     = pipe_ADC_Complete;
 8001f0a:	619c      	str	r4, [r3, #24]
    self->delayIndex = 0;
 8001f0c:	60d9      	str	r1, [r3, #12]
    self->bufferReady = false;
 8001f0e:	7419      	strb	r1, [r3, #16]
    self->updateDACOutput = pipe_updateDACOutput;
 8001f10:	e9c3 0207 	strd	r0, r2, [r3, #28]
    self->getDelayBuffer = pipe_getDelayBuffer;
 8001f14:	4809      	ldr	r0, [pc, #36]	@ (8001f3c <pipeInit+0x58>)
    self->loadProcess = pipe_loadProcess;
 8001f16:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <pipeInit+0x5c>)
 8001f18:	e9c3 0209 	strd	r0, r2, [r3, #36]	@ 0x24

    for(int i = 0; i < BUFFER_SIZE ; i++) {

    	self->processBuffer[i] = 0;
 8001f1c:	f244 0008 	movw	r0, #16392	@ 0x4008
 8001f20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f24:	4460      	add	r0, ip

    }

}
 8001f26:	bc70      	pop	{r4, r5, r6}
    	self->processBuffer[i] = 0;
 8001f28:	f008 bcf2 	b.w	800a910 <memset>
 8001f2c:	08001d8d 	.word	0x08001d8d
 8001f30:	08001e85 	.word	0x08001e85
 8001f34:	08001e1d 	.word	0x08001e1d
 8001f38:	08001dc1 	.word	0x08001dc1
 8001f3c:	08001d49 	.word	0x08001d49
 8001f40:	08001d79 	.word	0x08001d79

08001f44 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f44:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <HAL_MspInit+0x20>)
{
 8001f46:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f48:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001f4c:	f042 0202 	orr.w	r2, r2, #2
 8001f50:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f60:	b002      	add	sp, #8
 8001f62:	4770      	bx	lr
 8001f64:	58024400 	.word	0x58024400

08001f68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f68:	b570      	push	{r4, r5, r6, lr}
 8001f6a:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	2100      	movs	r1, #0
{
 8001f6e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f70:	22c0      	movs	r2, #192	@ 0xc0
 8001f72:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	9106      	str	r1, [sp, #24]
 8001f76:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001f7a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f7e:	f008 fcc7 	bl	800a910 <memset>
  if(hadc->Instance==ADC1)
 8001f82:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <HAL_ADC_MspInit+0xe0>)
 8001f84:	6822      	ldr	r2, [r4, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d001      	beq.n	8001f8e <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f8a:	b038      	add	sp, #224	@ 0xe0
 8001f8c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f94:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f96:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001f9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f9e:	9331      	str	r3, [sp, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa0:	f004 f978 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d148      	bne.n	800203a <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001fa8:	4b28      	ldr	r3, [pc, #160]	@ (800204c <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	a902      	add	r1, sp, #8
    hdma_adc1.Instance = DMA1_Stream0;
 8001fae:	4d28      	ldr	r5, [pc, #160]	@ (8002050 <HAL_ADC_MspInit+0xe8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001fb0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8001fbc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001fc0:	f002 0220 	and.w	r2, r2, #32
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fd4:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fe2:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	481b      	ldr	r0, [pc, #108]	@ (8002054 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fe8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f003 f856 	bl	800509c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8001ff0:	4a19      	ldr	r2, [pc, #100]	@ (8002058 <HAL_ADC_MspInit+0xf0>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ff2:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ff4:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff6:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ff8:	e885 004c 	stmia.w	r5, {r2, r3, r6}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ffc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002000:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002004:	e9c5 6203 	strd	r6, r2, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002008:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800200a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800200e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002012:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002016:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800201a:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800201c:	f001 fde8 	bl	8003bf0 <HAL_DMA_Init>
 8002020:	b970      	cbnz	r0, 8002040 <HAL_ADC_MspInit+0xd8>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002026:	64e5      	str	r5, [r4, #76]	@ 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002028:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800202a:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800202c:	f001 fa98 	bl	8003560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002030:	2012      	movs	r0, #18
 8002032:	f001 fad1 	bl	80035d8 <HAL_NVIC_EnableIRQ>
}
 8002036:	b038      	add	sp, #224	@ 0xe0
 8002038:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800203a:	f7ff fc49 	bl	80018d0 <Error_Handler>
 800203e:	e7b3      	b.n	8001fa8 <HAL_ADC_MspInit+0x40>
      Error_Handler();
 8002040:	f7ff fc46 	bl	80018d0 <Error_Handler>
 8002044:	e7ed      	b.n	8002022 <HAL_ADC_MspInit+0xba>
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	58024400 	.word	0x58024400
 8002050:	2406d378 	.word	0x2406d378
 8002054:	58020000 	.word	0x58020000
 8002058:	40020010 	.word	0x40020010

0800205c <HAL_DAC_MspInit>:
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 800205c:	4b2c      	ldr	r3, [pc, #176]	@ (8002110 <HAL_DAC_MspInit+0xb4>)
 800205e:	6802      	ldr	r2, [r0, #0]
{
 8002060:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 8002062:	429a      	cmp	r2, r3
{
 8002064:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002066:	f04f 0400 	mov.w	r4, #0
 800206a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800206e:	9404      	str	r4, [sp, #16]
 8002070:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8002074:	d001      	beq.n	800207a <HAL_DAC_MspInit+0x1e>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002076:	b008      	add	sp, #32
 8002078:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 800207a:	4b26      	ldr	r3, [pc, #152]	@ (8002114 <HAL_DAC_MspInit+0xb8>)
 800207c:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8002080:	4e25      	ldr	r6, [pc, #148]	@ (8002118 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002082:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002086:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800208a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800208e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002092:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8002096:	9200      	str	r2, [sp, #0]
 8002098:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020a6:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020b2:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b4:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	4819      	ldr	r0, [pc, #100]	@ (800211c <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f002 ffee 	bl	800509c <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80020c0:	4a17      	ldr	r2, [pc, #92]	@ (8002120 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80020c2:	2343      	movs	r3, #67	@ 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80020c4:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c6:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80020c8:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ca:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80020cc:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020d0:	2240      	movs	r2, #64	@ 0x40
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80020d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020d6:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80020dc:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020e2:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80020e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020ea:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80020ec:	f001 fd80 	bl	8003bf0 <HAL_DMA_Init>
 80020f0:	b958      	cbnz	r0, 800210a <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020f2:	2200      	movs	r2, #0
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80020f4:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020f6:	2036      	movs	r0, #54	@ 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80020f8:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020fa:	4611      	mov	r1, r2
 80020fc:	f001 fa30 	bl	8003560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002100:	2036      	movs	r0, #54	@ 0x36
 8002102:	f001 fa69 	bl	80035d8 <HAL_NVIC_EnableIRQ>
}
 8002106:	b008      	add	sp, #32
 8002108:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800210a:	f7ff fbe1 	bl	80018d0 <Error_Handler>
 800210e:	e7f0      	b.n	80020f2 <HAL_DAC_MspInit+0x96>
 8002110:	40007400 	.word	0x40007400
 8002114:	58024400 	.word	0x58024400
 8002118:	2406d2ec 	.word	0x2406d2ec
 800211c:	58020000 	.word	0x58020000
 8002120:	40020028 	.word	0x40020028

08002124 <HAL_TIM_Base_MspInit>:
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 8002124:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <HAL_TIM_Base_MspInit+0x2c>)
 8002126:	6802      	ldr	r2, [r0, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d000      	beq.n	800212e <HAL_TIM_Base_MspInit+0xa>
 800212c:	4770      	bx	lr
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <HAL_TIM_Base_MspInit+0x30>)
{
 8002130:	b082      	sub	sp, #8
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002132:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002136:	f042 0202 	orr.w	r2, r2, #2
 800213a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800213e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 800214a:	b002      	add	sp, #8
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40010400 	.word	0x40010400
 8002154:	58024400 	.word	0x58024400

08002158 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002158:	b5d0      	push	{r4, r6, r7, lr}
 800215a:	b0bc      	sub	sp, #240	@ 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	2100      	movs	r1, #0
{
 800215e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002160:	22c0      	movs	r2, #192	@ 0xc0
 8002162:	a80c      	add	r0, sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	910a      	str	r1, [sp, #40]	@ 0x28
 8002166:	e9cd 1106 	strd	r1, r1, [sp, #24]
 800216a:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800216e:	f008 fbcf 	bl	800a910 <memset>
  if(huart->Instance==USART1)
 8002172:	4a4e      	ldr	r2, [pc, #312]	@ (80022ac <HAL_UART_MspInit+0x154>)
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800217a:	4a4d      	ldr	r2, [pc, #308]	@ (80022b0 <HAL_UART_MspInit+0x158>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d03d      	beq.n	80021fc <HAL_UART_MspInit+0xa4>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002180:	b03c      	add	sp, #240	@ 0xf0
 8002182:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002184:	2201      	movs	r2, #1
 8002186:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002188:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800218a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218e:	f004 f881 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 8002192:	2800      	cmp	r0, #0
 8002194:	f040 8083 	bne.w	800229e <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002198:	4b46      	ldr	r3, [pc, #280]	@ (80022b4 <HAL_UART_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800219a:	f44f 66c0 	mov.w	r6, #1536	@ 0x600
 800219e:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021a0:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 80021a2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	a906      	add	r1, sp, #24
 80021a8:	4843      	ldr	r0, [pc, #268]	@ (80022b8 <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80021aa:	f042 0210 	orr.w	r2, r2, #16
 80021ae:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80021b2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80021b6:	f002 0210 	and.w	r2, r2, #16
 80021ba:	9201      	str	r2, [sp, #4]
 80021bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021ce:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d0:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021d4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80021d8:	2600      	movs	r6, #0
 80021da:	2700      	movs	r7, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021e0:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f002 ff5a 	bl	800509c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2025      	movs	r0, #37	@ 0x25
 80021ec:	4611      	mov	r1, r2
 80021ee:	f001 f9b7 	bl	8003560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021f2:	2025      	movs	r0, #37	@ 0x25
 80021f4:	f001 f9f0 	bl	80035d8 <HAL_NVIC_EnableIRQ>
}
 80021f8:	b03c      	add	sp, #240	@ 0xf0
 80021fa:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021fc:	2202      	movs	r2, #2
 80021fe:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002200:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002202:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002206:	f004 f845 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 800220a:	2800      	cmp	r0, #0
 800220c:	d14a      	bne.n	80022a4 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800220e:	4b29      	ldr	r3, [pc, #164]	@ (80022b4 <HAL_UART_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002210:	2004      	movs	r0, #4
 8002212:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002214:	2407      	movs	r4, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 8002216:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800221a:	2600      	movs	r6, #0
 800221c:	2702      	movs	r7, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 800221e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002222:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002226:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800222a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800222e:	9203      	str	r2, [sp, #12]
 8002230:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800223e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002242:	f002 0201 	and.w	r2, r2, #1
 8002246:	9204      	str	r2, [sp, #16]
 8002248:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800224a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800224e:	f042 0208 	orr.w	r2, r2, #8
 8002252:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800225a:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800225c:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002260:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002264:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	a906      	add	r1, sp, #24
 8002268:	4813      	ldr	r0, [pc, #76]	@ (80022b8 <HAL_UART_MspInit+0x160>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800226a:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800226c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f002 ff14 	bl	800509c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002274:	2302      	movs	r3, #2
 8002276:	2240      	movs	r2, #64	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002278:	a906      	add	r1, sp, #24
 800227a:	4810      	ldr	r0, [pc, #64]	@ (80022bc <HAL_UART_MspInit+0x164>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800227c:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800227e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002282:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002286:	f002 ff09 	bl	800509c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2026      	movs	r0, #38	@ 0x26
 800228e:	4611      	mov	r1, r2
 8002290:	f001 f966 	bl	8003560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002294:	2026      	movs	r0, #38	@ 0x26
 8002296:	f001 f99f 	bl	80035d8 <HAL_NVIC_EnableIRQ>
}
 800229a:	b03c      	add	sp, #240	@ 0xf0
 800229c:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800229e:	f7ff fb17 	bl	80018d0 <Error_Handler>
 80022a2:	e779      	b.n	8002198 <HAL_UART_MspInit+0x40>
      Error_Handler();
 80022a4:	f7ff fb14 	bl	80018d0 <Error_Handler>
 80022a8:	e7b1      	b.n	800220e <HAL_UART_MspInit+0xb6>
 80022aa:	bf00      	nop
 80022ac:	40011000 	.word	0x40011000
 80022b0:	40004400 	.word	0x40004400
 80022b4:	58024400 	.word	0x58024400
 80022b8:	58020000 	.word	0x58020000
 80022bc:	58020c00 	.word	0x58020c00

080022c0 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 80022c0:	4836      	ldr	r0, [pc, #216]	@ (800239c <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80022c2:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80022c4:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
 80022c6:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80022c8:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80022ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80022ce:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80022d2:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 80022d4:	b109      	cbz	r1, 80022da <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80022d6:	b038      	add	sp, #224	@ 0xe0
 80022d8:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 80022da:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022dc:	22b8      	movs	r2, #184	@ 0xb8
  FMC_Initialized = 1;
 80022de:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e0:	a80a      	add	r0, sp, #40	@ 0x28
 80022e2:	f008 fb15 	bl	800a910 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80022e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022ea:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ec:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80022ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f2:	f003 ffcf 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d14c      	bne.n	8002394 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 80022fa:	4b29      	ldr	r3, [pc, #164]	@ (80023a0 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80022fc:	f64f 003f 	movw	r0, #63551	@ 0xf83f
 8002300:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002302:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8002304:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002308:	2600      	movs	r6, #0
 800230a:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800230c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002310:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002314:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002318:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 800231a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800231e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8002322:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002324:	a902      	add	r1, sp, #8
 8002326:	481f      	ldr	r0, [pc, #124]	@ (80023a4 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002328:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800232a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800232e:	f002 feb5 	bl	800509c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002332:	222c      	movs	r2, #44	@ 0x2c
 8002334:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002336:	a902      	add	r1, sp, #8
 8002338:	481b      	ldr	r0, [pc, #108]	@ (80023a8 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800233a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 800233c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002340:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002344:	f002 feaa 	bl	800509c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002348:	f248 1237 	movw	r2, #33079	@ 0x8137
 800234c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800234e:	a902      	add	r1, sp, #8
 8002350:	4816      	ldr	r0, [pc, #88]	@ (80023ac <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002352:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002354:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002358:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800235c:	f002 fe9e 	bl	800509c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002360:	f64f 7283 	movw	r2, #65411	@ 0xff83
 8002364:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002366:	a902      	add	r1, sp, #8
 8002368:	4811      	ldr	r0, [pc, #68]	@ (80023b0 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800236a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800236c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002370:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002374:	f002 fe92 	bl	800509c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002378:	f24c 7203 	movw	r2, #50947	@ 0xc703
 800237c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800237e:	a902      	add	r1, sp, #8
 8002380:	480c      	ldr	r0, [pc, #48]	@ (80023b4 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002382:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002384:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002388:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800238c:	f002 fe86 	bl	800509c <HAL_GPIO_Init>
}
 8002390:	b038      	add	sp, #224	@ 0xe0
 8002392:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8002394:	f7ff fa9c 	bl	80018d0 <Error_Handler>
 8002398:	e7af      	b.n	80022fa <HAL_SDRAM_MspInit+0x3a>
 800239a:	bf00      	nop
 800239c:	2406f454 	.word	0x2406f454
 80023a0:	58024400 	.word	0x58024400
 80023a4:	58021400 	.word	0x58021400
 80023a8:	58021c00 	.word	0x58021c00
 80023ac:	58021800 	.word	0x58021800
 80023b0:	58021000 	.word	0x58021000
 80023b4:	58020c00 	.word	0x58020c00

080023b8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023b8:	e7fe      	b.n	80023b8 <NMI_Handler>
 80023ba:	bf00      	nop

080023bc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <HardFault_Handler>
 80023be:	bf00      	nop

080023c0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <MemManage_Handler>
 80023c2:	bf00      	nop

080023c4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <BusFault_Handler>
 80023c6:	bf00      	nop

080023c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <UsageFault_Handler>
 80023ca:	bf00      	nop

080023cc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop

080023d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop

080023d4 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop

080023d8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d8:	f000 b968 	b.w	80026ac <HAL_IncTick>

080023dc <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023dc:	4801      	ldr	r0, [pc, #4]	@ (80023e4 <DMA1_Stream0_IRQHandler+0x8>)
 80023de:	f002 bc4b 	b.w	8004c78 <HAL_DMA_IRQHandler>
 80023e2:	bf00      	nop
 80023e4:	2406d378 	.word	0x2406d378

080023e8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80023e8:	4801      	ldr	r0, [pc, #4]	@ (80023f0 <DMA1_Stream1_IRQHandler+0x8>)
 80023ea:	f002 bc45 	b.w	8004c78 <HAL_DMA_IRQHandler>
 80023ee:	bf00      	nop
 80023f0:	2406d2ec 	.word	0x2406d2ec

080023f4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023f4:	4801      	ldr	r0, [pc, #4]	@ (80023fc <ADC_IRQHandler+0x8>)
 80023f6:	f000 b97b 	b.w	80026f0 <HAL_ADC_IRQHandler>
 80023fa:	bf00      	nop
 80023fc:	2406d3f0 	.word	0x2406d3f0

08002400 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002400:	4801      	ldr	r0, [pc, #4]	@ (8002408 <USART1_IRQHandler+0x8>)
 8002402:	f005 bd21 	b.w	8007e48 <HAL_UART_IRQHandler>
 8002406:	bf00      	nop
 8002408:	2406d20c 	.word	0x2406d20c

0800240c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800240c:	4801      	ldr	r0, [pc, #4]	@ (8002414 <USART2_IRQHandler+0x8>)
 800240e:	f005 bd1b 	b.w	8007e48 <HAL_UART_IRQHandler>
 8002412:	bf00      	nop
 8002414:	2406d178 	.word	0x2406d178

08002418 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002418:	4801      	ldr	r0, [pc, #4]	@ (8002420 <TIM6_DAC_IRQHandler+0x8>)
 800241a:	f001 ba01 	b.w	8003820 <HAL_DAC_IRQHandler>
 800241e:	bf00      	nop
 8002420:	2406d364 	.word	0x2406d364

08002424 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002424:	2001      	movs	r0, #1
 8002426:	4770      	bx	lr

08002428 <_kill>:

int _kill(int pid, int sig)
{
 8002428:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800242a:	f008 faa5 	bl	800a978 <__errno>
 800242e:	2216      	movs	r2, #22
 8002430:	4603      	mov	r3, r0
  return -1;
}
 8002432:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  errno = EINVAL;
 8002436:	601a      	str	r2, [r3, #0]
}
 8002438:	bd08      	pop	{r3, pc}
 800243a:	bf00      	nop

0800243c <_exit>:

void _exit (int status)
{
 800243c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800243e:	f008 fa9b 	bl	800a978 <__errno>
 8002442:	2316      	movs	r3, #22
 8002444:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002446:	e7fe      	b.n	8002446 <_exit+0xa>

08002448 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002448:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	1e16      	subs	r6, r2, #0
 800244c:	dd07      	ble.n	800245e <_read+0x16>
 800244e:	460c      	mov	r4, r1
 8002450:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002452:	f3af 8000 	nop.w
 8002456:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245a:	42a5      	cmp	r5, r4
 800245c:	d1f9      	bne.n	8002452 <_read+0xa>
  }

  return len;
}
 800245e:	4630      	mov	r0, r6
 8002460:	bd70      	pop	{r4, r5, r6, pc}
 8002462:	bf00      	nop

08002464 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002464:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002466:	1e16      	subs	r6, r2, #0
 8002468:	dd07      	ble.n	800247a <_write+0x16>
 800246a:	460c      	mov	r4, r1
 800246c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800246e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002472:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	42a5      	cmp	r5, r4
 8002478:	d1f9      	bne.n	800246e <_write+0xa>
  }
  return len;
}
 800247a:	4630      	mov	r0, r6
 800247c:	bd70      	pop	{r4, r5, r6, pc}
 800247e:	bf00      	nop

08002480 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop

08002488 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002488:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 800248c:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800248e:	604b      	str	r3, [r1, #4]
}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop

08002494 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002494:	2001      	movs	r0, #1
 8002496:	4770      	bx	lr

08002498 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002498:	2000      	movs	r0, #0
 800249a:	4770      	bx	lr

0800249c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800249c:	490d      	ldr	r1, [pc, #52]	@ (80024d4 <_sbrk+0x38>)
{
 800249e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a0:	4a0d      	ldr	r2, [pc, #52]	@ (80024d8 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80024a2:	6808      	ldr	r0, [r1, #0]
{
 80024a4:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a6:	4c0d      	ldr	r4, [pc, #52]	@ (80024dc <_sbrk+0x40>)
 80024a8:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80024aa:	b120      	cbz	r0, 80024b6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ac:	4403      	add	r3, r0
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d807      	bhi.n	80024c2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80024b2:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80024b4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80024b6:	4c0a      	ldr	r4, [pc, #40]	@ (80024e0 <_sbrk+0x44>)
 80024b8:	4620      	mov	r0, r4
 80024ba:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80024bc:	4403      	add	r3, r0
 80024be:	4293      	cmp	r3, r2
 80024c0:	d9f7      	bls.n	80024b2 <_sbrk+0x16>
    errno = ENOMEM;
 80024c2:	f008 fa59 	bl	800a978 <__errno>
 80024c6:	220c      	movs	r2, #12
 80024c8:	4603      	mov	r3, r0
    return (void *)-1;
 80024ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOMEM;
 80024ce:	601a      	str	r2, [r3, #0]
}
 80024d0:	bd10      	pop	{r4, pc}
 80024d2:	bf00      	nop
 80024d4:	2406f458 	.word	0x2406f458
 80024d8:	24080000 	.word	0x24080000
 80024dc:	00000400 	.word	0x00000400
 80024e0:	2406f5b0 	.word	0x2406f5b0

080024e4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024e4:	4927      	ldr	r1, [pc, #156]	@ (8002584 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024e6:	4a28      	ldr	r2, [pc, #160]	@ (8002588 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024e8:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80024ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 80024f0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024f6:	6813      	ldr	r3, [r2, #0]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	2b06      	cmp	r3, #6
 80024fe:	d805      	bhi.n	800250c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002500:	6813      	ldr	r3, [r2, #0]
 8002502:	f023 030f 	bic.w	r3, r3, #15
 8002506:	f043 0307 	orr.w	r3, r3, #7
 800250a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800250c:	4b1f      	ldr	r3, [pc, #124]	@ (800258c <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800250e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002510:	4a1f      	ldr	r2, [pc, #124]	@ (8002590 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8002512:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002514:	481c      	ldr	r0, [pc, #112]	@ (8002588 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8002516:	f041 0101 	orr.w	r1, r1, #1
 800251a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800251c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	400a      	ands	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002524:	6803      	ldr	r3, [r0, #0]
 8002526:	071b      	lsls	r3, r3, #28
 8002528:	d505      	bpl.n	8002536 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800252a:	6803      	ldr	r3, [r0, #0]
 800252c:	f023 030f 	bic.w	r3, r3, #15
 8002530:	f043 0307 	orr.w	r3, r3, #7
 8002534:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002536:	4b15      	ldr	r3, [pc, #84]	@ (800258c <SystemInit+0xa8>)
 8002538:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800253a:	4916      	ldr	r1, [pc, #88]	@ (8002594 <SystemInit+0xb0>)
  RCC->PLLCFGR = 0x01FF0000;
 800253c:	4816      	ldr	r0, [pc, #88]	@ (8002598 <SystemInit+0xb4>)
  RCC->PLLCKSELR = 0x02020200;
 800253e:	4c17      	ldr	r4, [pc, #92]	@ (800259c <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8002540:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8002542:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8002544:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8002546:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8002548:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800254a:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800254c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800254e:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002550:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002552:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002554:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002556:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002558:	4811      	ldr	r0, [pc, #68]	@ (80025a0 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 800255a:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800255e:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8002560:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002562:	6803      	ldr	r3, [r0, #0]
 8002564:	f36f 030f 	bfc	r3, #0, #16
 8002568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800256c:	d203      	bcs.n	8002576 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800256e:	4b0d      	ldr	r3, [pc, #52]	@ (80025a4 <SystemInit+0xc0>)
 8002570:	2201      	movs	r2, #1
 8002572:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <SystemInit+0xc4>)
 8002578:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800257c:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002580:	601a      	str	r2, [r3, #0]
}
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00
 8002588:	52002000 	.word	0x52002000
 800258c:	58024400 	.word	0x58024400
 8002590:	eaf6ed7f 	.word	0xeaf6ed7f
 8002594:	01010280 	.word	0x01010280
 8002598:	01ff0000 	.word	0x01ff0000
 800259c:	02020200 	.word	0x02020200
 80025a0:	5c001000 	.word	0x5c001000
 80025a4:	51008000 	.word	0x51008000
 80025a8:	52004000 	.word	0x52004000

080025ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025b0:	f7ff ff98 	bl	80024e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b4:	480c      	ldr	r0, [pc, #48]	@ (80025e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025b6:	490d      	ldr	r1, [pc, #52]	@ (80025ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025b8:	4a0d      	ldr	r2, [pc, #52]	@ (80025f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025bc:	e002      	b.n	80025c4 <LoopCopyDataInit>

080025be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025c2:	3304      	adds	r3, #4

080025c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c8:	d3f9      	bcc.n	80025be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ca:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025cc:	4c0a      	ldr	r4, [pc, #40]	@ (80025f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d0:	e001      	b.n	80025d6 <LoopFillZerobss>

080025d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d4:	3204      	adds	r2, #4

080025d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d8:	d3fb      	bcc.n	80025d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025da:	f008 f9d3 	bl	800a984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025de:	f7fe fe0f 	bl	8001200 <main>
  bx  lr
 80025e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80025e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025ec:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80025f0:	08083258 	.word	0x08083258
  ldr r2, =_sbss
 80025f4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80025f8:	2406f5ac 	.word	0x2406f5ac

080025fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC3_IRQHandler>
	...

08002600 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002600:	4b0f      	ldr	r3, [pc, #60]	@ (8002640 <HAL_InitTick+0x40>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b90b      	cbnz	r3, 800260a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8002606:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002608:	4770      	bx	lr
{
 800260a:	b510      	push	{r4, lr}
 800260c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800260e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002612:	4a0c      	ldr	r2, [pc, #48]	@ (8002644 <HAL_InitTick+0x44>)
 8002614:	fbb0 f3f3 	udiv	r3, r0, r3
 8002618:	6810      	ldr	r0, [r2, #0]
 800261a:	fbb0 f0f3 	udiv	r0, r0, r3
 800261e:	f000 ffe9 	bl	80035f4 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002622:	2c0f      	cmp	r4, #15
 8002624:	d800      	bhi.n	8002628 <HAL_InitTick+0x28>
 8002626:	b108      	cbz	r0, 800262c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8002628:	2001      	movs	r0, #1
}
 800262a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800262c:	2200      	movs	r2, #0
 800262e:	4621      	mov	r1, r4
 8002630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002634:	f000 ff94 	bl	8003560 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002638:	4b03      	ldr	r3, [pc, #12]	@ (8002648 <HAL_InitTick+0x48>)
 800263a:	2000      	movs	r0, #0
 800263c:	601c      	str	r4, [r3, #0]
}
 800263e:	bd10      	pop	{r4, pc}
 8002640:	24000014 	.word	0x24000014
 8002644:	24000010 	.word	0x24000010
 8002648:	24000018 	.word	0x24000018

0800264c <HAL_Init>:
{
 800264c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264e:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002650:	4c12      	ldr	r4, [pc, #72]	@ (800269c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002652:	f000 ff73 	bl	800353c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002656:	f003 fab5 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 800265a:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <HAL_Init+0x54>)
 800265c:	4911      	ldr	r1, [pc, #68]	@ (80026a4 <HAL_Init+0x58>)
 800265e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002660:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002662:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002666:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800266a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800266c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800266e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8002672:	490d      	ldr	r1, [pc, #52]	@ (80026a8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002674:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002678:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800267a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800267e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002680:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002682:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002684:	f7ff ffbc 	bl	8002600 <HAL_InitTick>
 8002688:	b110      	cbz	r0, 8002690 <HAL_Init+0x44>
    return HAL_ERROR;
 800268a:	2401      	movs	r4, #1
}
 800268c:	4620      	mov	r0, r4
 800268e:	bd10      	pop	{r4, pc}
 8002690:	4604      	mov	r4, r0
  HAL_MspInit();
 8002692:	f7ff fc57 	bl	8001f44 <HAL_MspInit>
}
 8002696:	4620      	mov	r0, r4
 8002698:	bd10      	pop	{r4, pc}
 800269a:	bf00      	nop
 800269c:	2400000c 	.word	0x2400000c
 80026a0:	58024400 	.word	0x58024400
 80026a4:	0806fbc4 	.word	0x0806fbc4
 80026a8:	24000010 	.word	0x24000010

080026ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80026ac:	4a03      	ldr	r2, [pc, #12]	@ (80026bc <HAL_IncTick+0x10>)
 80026ae:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <HAL_IncTick+0x14>)
 80026b0:	6811      	ldr	r1, [r2, #0]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	440b      	add	r3, r1
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	2406f45c 	.word	0x2406f45c
 80026c0:	24000014 	.word	0x24000014

080026c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80026c4:	4b01      	ldr	r3, [pc, #4]	@ (80026cc <HAL_GetTick+0x8>)
 80026c6:	6818      	ldr	r0, [r3, #0]
}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	2406f45c 	.word	0x2406f45c

080026d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80026d0:	4b01      	ldr	r3, [pc, #4]	@ (80026d8 <HAL_GetREVID+0x8>)
 80026d2:	6818      	ldr	r0, [r3, #0]
}
 80026d4:	0c00      	lsrs	r0, r0, #16
 80026d6:	4770      	bx	lr
 80026d8:	5c001000 	.word	0x5c001000

080026dc <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026dc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80026de:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026e0:	f7fe fca4 	bl	800102c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026e4:	bd08      	pop	{r3, pc}
 80026e6:	bf00      	nop

080026e8 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop

080026ec <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop

080026f0 <HAL_ADC_IRQHandler>:
{
 80026f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026f2:	4a8e      	ldr	r2, [pc, #568]	@ (800292c <HAL_ADC_IRQHandler+0x23c>)
{
 80026f4:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80026f6:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026f8:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 80026fa:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80026fc:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026fe:	f000 8095 	beq.w	800282c <HAL_ADC_IRQHandler+0x13c>
 8002702:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002706:	4293      	cmp	r3, r2
 8002708:	f000 8090 	beq.w	800282c <HAL_ADC_IRQHandler+0x13c>
 800270c:	4a88      	ldr	r2, [pc, #544]	@ (8002930 <HAL_ADC_IRQHandler+0x240>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800270e:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002710:	07a9      	lsls	r1, r5, #30
 8002712:	f007 071f 	and.w	r7, r7, #31
 8002716:	d502      	bpl.n	800271e <HAL_ADC_IRQHandler+0x2e>
 8002718:	07b2      	lsls	r2, r6, #30
 800271a:	f100 80aa 	bmi.w	8002872 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800271e:	0769      	lsls	r1, r5, #29
 8002720:	d579      	bpl.n	8002816 <HAL_ADC_IRQHandler+0x126>
 8002722:	0772      	lsls	r2, r6, #29
 8002724:	d577      	bpl.n	8002816 <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002726:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002728:	06d2      	lsls	r2, r2, #27
 800272a:	d403      	bmi.n	8002734 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800272c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800272e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002732:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800273a:	d11c      	bne.n	8002776 <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800273c:	4a7d      	ldr	r2, [pc, #500]	@ (8002934 <HAL_ADC_IRQHandler+0x244>)
 800273e:	4293      	cmp	r3, r2
 8002740:	f000 80e7 	beq.w	8002912 <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002744:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002746:	0491      	lsls	r1, r2, #18
 8002748:	d415      	bmi.n	8002776 <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	0712      	lsls	r2, r2, #28
 800274e:	d512      	bpl.n	8002776 <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	0750      	lsls	r0, r2, #29
 8002754:	f100 80f2 	bmi.w	800293c <HAL_ADC_IRQHandler+0x24c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	f022 020c 	bic.w	r2, r2, #12
 800275e:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002760:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002762:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002766:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002768:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800276a:	04d9      	lsls	r1, r3, #19
 800276c:	d403      	bmi.n	8002776 <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800276e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002776:	4620      	mov	r0, r4
 8002778:	f7fe fc78 	bl	800106c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	220c      	movs	r2, #12
 8002780:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002782:	06aa      	lsls	r2, r5, #26
 8002784:	d54d      	bpl.n	8002822 <HAL_ADC_IRQHandler+0x132>
 8002786:	06b0      	lsls	r0, r6, #26
 8002788:	d54b      	bpl.n	8002822 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800278a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800278c:	06d0      	lsls	r0, r2, #27
 800278e:	d403      	bmi.n	8002798 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002790:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002792:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002796:	6562      	str	r2, [r4, #84]	@ 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002798:	4966      	ldr	r1, [pc, #408]	@ (8002934 <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800279a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800279c:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800279e:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80027a0:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
 80027a4:	d073      	beq.n	800288e <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027a6:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027a8:	b9d2      	cbnz	r2, 80027e0 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80027aa:	018a      	lsls	r2, r1, #6
 80027ac:	f100 80a9 	bmi.w	8002902 <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	0650      	lsls	r0, r2, #25
 80027b4:	d514      	bpl.n	80027e0 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80027b6:	0289      	lsls	r1, r1, #10
 80027b8:	d412      	bmi.n	80027e0 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	0712      	lsls	r2, r2, #28
 80027be:	f100 80c8 	bmi.w	8002952 <HAL_ADC_IRQHandler+0x262>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027c8:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80027ca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80027cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027d0:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80027d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80027d4:	05d8      	lsls	r0, r3, #23
 80027d6:	d403      	bmi.n	80027e0 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027e0:	4620      	mov	r0, r4
 80027e2:	f000 fe3f 	bl	8003464 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	2260      	movs	r2, #96	@ 0x60
 80027ea:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80027ec:	0629      	lsls	r1, r5, #24
 80027ee:	d501      	bpl.n	80027f4 <HAL_ADC_IRQHandler+0x104>
 80027f0:	0632      	lsls	r2, r6, #24
 80027f2:	d45f      	bmi.n	80028b4 <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80027f4:	05e8      	lsls	r0, r5, #23
 80027f6:	d501      	bpl.n	80027fc <HAL_ADC_IRQHandler+0x10c>
 80027f8:	05f1      	lsls	r1, r6, #23
 80027fa:	d466      	bmi.n	80028ca <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80027fc:	05aa      	lsls	r2, r5, #22
 80027fe:	d501      	bpl.n	8002804 <HAL_ADC_IRQHandler+0x114>
 8002800:	05b0      	lsls	r0, r6, #22
 8002802:	d44b      	bmi.n	800289c <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002804:	06e9      	lsls	r1, r5, #27
 8002806:	d501      	bpl.n	800280c <HAL_ADC_IRQHandler+0x11c>
 8002808:	06f2      	lsls	r2, r6, #27
 800280a:	d411      	bmi.n	8002830 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800280c:	0569      	lsls	r1, r5, #21
 800280e:	d501      	bpl.n	8002814 <HAL_ADC_IRQHandler+0x124>
 8002810:	0572      	lsls	r2, r6, #21
 8002812:	d466      	bmi.n	80028e2 <HAL_ADC_IRQHandler+0x1f2>
}
 8002814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002816:	0728      	lsls	r0, r5, #28
 8002818:	d5b3      	bpl.n	8002782 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800281a:	0731      	lsls	r1, r6, #28
 800281c:	d483      	bmi.n	8002726 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800281e:	06aa      	lsls	r2, r5, #26
 8002820:	d4b1      	bmi.n	8002786 <HAL_ADC_IRQHandler+0x96>
 8002822:	0669      	lsls	r1, r5, #25
 8002824:	d5e2      	bpl.n	80027ec <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002826:	0672      	lsls	r2, r6, #25
 8002828:	d5e0      	bpl.n	80027ec <HAL_ADC_IRQHandler+0xfc>
 800282a:	e7ae      	b.n	800278a <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800282c:	4a42      	ldr	r2, [pc, #264]	@ (8002938 <HAL_ADC_IRQHandler+0x248>)
 800282e:	e76e      	b.n	800270e <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002830:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002832:	b17a      	cbz	r2, 8002854 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002834:	2f00      	cmp	r7, #0
 8002836:	d075      	beq.n	8002924 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002838:	4a3c      	ldr	r2, [pc, #240]	@ (800292c <HAL_ADC_IRQHandler+0x23c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	f000 8087 	beq.w	800294e <HAL_ADC_IRQHandler+0x25e>
 8002840:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002844:	4293      	cmp	r3, r2
 8002846:	f000 8082 	beq.w	800294e <HAL_ADC_IRQHandler+0x25e>
 800284a:	4a39      	ldr	r2, [pc, #228]	@ (8002930 <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800284c:	6892      	ldr	r2, [r2, #8]
 800284e:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 8002852:	d00b      	beq.n	800286c <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002854:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_ADC_ErrorCallback(hadc);
 8002856:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002858:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800285c:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800285e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 8002866:	f7ff ff41 	bl	80026ec <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	2210      	movs	r2, #16
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e7cc      	b.n	800280c <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002872:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002874:	06d8      	lsls	r0, r3, #27
 8002876:	d403      	bmi.n	8002880 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002878:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800287a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800287e:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002880:	4620      	mov	r0, r4
 8002882:	f000 fdf7 	bl	8003474 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	2202      	movs	r2, #2
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e747      	b.n	800271e <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800288e:	21c1      	movs	r1, #193	@ 0xc1
 8002890:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002892:	07c9      	lsls	r1, r1, #31
 8002894:	d487      	bmi.n	80027a6 <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002896:	4925      	ldr	r1, [pc, #148]	@ (800292c <HAL_ADC_IRQHandler+0x23c>)
 8002898:	68c9      	ldr	r1, [r1, #12]
 800289a:	e785      	b.n	80027a8 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800289c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800289e:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a4:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028a6:	f000 fde3 	bl	8003470 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e7a7      	b.n	8002804 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028b6:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028be:	f7ff ff13 	bl	80026e8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e794      	b.n	80027f4 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028ca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028cc:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d2:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028d4:	f000 fdca 	bl	800346c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e78c      	b.n	80027fc <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80028e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80028e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80028e8:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80028ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028ee:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80028f0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80028f2:	f042 0208 	orr.w	r2, r2, #8
 80028f6:	65a2      	str	r2, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80028f8:	6019      	str	r1, [r3, #0]
}
 80028fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80028fe:	f000 bdb3 	b.w	8003468 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002902:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002906:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800290a:	4302      	orrs	r2, r0
 800290c:	f47f af68 	bne.w	80027e0 <HAL_ADC_IRQHandler+0xf0>
 8002910:	e74e      	b.n	80027b0 <HAL_ADC_IRQHandler+0xc0>
 8002912:	f240 2221 	movw	r2, #545	@ 0x221
 8002916:	40fa      	lsrs	r2, r7
 8002918:	07d0      	lsls	r0, r2, #31
 800291a:	f53f af13 	bmi.w	8002744 <HAL_ADC_IRQHandler+0x54>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800291e:	4a03      	ldr	r2, [pc, #12]	@ (800292c <HAL_ADC_IRQHandler+0x23c>)
 8002920:	68d2      	ldr	r2, [r2, #12]
 8002922:	e710      	b.n	8002746 <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	0790      	lsls	r0, r2, #30
 8002928:	d0a0      	beq.n	800286c <HAL_ADC_IRQHandler+0x17c>
 800292a:	e793      	b.n	8002854 <HAL_ADC_IRQHandler+0x164>
 800292c:	40022000 	.word	0x40022000
 8002930:	58026300 	.word	0x58026300
 8002934:	40022100 	.word	0x40022100
 8002938:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800293e:	f043 0310 	orr.w	r3, r3, #16
 8002942:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002944:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800294c:	e713      	b.n	8002776 <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800294e:	4a05      	ldr	r2, [pc, #20]	@ (8002964 <HAL_ADC_IRQHandler+0x274>)
 8002950:	e77c      	b.n	800284c <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002952:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002954:	f043 0310 	orr.w	r3, r3, #16
 8002958:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002962:	e73d      	b.n	80027e0 <HAL_ADC_IRQHandler+0xf0>
 8002964:	40022300 	.word	0x40022300

08002968 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002968:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800296a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800296c:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002970:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
{
 8002972:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002974:	d11d      	bne.n	80029b2 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002976:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800297c:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800297e:	680a      	ldr	r2, [r1, #0]
 8002980:	f012 0f08 	tst.w	r2, #8
 8002984:	68ca      	ldr	r2, [r1, #12]
 8002986:	d01b      	beq.n	80029c0 <ADC_DMAConvCplt+0x58>
 8002988:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800298c:	d10d      	bne.n	80029aa <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800298e:	68ca      	ldr	r2, [r1, #12]
 8002990:	0494      	lsls	r4, r2, #18
 8002992:	d40a      	bmi.n	80029aa <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002994:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002996:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800299c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800299e:	04d1      	lsls	r1, r2, #19
 80029a0:	d403      	bmi.n	80029aa <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fb5e 	bl	800106c <HAL_ADC_ConvCpltCallback>
}
 80029b0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029b2:	06d2      	lsls	r2, r2, #27
 80029b4:	d40a      	bmi.n	80029cc <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80029b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029be:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80029c0:	0790      	lsls	r0, r2, #30
 80029c2:	d0e7      	beq.n	8002994 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe fb51 	bl	800106c <HAL_ADC_ConvCpltCallback>
 80029ca:	e7f1      	b.n	80029b0 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fe8d 	bl	80026ec <HAL_ADC_ErrorCallback>
}
 80029d2:	bd10      	pop	{r4, pc}

080029d4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029d4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80029d6:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029d8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80029da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029de:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029e0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029e8:	f7ff fe80 	bl	80026ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029ec:	bd08      	pop	{r3, pc}
 80029ee:	bf00      	nop

080029f0 <HAL_ADC_ConfigChannel>:
{
 80029f0:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80029f2:	2200      	movs	r2, #0
{
 80029f4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80029f6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80029f8:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 80029fc:	2a01      	cmp	r2, #1
 80029fe:	f000 80ef 	beq.w	8002be0 <HAL_ADC_ConfigChannel+0x1f0>
 8002a02:	2401      	movs	r4, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a04:	6802      	ldr	r2, [r0, #0]
 8002a06:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002a08:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a0c:	6890      	ldr	r0, [r2, #8]
 8002a0e:	0745      	lsls	r5, r0, #29
 8002a10:	d509      	bpl.n	8002a26 <HAL_ADC_ConfigChannel+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8002a14:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a16:	f042 0220 	orr.w	r2, r2, #32
 8002a1a:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8002a22:	b002      	add	sp, #8
 8002a24:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002a26:	680d      	ldr	r5, [r1, #0]
 8002a28:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a2a:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002a2e:	db0d      	blt.n	8002a4c <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a30:	f3c5 0613 	ubfx	r6, r5, #0, #20
 8002a34:	2e00      	cmp	r6, #0
 8002a36:	f000 80c1 	beq.w	8002bbc <HAL_ADC_ConfigChannel+0x1cc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a3e:	b115      	cbz	r5, 8002a46 <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002a40:	fab5 f585 	clz	r5, r5
 8002a44:	40ac      	lsls	r4, r5
 8002a46:	69d5      	ldr	r5, [r2, #28]
 8002a48:	432c      	orrs	r4, r5
 8002a4a:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a4c:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8002a4e:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a52:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8002a56:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a5a:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8002a5c:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a60:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8002a64:	fa0c fc04 	lsl.w	ip, ip, r4
 8002a68:	40a0      	lsls	r0, r4
 8002a6a:	f85e 4005 	ldr.w	r4, [lr, r5]
 8002a6e:	ea24 0c0c 	bic.w	ip, r4, ip
 8002a72:	ea4c 0000 	orr.w	r0, ip, r0
 8002a76:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a7a:	6890      	ldr	r0, [r2, #8]
 8002a7c:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a80:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a84:	0700      	lsls	r0, r0, #28
 8002a86:	d542      	bpl.n	8002b0e <HAL_ADC_ConfigChannel+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a88:	6890      	ldr	r0, [r2, #8]
 8002a8a:	07c6      	lsls	r6, r0, #31
 8002a8c:	d43d      	bmi.n	8002b0a <HAL_ADC_ConfigChannel+0x11a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a8e:	68cd      	ldr	r5, [r1, #12]
 8002a90:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8002a92:	f005 0618 	and.w	r6, r5, #24
 8002a96:	48a9      	ldr	r0, [pc, #676]	@ (8002d3c <HAL_ADC_ConfigChannel+0x34c>)
 8002a98:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8002a9c:	40f0      	lsrs	r0, r6
 8002a9e:	f3c4 0613 	ubfx	r6, r4, #0, #20
 8002aa2:	4020      	ands	r0, r4
 8002aa4:	ea21 0106 	bic.w	r1, r1, r6
 8002aa8:	4301      	orrs	r1, r0
 8002aaa:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002aae:	49a4      	ldr	r1, [pc, #656]	@ (8002d40 <HAL_ADC_ConfigChannel+0x350>)
 8002ab0:	428d      	cmp	r5, r1
 8002ab2:	f000 808a 	beq.w	8002bca <HAL_ADC_ConfigChannel+0x1da>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ab6:	2c00      	cmp	r4, #0
 8002ab8:	da27      	bge.n	8002b0a <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aba:	49a2      	ldr	r1, [pc, #648]	@ (8002d44 <HAL_ADC_ConfigChannel+0x354>)
 8002abc:	428a      	cmp	r2, r1
 8002abe:	f000 80bd 	beq.w	8002c3c <HAL_ADC_ConfigChannel+0x24c>
 8002ac2:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8002ac6:	428a      	cmp	r2, r1
 8002ac8:	f000 80b8 	beq.w	8002c3c <HAL_ADC_ConfigChannel+0x24c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002acc:	489e      	ldr	r0, [pc, #632]	@ (8002d48 <HAL_ADC_ConfigChannel+0x358>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ace:	499f      	ldr	r1, [pc, #636]	@ (8002d4c <HAL_ADC_ConfigChannel+0x35c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ad0:	6886      	ldr	r6, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ad2:	688d      	ldr	r5, [r1, #8]
 8002ad4:	07ed      	lsls	r5, r5, #31
 8002ad6:	d49c      	bmi.n	8002a12 <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ad8:	4d9d      	ldr	r5, [pc, #628]	@ (8002d50 <HAL_ADC_ConfigChannel+0x360>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ada:	f006 7ce0 	and.w	ip, r6, #29360128	@ 0x1c00000
 8002ade:	42ac      	cmp	r4, r5
 8002ae0:	f000 8156 	beq.w	8002d90 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ae4:	4d9b      	ldr	r5, [pc, #620]	@ (8002d54 <HAL_ADC_ConfigChannel+0x364>)
 8002ae6:	42ac      	cmp	r4, r5
 8002ae8:	f000 8118 	beq.w	8002d1c <HAL_ADC_ConfigChannel+0x32c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002aec:	4d9a      	ldr	r5, [pc, #616]	@ (8002d58 <HAL_ADC_ConfigChannel+0x368>)
 8002aee:	42ac      	cmp	r4, r5
 8002af0:	d10b      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 8002af2:	0274      	lsls	r4, r6, #9
 8002af4:	d409      	bmi.n	8002b0a <HAL_ADC_ConfigChannel+0x11a>
 8002af6:	428a      	cmp	r2, r1
 8002af8:	d107      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002afa:	6882      	ldr	r2, [r0, #8]
 8002afc:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002b00:	ea42 020c 	orr.w	r2, r2, ip
 8002b04:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002b08:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	e786      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b0e:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b10:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 8002b14:	f04f 0e07 	mov.w	lr, #7
 8002b18:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b1a:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8002b1c:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b20:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8002b24:	fa0e fe04 	lsl.w	lr, lr, r4
 8002b28:	fa06 f404 	lsl.w	r4, r6, r4
 8002b2c:	f85c 0005 	ldr.w	r0, [ip, r5]
 8002b30:	ea20 000e 	bic.w	r0, r0, lr
 8002b34:	4320      	orrs	r0, r4
 8002b36:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b3a:	4888      	ldr	r0, [pc, #544]	@ (8002d5c <HAL_ADC_ConfigChannel+0x36c>)
 8002b3c:	694d      	ldr	r5, [r1, #20]
 8002b3e:	6800      	ldr	r0, [r0, #0]
 8002b40:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8002b44:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8002b48:	68d0      	ldr	r0, [r2, #12]
 8002b4a:	d039      	beq.n	8002bc0 <HAL_ADC_ConfigChannel+0x1d0>
 8002b4c:	f010 0f10 	tst.w	r0, #16
 8002b50:	68d0      	ldr	r0, [r2, #12]
 8002b52:	d035      	beq.n	8002bc0 <HAL_ADC_ConfigChannel+0x1d0>
 8002b54:	0840      	lsrs	r0, r0, #1
 8002b56:	f000 0008 	and.w	r0, r0, #8
 8002b5a:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b5c:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b5e:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b60:	2e04      	cmp	r6, #4
 8002b62:	d040      	beq.n	8002be6 <HAL_ADC_ConfigChannel+0x1f6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b64:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8002b68:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 8002b6c:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 8002b70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8002b74:	4320      	orrs	r0, r4
 8002b76:	4328      	orrs	r0, r5
 8002b78:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002b7c:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b7e:	690d      	ldr	r5, [r1, #16]
 8002b80:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b84:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 8002b88:	fab4 f484 	clz	r4, r4
 8002b8c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002b90:	0964      	lsrs	r4, r4, #5
 8002b92:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 8002b96:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002b9a:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b9c:	690d      	ldr	r5, [r1, #16]
 8002b9e:	f1a0 0001 	sub.w	r0, r0, #1
 8002ba2:	6914      	ldr	r4, [r2, #16]
 8002ba4:	f005 051f 	and.w	r5, r5, #31
 8002ba8:	fab0 f080 	clz	r0, r0
 8002bac:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 8002bb0:	0940      	lsrs	r0, r0, #5
 8002bb2:	02c0      	lsls	r0, r0, #11
 8002bb4:	40a8      	lsls	r0, r5
 8002bb6:	4320      	orrs	r0, r4
 8002bb8:	6110      	str	r0, [r2, #16]
}
 8002bba:	e765      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002bbc:	4084      	lsls	r4, r0
 8002bbe:	e742      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bc0:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8002bc4:	0040      	lsls	r0, r0, #1
 8002bc6:	4085      	lsls	r5, r0
 8002bc8:	e7c8      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x16c>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002bca:	495e      	ldr	r1, [pc, #376]	@ (8002d44 <HAL_ADC_ConfigChannel+0x354>)
 8002bcc:	428a      	cmp	r2, r1
 8002bce:	d07a      	beq.n	8002cc6 <HAL_ADC_ConfigChannel+0x2d6>
 8002bd0:	4963      	ldr	r1, [pc, #396]	@ (8002d60 <HAL_ADC_ConfigChannel+0x370>)
 8002bd2:	428a      	cmp	r2, r1
 8002bd4:	d040      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002bd6:	69d1      	ldr	r1, [r2, #28]
 8002bd8:	f041 0101 	orr.w	r1, r1, #1
 8002bdc:	61d1      	str	r1, [r2, #28]
}
 8002bde:	e76a      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8002be0:	2002      	movs	r0, #2
}
 8002be2:	b002      	add	sp, #8
 8002be4:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002be6:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8002be8:	0684      	lsls	r4, r0, #26
 8002bea:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8002bee:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 8002bf2:	d014      	beq.n	8002c1e <HAL_ADC_ConfigChannel+0x22e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bf4:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8002bf6:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002bfa:	4284      	cmp	r4, r0
 8002bfc:	d019      	beq.n	8002c32 <HAL_ADC_ConfigChannel+0x242>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bfe:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8002c00:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002c04:	4284      	cmp	r4, r0
 8002c06:	d00f      	beq.n	8002c28 <HAL_ADC_ConfigChannel+0x238>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c08:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8002c0a:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002c0e:	4284      	cmp	r4, r0
 8002c10:	f47f af3a 	bne.w	8002a88 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c14:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8002c16:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002c1a:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8002c1c:	e734      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c1e:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8002c20:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002c24:	6610      	str	r0, [r2, #96]	@ 0x60
 8002c26:	e7e5      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x204>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c28:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8002c2a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002c2e:	6690      	str	r0, [r2, #104]	@ 0x68
 8002c30:	e7ea      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x218>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c32:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8002c34:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002c38:	6650      	str	r0, [r2, #100]	@ 0x64
 8002c3a:	e7e0      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x20e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c3c:	4949      	ldr	r1, [pc, #292]	@ (8002d64 <HAL_ADC_ConfigChannel+0x374>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c3e:	4a41      	ldr	r2, [pc, #260]	@ (8002d44 <HAL_ADC_ConfigChannel+0x354>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c40:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c42:	6892      	ldr	r2, [r2, #8]
 8002c44:	f012 0f01 	tst.w	r2, #1
 8002c48:	4a45      	ldr	r2, [pc, #276]	@ (8002d60 <HAL_ADC_ConfigChannel+0x370>)
 8002c4a:	6892      	ldr	r2, [r2, #8]
 8002c4c:	f47f aee1 	bne.w	8002a12 <HAL_ADC_ConfigChannel+0x22>
 8002c50:	07d2      	lsls	r2, r2, #31
 8002c52:	f53f aede 	bmi.w	8002a12 <HAL_ADC_ConfigChannel+0x22>
 8002c56:	e758      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002c58:	4943      	ldr	r1, [pc, #268]	@ (8002d68 <HAL_ADC_ConfigChannel+0x378>)
 8002c5a:	428c      	cmp	r4, r1
 8002c5c:	d058      	beq.n	8002d10 <HAL_ADC_ConfigChannel+0x320>
 8002c5e:	4943      	ldr	r1, [pc, #268]	@ (8002d6c <HAL_ADC_ConfigChannel+0x37c>)
 8002c60:	428c      	cmp	r4, r1
 8002c62:	d057      	beq.n	8002d14 <HAL_ADC_ConfigChannel+0x324>
 8002c64:	4942      	ldr	r1, [pc, #264]	@ (8002d70 <HAL_ADC_ConfigChannel+0x380>)
 8002c66:	428c      	cmp	r4, r1
 8002c68:	f000 80b5 	beq.w	8002dd6 <HAL_ADC_ConfigChannel+0x3e6>
 8002c6c:	4941      	ldr	r1, [pc, #260]	@ (8002d74 <HAL_ADC_ConfigChannel+0x384>)
 8002c6e:	428c      	cmp	r4, r1
 8002c70:	f000 80b3 	beq.w	8002dda <HAL_ADC_ConfigChannel+0x3ea>
 8002c74:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8002c78:	3110      	adds	r1, #16
 8002c7a:	428c      	cmp	r4, r1
 8002c7c:	f000 80af 	beq.w	8002dde <HAL_ADC_ConfigChannel+0x3ee>
 8002c80:	493d      	ldr	r1, [pc, #244]	@ (8002d78 <HAL_ADC_ConfigChannel+0x388>)
 8002c82:	428c      	cmp	r4, r1
 8002c84:	f000 80ad 	beq.w	8002de2 <HAL_ADC_ConfigChannel+0x3f2>
 8002c88:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8002c8c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8002c90:	428c      	cmp	r4, r1
 8002c92:	f000 80a8 	beq.w	8002de6 <HAL_ADC_ConfigChannel+0x3f6>
 8002c96:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8002c9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c9e:	428c      	cmp	r4, r1
 8002ca0:	f000 80a3 	beq.w	8002dea <HAL_ADC_ConfigChannel+0x3fa>
 8002ca4:	4935      	ldr	r1, [pc, #212]	@ (8002d7c <HAL_ADC_ConfigChannel+0x38c>)
 8002ca6:	428c      	cmp	r4, r1
 8002ca8:	d195      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x1e6>
 8002caa:	4935      	ldr	r1, [pc, #212]	@ (8002d80 <HAL_ADC_ConfigChannel+0x390>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8002cb0:	2900      	cmp	r1, #0
 8002cb2:	d031      	beq.n	8002d18 <HAL_ADC_ConfigChannel+0x328>
  return __builtin_clz(value);
 8002cb4:	fab1 f181 	clz	r1, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002cb8:	2001      	movs	r0, #1
 8002cba:	fa00 f101 	lsl.w	r1, r0, r1
 8002cbe:	69d0      	ldr	r0, [r2, #28]
 8002cc0:	4301      	orrs	r1, r0
 8002cc2:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cc4:	e721      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002cc6:	4928      	ldr	r1, [pc, #160]	@ (8002d68 <HAL_ADC_ConfigChannel+0x378>)
 8002cc8:	428c      	cmp	r4, r1
 8002cca:	d021      	beq.n	8002d10 <HAL_ADC_ConfigChannel+0x320>
 8002ccc:	4927      	ldr	r1, [pc, #156]	@ (8002d6c <HAL_ADC_ConfigChannel+0x37c>)
 8002cce:	428c      	cmp	r4, r1
 8002cd0:	d020      	beq.n	8002d14 <HAL_ADC_ConfigChannel+0x324>
 8002cd2:	4927      	ldr	r1, [pc, #156]	@ (8002d70 <HAL_ADC_ConfigChannel+0x380>)
 8002cd4:	428c      	cmp	r4, r1
 8002cd6:	d07e      	beq.n	8002dd6 <HAL_ADC_ConfigChannel+0x3e6>
 8002cd8:	4926      	ldr	r1, [pc, #152]	@ (8002d74 <HAL_ADC_ConfigChannel+0x384>)
 8002cda:	428c      	cmp	r4, r1
 8002cdc:	d07d      	beq.n	8002dda <HAL_ADC_ConfigChannel+0x3ea>
 8002cde:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8002ce2:	3110      	adds	r1, #16
 8002ce4:	428c      	cmp	r4, r1
 8002ce6:	d07a      	beq.n	8002dde <HAL_ADC_ConfigChannel+0x3ee>
 8002ce8:	4923      	ldr	r1, [pc, #140]	@ (8002d78 <HAL_ADC_ConfigChannel+0x388>)
 8002cea:	428c      	cmp	r4, r1
 8002cec:	d079      	beq.n	8002de2 <HAL_ADC_ConfigChannel+0x3f2>
 8002cee:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8002cf2:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8002cf6:	428c      	cmp	r4, r1
 8002cf8:	d075      	beq.n	8002de6 <HAL_ADC_ConfigChannel+0x3f6>
 8002cfa:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8002cfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d02:	428c      	cmp	r4, r1
 8002d04:	d071      	beq.n	8002dea <HAL_ADC_ConfigChannel+0x3fa>
 8002d06:	491f      	ldr	r1, [pc, #124]	@ (8002d84 <HAL_ADC_ConfigChannel+0x394>)
 8002d08:	428c      	cmp	r4, r1
 8002d0a:	d1cb      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x2b4>
 8002d0c:	491e      	ldr	r1, [pc, #120]	@ (8002d88 <HAL_ADC_ConfigChannel+0x398>)
 8002d0e:	e7cd      	b.n	8002cac <HAL_ADC_ConfigChannel+0x2bc>
 8002d10:	2101      	movs	r1, #1
 8002d12:	e7cb      	b.n	8002cac <HAL_ADC_ConfigChannel+0x2bc>
 8002d14:	491d      	ldr	r1, [pc, #116]	@ (8002d8c <HAL_ADC_ConfigChannel+0x39c>)
 8002d16:	e7c9      	b.n	8002cac <HAL_ADC_ConfigChannel+0x2bc>
 8002d18:	2101      	movs	r1, #1
 8002d1a:	e7d0      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x2ce>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d1c:	01f5      	lsls	r5, r6, #7
 8002d1e:	f53f aef4 	bmi.w	8002b0a <HAL_ADC_ConfigChannel+0x11a>
 8002d22:	428a      	cmp	r2, r1
 8002d24:	f47f aef1 	bne.w	8002b0a <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d28:	6882      	ldr	r2, [r0, #8]
 8002d2a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002d2e:	ea42 020c 	orr.w	r2, r2, ip
 8002d32:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002d36:	6082      	str	r2, [r0, #8]
}
 8002d38:	e6e7      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x11a>
 8002d3a:	bf00      	nop
 8002d3c:	000fffff 	.word	0x000fffff
 8002d40:	47ff0000 	.word	0x47ff0000
 8002d44:	40022000 	.word	0x40022000
 8002d48:	58026300 	.word	0x58026300
 8002d4c:	58026000 	.word	0x58026000
 8002d50:	cb840000 	.word	0xcb840000
 8002d54:	c7520000 	.word	0xc7520000
 8002d58:	cfb80000 	.word	0xcfb80000
 8002d5c:	5c001000 	.word	0x5c001000
 8002d60:	40022100 	.word	0x40022100
 8002d64:	40022300 	.word	0x40022300
 8002d68:	04300002 	.word	0x04300002
 8002d6c:	08600004 	.word	0x08600004
 8002d70:	0c900008 	.word	0x0c900008
 8002d74:	10c00010 	.word	0x10c00010
 8002d78:	2a000400 	.word	0x2a000400
 8002d7c:	4b840000 	.word	0x4b840000
 8002d80:	4fb80000 	.word	0x4fb80000
 8002d84:	43210000 	.word	0x43210000
 8002d88:	47520000 	.word	0x47520000
 8002d8c:	19200040 	.word	0x19200040
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d90:	0236      	lsls	r6, r6, #8
 8002d92:	f53f aeba 	bmi.w	8002b0a <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d96:	428a      	cmp	r2, r1
 8002d98:	f47f aeb7 	bne.w	8002b0a <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d9c:	6882      	ldr	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d9e:	4914      	ldr	r1, [pc, #80]	@ (8002df0 <HAL_ADC_ConfigChannel+0x400>)
 8002da0:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002da4:	ea42 020c 	orr.w	r2, r2, ip
 8002da8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002dac:	6082      	str	r2, [r0, #8]
 8002dae:	680a      	ldr	r2, [r1, #0]
 8002db0:	4910      	ldr	r1, [pc, #64]	@ (8002df4 <HAL_ADC_ConfigChannel+0x404>)
 8002db2:	0992      	lsrs	r2, r2, #6
 8002db4:	fba1 1202 	umull	r1, r2, r1, r2
 8002db8:	0992      	lsrs	r2, r2, #6
 8002dba:	3201      	adds	r2, #1
 8002dbc:	0052      	lsls	r2, r2, #1
 8002dbe:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8002dc0:	9a01      	ldr	r2, [sp, #4]
 8002dc2:	2a00      	cmp	r2, #0
 8002dc4:	f43f aea1 	beq.w	8002b0a <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 8002dc8:	9a01      	ldr	r2, [sp, #4]
 8002dca:	3a01      	subs	r2, #1
 8002dcc:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8002dce:	9a01      	ldr	r2, [sp, #4]
 8002dd0:	2a00      	cmp	r2, #0
 8002dd2:	d1f9      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x3d8>
 8002dd4:	e699      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002dd6:	4908      	ldr	r1, [pc, #32]	@ (8002df8 <HAL_ADC_ConfigChannel+0x408>)
 8002dd8:	e768      	b.n	8002cac <HAL_ADC_ConfigChannel+0x2bc>
 8002dda:	4908      	ldr	r1, [pc, #32]	@ (8002dfc <HAL_ADC_ConfigChannel+0x40c>)
 8002ddc:	e766      	b.n	8002cac <HAL_ADC_ConfigChannel+0x2bc>
 8002dde:	4908      	ldr	r1, [pc, #32]	@ (8002e00 <HAL_ADC_ConfigChannel+0x410>)
 8002de0:	e764      	b.n	8002cac <HAL_ADC_ConfigChannel+0x2bc>
 8002de2:	4908      	ldr	r1, [pc, #32]	@ (8002e04 <HAL_ADC_ConfigChannel+0x414>)
 8002de4:	e762      	b.n	8002cac <HAL_ADC_ConfigChannel+0x2bc>
 8002de6:	4908      	ldr	r1, [pc, #32]	@ (8002e08 <HAL_ADC_ConfigChannel+0x418>)
 8002de8:	e760      	b.n	8002cac <HAL_ADC_ConfigChannel+0x2bc>
 8002dea:	4908      	ldr	r1, [pc, #32]	@ (8002e0c <HAL_ADC_ConfigChannel+0x41c>)
 8002dec:	e75e      	b.n	8002cac <HAL_ADC_ConfigChannel+0x2bc>
 8002dee:	bf00      	nop
 8002df0:	24000010 	.word	0x24000010
 8002df4:	053e2d63 	.word	0x053e2d63
 8002df8:	1d500080 	.word	0x1d500080
 8002dfc:	21800100 	.word	0x21800100
 8002e00:	25b00200 	.word	0x25b00200
 8002e04:	2e300800 	.word	0x2e300800
 8002e08:	32601000 	.word	0x32601000
 8002e0c:	36902000 	.word	0x36902000

08002e10 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e10:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	07d1      	lsls	r1, r2, #31
 8002e16:	d501      	bpl.n	8002e1c <ADC_Enable+0xc>
  return HAL_OK;
 8002e18:	2000      	movs	r0, #0
}
 8002e1a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e1c:	6899      	ldr	r1, [r3, #8]
 8002e1e:	4a23      	ldr	r2, [pc, #140]	@ (8002eac <ADC_Enable+0x9c>)
 8002e20:	4211      	tst	r1, r2
{
 8002e22:	b570      	push	{r4, r5, r6, lr}
 8002e24:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e26:	d12f      	bne.n	8002e88 <ADC_Enable+0x78>
  MODIFY_REG(ADCx->CR,
 8002e28:	6899      	ldr	r1, [r3, #8]
 8002e2a:	4a21      	ldr	r2, [pc, #132]	@ (8002eb0 <ADC_Enable+0xa0>)
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002e34:	f7ff fc46 	bl	80026c4 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002eb4 <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 8002e3c:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d02c      	beq.n	8002e9c <ADC_Enable+0x8c>
 8002e42:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d028      	beq.n	8002e9c <ADC_Enable+0x8c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e4a:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 8002e4e:	f502 4284 	add.w	r2, r2, #16896	@ 0x4200
 8002e52:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	07d2      	lsls	r2, r2, #31
 8002e58:	d414      	bmi.n	8002e84 <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 8002e5a:	4e15      	ldr	r6, [pc, #84]	@ (8002eb0 <ADC_Enable+0xa0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	07d0      	lsls	r0, r2, #31
 8002e60:	d404      	bmi.n	8002e6c <ADC_Enable+0x5c>
  MODIFY_REG(ADCx->CR,
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	4032      	ands	r2, r6
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e6c:	f7ff fc2a 	bl	80026c4 <HAL_GetTick>
 8002e70:	1b43      	subs	r3, r0, r5
 8002e72:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e74:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e76:	d902      	bls.n	8002e7e <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	07d1      	lsls	r1, r2, #31
 8002e7c:	d504      	bpl.n	8002e88 <ADC_Enable+0x78>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	07d2      	lsls	r2, r2, #31
 8002e82:	d5eb      	bpl.n	8002e5c <ADC_Enable+0x4c>
  return HAL_OK;
 8002e84:	2000      	movs	r0, #0
}
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e88:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8002e8a:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8c:	f043 0310 	orr.w	r3, r3, #16
 8002e90:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e9c:	4a06      	ldr	r2, [pc, #24]	@ (8002eb8 <ADC_Enable+0xa8>)
 8002e9e:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ea0:	06d6      	lsls	r6, r2, #27
 8002ea2:	d0d7      	beq.n	8002e54 <ADC_Enable+0x44>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ea4:	4a05      	ldr	r2, [pc, #20]	@ (8002ebc <ADC_Enable+0xac>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d1d4      	bne.n	8002e54 <ADC_Enable+0x44>
 8002eaa:	e7eb      	b.n	8002e84 <ADC_Enable+0x74>
 8002eac:	8000003f 	.word	0x8000003f
 8002eb0:	7fffffc0 	.word	0x7fffffc0
 8002eb4:	40022000 	.word	0x40022000
 8002eb8:	40022300 	.word	0x40022300
 8002ebc:	40022100 	.word	0x40022100

08002ec0 <HAL_ADC_Start_DMA>:
{
 8002ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb4 <HAL_ADC_Start_DMA+0xf4>)
{
 8002ec6:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ec8:	6800      	ldr	r0, [r0, #0]
{
 8002eca:	460e      	mov	r6, r1
 8002ecc:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ece:	4298      	cmp	r0, r3
 8002ed0:	d01c      	beq.n	8002f0c <HAL_ADC_Start_DMA+0x4c>
 8002ed2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ed6:	4298      	cmp	r0, r3
 8002ed8:	d018      	beq.n	8002f0c <HAL_ADC_Start_DMA+0x4c>
 8002eda:	4b37      	ldr	r3, [pc, #220]	@ (8002fb8 <HAL_ADC_Start_DMA+0xf8>)
 8002edc:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ede:	6885      	ldr	r5, [r0, #8]
 8002ee0:	f015 0504 	ands.w	r5, r5, #4
 8002ee4:	d118      	bne.n	8002f18 <HAL_ADC_Start_DMA+0x58>
    __HAL_LOCK(hadc);
 8002ee6:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8002eea:	2a01      	cmp	r2, #1
 8002eec:	d014      	beq.n	8002f18 <HAL_ADC_Start_DMA+0x58>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002eee:	f003 081f 	and.w	r8, r3, #31
 8002ef2:	f240 2321 	movw	r3, #545	@ 0x221
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	fa23 f308 	lsr.w	r3, r3, r8
 8002efc:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f00:	4003      	ands	r3, r0
 8002f02:	d10c      	bne.n	8002f1e <HAL_ADC_Start_DMA+0x5e>
      __HAL_UNLOCK(hadc);
 8002f04:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8002f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fbc <HAL_ADC_Start_DMA+0xfc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f10:	6885      	ldr	r5, [r0, #8]
 8002f12:	f015 0504 	ands.w	r5, r5, #4
 8002f16:	d0e6      	beq.n	8002ee6 <HAL_ADC_Start_DMA+0x26>
    __HAL_LOCK(hadc);
 8002f18:	2002      	movs	r0, #2
}
 8002f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f7ff ff76 	bl	8002e10 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002f24:	2800      	cmp	r0, #0
 8002f26:	d140      	bne.n	8002faa <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 8002f28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f2a:	4b25      	ldr	r3, [pc, #148]	@ (8002fc0 <HAL_ADC_Start_DMA+0x100>)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f2c:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8002f2e:	4013      	ands	r3, r2
 8002f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f34:	6563      	str	r3, [r4, #84]	@ 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f36:	f1b8 0f00 	cmp.w	r8, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_ADC_Start_DMA+0x82>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f3c:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <HAL_ADC_Start_DMA+0x104>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f3e:	4299      	cmp	r1, r3
 8002f40:	d003      	beq.n	8002f4a <HAL_ADC_Start_DMA+0x8a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f42:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002f44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002f48:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f4a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002f4c:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8002f50:	d02e      	beq.n	8002fb0 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f54:	f023 0306 	bic.w	r3, r3, #6
 8002f58:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f5a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f5c:	4632      	mov	r2, r6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f5e:	4d1a      	ldr	r5, [pc, #104]	@ (8002fc8 <HAL_ADC_Start_DMA+0x108>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f60:	463b      	mov	r3, r7
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002f62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f64:	3140      	adds	r1, #64	@ 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f66:	63c5      	str	r5, [r0, #60]	@ 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f68:	4d18      	ldr	r5, [pc, #96]	@ (8002fcc <HAL_ADC_Start_DMA+0x10c>)
 8002f6a:	6405      	str	r5, [r0, #64]	@ 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f6c:	4d18      	ldr	r5, [pc, #96]	@ (8002fd0 <HAL_ADC_Start_DMA+0x110>)
 8002f6e:	64c5      	str	r5, [r0, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f70:	251c      	movs	r5, #28
 8002f72:	f841 5c40 	str.w	r5, [r1, #-64]
        __HAL_UNLOCK(hadc);
 8002f76:	2500      	movs	r5, #0
 8002f78:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f7c:	f851 5c3c 	ldr.w	r5, [r1, #-60]
 8002f80:	f045 0510 	orr.w	r5, r5, #16
 8002f84:	f841 5c3c 	str.w	r5, [r1, #-60]
 8002f88:	f851 5c34 	ldr.w	r5, [r1, #-52]
 8002f8c:	f025 0503 	bic.w	r5, r5, #3
 8002f90:	4335      	orrs	r5, r6
 8002f92:	f841 5c34 	str.w	r5, [r1, #-52]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f96:	f001 f8bb 	bl	8004110 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f9a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd4 <HAL_ADC_Start_DMA+0x114>)
 8002f9e:	6891      	ldr	r1, [r2, #8]
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6093      	str	r3, [r2, #8]
}
 8002fa8:	e7b7      	b.n	8002f1a <HAL_ADC_Start_DMA+0x5a>
        __HAL_UNLOCK(hadc);
 8002faa:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8002fae:	e7b4      	b.n	8002f1a <HAL_ADC_Start_DMA+0x5a>
          ADC_CLEAR_ERRORCODE(hadc);
 8002fb0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002fb2:	e7d2      	b.n	8002f5a <HAL_ADC_Start_DMA+0x9a>
 8002fb4:	40022000 	.word	0x40022000
 8002fb8:	58026300 	.word	0x58026300
 8002fbc:	40022300 	.word	0x40022300
 8002fc0:	fffff0fe 	.word	0xfffff0fe
 8002fc4:	40022100 	.word	0x40022100
 8002fc8:	08002969 	.word	0x08002969
 8002fcc:	080026dd 	.word	0x080026dd
 8002fd0:	080029d5 	.word	0x080029d5
 8002fd4:	7fffffc0 	.word	0x7fffffc0

08002fd8 <ADC_Disable>:
{
 8002fd8:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fda:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	0795      	lsls	r5, r2, #30
 8002fe0:	d502      	bpl.n	8002fe8 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fe2:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8002fe4:	2000      	movs	r0, #0
}
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	07d4      	lsls	r4, r2, #31
 8002fec:	d5fa      	bpl.n	8002fe4 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	f002 020d 	and.w	r2, r2, #13
 8002ff6:	2a01      	cmp	r2, #1
 8002ff8:	d009      	beq.n	800300e <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8002ffc:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffe:	f043 0310 	orr.w	r3, r3, #16
 8003002:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003004:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 800300c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800300e:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003010:	2103      	movs	r1, #3
 8003012:	4a0d      	ldr	r2, [pc, #52]	@ (8003048 <ADC_Disable+0x70>)
 8003014:	4002      	ands	r2, r0
 8003016:	f042 0202 	orr.w	r2, r2, #2
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800301e:	f7ff fb51 	bl	80026c4 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003022:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003024:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	07d9      	lsls	r1, r3, #31
 800302a:	d403      	bmi.n	8003034 <ADC_Disable+0x5c>
 800302c:	e7da      	b.n	8002fe4 <ADC_Disable+0xc>
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	07db      	lsls	r3, r3, #31
 8003032:	d5d7      	bpl.n	8002fe4 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003034:	f7ff fb46 	bl	80026c4 <HAL_GetTick>
 8003038:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800303a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800303c:	2802      	cmp	r0, #2
 800303e:	d9f6      	bls.n	800302e <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	07d2      	lsls	r2, r2, #31
 8003044:	d5f3      	bpl.n	800302e <ADC_Disable+0x56>
 8003046:	e7d8      	b.n	8002ffa <ADC_Disable+0x22>
 8003048:	7fffffc0 	.word	0x7fffffc0

0800304c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800304c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800304e:	4a4f      	ldr	r2, [pc, #316]	@ (800318c <ADC_ConfigureBoostMode+0x140>)
{
 8003050:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003052:	6803      	ldr	r3, [r0, #0]
 8003054:	4293      	cmp	r3, r2
 8003056:	d024      	beq.n	80030a2 <ADC_ConfigureBoostMode+0x56>
 8003058:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800305c:	4293      	cmp	r3, r2
 800305e:	d020      	beq.n	80030a2 <ADC_ConfigureBoostMode+0x56>
 8003060:	4b4b      	ldr	r3, [pc, #300]	@ (8003190 <ADC_ConfigureBoostMode+0x144>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003068:	d020      	beq.n	80030ac <ADC_ConfigureBoostMode+0x60>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800306a:	f002 ff63 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800306e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8003070:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003076:	d06d      	beq.n	8003154 <ADC_ConfigureBoostMode+0x108>
 8003078:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800307c:	d072      	beq.n	8003164 <ADC_ConfigureBoostMode+0x118>
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003082:	d067      	beq.n	8003154 <ADC_ConfigureBoostMode+0x108>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003084:	f7ff fb24 	bl	80026d0 <HAL_GetREVID>
 8003088:	f241 0303 	movw	r3, #4099	@ 0x1003
 800308c:	4298      	cmp	r0, r3
 800308e:	d82d      	bhi.n	80030ec <ADC_ConfigureBoostMode+0xa0>
  {
    if (freq > 20000000UL)
 8003090:	4a40      	ldr	r2, [pc, #256]	@ (8003194 <ADC_ConfigureBoostMode+0x148>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003092:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 8003094:	4295      	cmp	r5, r2
 8003096:	d947      	bls.n	8003128 <ADC_ConfigureBoostMode+0xdc>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800309e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80030a0:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80030a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003198 <ADC_ConfigureBoostMode+0x14c>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80030aa:	d1de      	bne.n	800306a <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80030ac:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80030b0:	2100      	movs	r1, #0
 80030b2:	f004 fa13 	bl	80074dc <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80030b6:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80030b8:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80030ba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80030be:	d04d      	beq.n	800315c <ADC_ConfigureBoostMode+0x110>
 80030c0:	d825      	bhi.n	800310e <ADC_ConfigureBoostMode+0xc2>
 80030c2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80030c6:	d04b      	beq.n	8003160 <ADC_ConfigureBoostMode+0x114>
 80030c8:	d84e      	bhi.n	8003168 <ADC_ConfigureBoostMode+0x11c>
 80030ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ce:	d008      	beq.n	80030e2 <ADC_ConfigureBoostMode+0x96>
 80030d0:	d855      	bhi.n	800317e <ADC_ConfigureBoostMode+0x132>
 80030d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030d6:	d004      	beq.n	80030e2 <ADC_ConfigureBoostMode+0x96>
 80030d8:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80030dc:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80030e0:	d1d0      	bne.n	8003084 <ADC_ConfigureBoostMode+0x38>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80030e2:	0c9b      	lsrs	r3, r3, #18
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80030ea:	e7cb      	b.n	8003084 <ADC_ConfigureBoostMode+0x38>
    if (freq <= 6250000UL)
 80030ec:	4a2b      	ldr	r2, [pc, #172]	@ (800319c <ADC_ConfigureBoostMode+0x150>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030ee:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 80030f0:	4295      	cmp	r5, r2
 80030f2:	d923      	bls.n	800313c <ADC_ConfigureBoostMode+0xf0>
    else if (freq <= 12500000UL)
 80030f4:	4a2a      	ldr	r2, [pc, #168]	@ (80031a0 <ADC_ConfigureBoostMode+0x154>)
 80030f6:	4295      	cmp	r5, r2
 80030f8:	d925      	bls.n	8003146 <ADC_ConfigureBoostMode+0xfa>
    else if (freq <= 25000000UL)
 80030fa:	4a2a      	ldr	r2, [pc, #168]	@ (80031a4 <ADC_ConfigureBoostMode+0x158>)
 80030fc:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030fe:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8003100:	d839      	bhi.n	8003176 <ADC_ConfigureBoostMode+0x12a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003102:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800310a:	609a      	str	r2, [r3, #8]
}
 800310c:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 800310e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003112:	d02e      	beq.n	8003172 <ADC_ConfigureBoostMode+0x126>
 8003114:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003118:	d1b4      	bne.n	8003084 <ADC_ConfigureBoostMode+0x38>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800311a:	f7ff fad9 	bl	80026d0 <HAL_GetREVID>
 800311e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003122:	4298      	cmp	r0, r3
 8003124:	d805      	bhi.n	8003132 <ADC_ConfigureBoostMode+0xe6>
 8003126:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800312e:	609a      	str	r2, [r3, #8]
}
 8003130:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8003132:	4b1a      	ldr	r3, [pc, #104]	@ (800319c <ADC_ConfigureBoostMode+0x150>)
 8003134:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	d304      	bcc.n	8003146 <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003142:	609a      	str	r2, [r3, #8]
}
 8003144:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800314c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003150:	609a      	str	r2, [r3, #8]
}
 8003152:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 800315a:	e793      	b.n	8003084 <ADC_ConfigureBoostMode+0x38>
        freq /= 64UL;
 800315c:	0985      	lsrs	r5, r0, #6
        break;
 800315e:	e791      	b.n	8003084 <ADC_ConfigureBoostMode+0x38>
        freq /= 16UL;
 8003160:	0905      	lsrs	r5, r0, #4
        break;
 8003162:	e78f      	b.n	8003084 <ADC_ConfigureBoostMode+0x38>
        freq /= 4UL;
 8003164:	0885      	lsrs	r5, r0, #2
        break;
 8003166:	e78d      	b.n	8003084 <ADC_ConfigureBoostMode+0x38>
    switch (hadc->Init.ClockPrescaler)
 8003168:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800316c:	d18a      	bne.n	8003084 <ADC_ConfigureBoostMode+0x38>
        freq /= 32UL;
 800316e:	0945      	lsrs	r5, r0, #5
        break;
 8003170:	e788      	b.n	8003084 <ADC_ConfigureBoostMode+0x38>
        freq /= 128UL;
 8003172:	09c5      	lsrs	r5, r0, #7
        break;
 8003174:	e786      	b.n	8003084 <ADC_ConfigureBoostMode+0x38>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003176:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800317a:	609a      	str	r2, [r3, #8]
}
 800317c:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 800317e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003182:	d0ae      	beq.n	80030e2 <ADC_ConfigureBoostMode+0x96>
 8003184:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003188:	d0ab      	beq.n	80030e2 <ADC_ConfigureBoostMode+0x96>
 800318a:	e77b      	b.n	8003084 <ADC_ConfigureBoostMode+0x38>
 800318c:	40022000 	.word	0x40022000
 8003190:	58026300 	.word	0x58026300
 8003194:	01312d00 	.word	0x01312d00
 8003198:	40022300 	.word	0x40022300
 800319c:	00bebc21 	.word	0x00bebc21
 80031a0:	017d7841 	.word	0x017d7841
 80031a4:	02faf081 	.word	0x02faf081

080031a8 <HAL_ADC_Init>:
{
 80031a8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80031aa:	2300      	movs	r3, #0
{
 80031ac:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80031ae:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80031b0:	2800      	cmp	r0, #0
 80031b2:	f000 80a9 	beq.w	8003308 <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031b6:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80031b8:	4604      	mov	r4, r0
 80031ba:	2d00      	cmp	r5, #0
 80031bc:	f000 80aa 	beq.w	8003314 <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031c0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031c2:	6893      	ldr	r3, [r2, #8]
 80031c4:	009d      	lsls	r5, r3, #2
 80031c6:	d503      	bpl.n	80031d0 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031c8:	6891      	ldr	r1, [r2, #8]
 80031ca:	4b71      	ldr	r3, [pc, #452]	@ (8003390 <HAL_ADC_Init+0x1e8>)
 80031cc:	400b      	ands	r3, r1
 80031ce:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031d0:	6893      	ldr	r3, [r2, #8]
 80031d2:	00d8      	lsls	r0, r3, #3
 80031d4:	d416      	bmi.n	8003204 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031d6:	4b6f      	ldr	r3, [pc, #444]	@ (8003394 <HAL_ADC_Init+0x1ec>)
 80031d8:	496f      	ldr	r1, [pc, #444]	@ (8003398 <HAL_ADC_Init+0x1f0>)
 80031da:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80031dc:	6890      	ldr	r0, [r2, #8]
 80031de:	099b      	lsrs	r3, r3, #6
 80031e0:	fba1 1303 	umull	r1, r3, r1, r3
 80031e4:	496d      	ldr	r1, [pc, #436]	@ (800339c <HAL_ADC_Init+0x1f4>)
 80031e6:	099b      	lsrs	r3, r3, #6
 80031e8:	4001      	ands	r1, r0
 80031ea:	3301      	adds	r3, #1
 80031ec:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80031f0:	6091      	str	r1, [r2, #8]
 80031f2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80031f4:	9b01      	ldr	r3, [sp, #4]
 80031f6:	b12b      	cbz	r3, 8003204 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80031f8:	9b01      	ldr	r3, [sp, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80031fe:	9b01      	ldr	r3, [sp, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f9      	bne.n	80031f8 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003204:	6893      	ldr	r3, [r2, #8]
 8003206:	00d9      	lsls	r1, r3, #3
 8003208:	f100 8082 	bmi.w	8003310 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800320e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003210:	f043 0310 	orr.w	r3, r3, #16
 8003214:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003216:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003218:	432b      	orrs	r3, r5
 800321a:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800321c:	6893      	ldr	r3, [r2, #8]
 800321e:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003222:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003224:	d16c      	bne.n	8003300 <HAL_ADC_Init+0x158>
 8003226:	06db      	lsls	r3, r3, #27
 8003228:	d46a      	bmi.n	8003300 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 800322a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800322c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003236:	6893      	ldr	r3, [r2, #8]
 8003238:	07de      	lsls	r6, r3, #31
 800323a:	d40c      	bmi.n	8003256 <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800323c:	4b58      	ldr	r3, [pc, #352]	@ (80033a0 <HAL_ADC_Init+0x1f8>)
 800323e:	429a      	cmp	r2, r3
 8003240:	f000 8081 	beq.w	8003346 <HAL_ADC_Init+0x19e>
 8003244:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003248:	429a      	cmp	r2, r3
 800324a:	d07c      	beq.n	8003346 <HAL_ADC_Init+0x19e>
 800324c:	4b55      	ldr	r3, [pc, #340]	@ (80033a4 <HAL_ADC_Init+0x1fc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	07d9      	lsls	r1, r3, #31
 8003252:	f140 808a 	bpl.w	800336a <HAL_ADC_Init+0x1c2>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003256:	f7ff fa3b 	bl	80026d0 <HAL_GetREVID>
 800325a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800325e:	68a1      	ldr	r1, [r4, #8]
 8003260:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003262:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003264:	d85c      	bhi.n	8003320 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003266:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800326a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800326c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800326e:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8003272:	4302      	orrs	r2, r0
 8003274:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003276:	2b01      	cmp	r3, #1
 8003278:	d103      	bne.n	8003282 <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800327a:	6a23      	ldr	r3, [r4, #32]
 800327c:	3b01      	subs	r3, #1
 800327e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003282:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003284:	b123      	cbz	r3, 8003290 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003286:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800328a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800328c:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800328e:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	4945      	ldr	r1, [pc, #276]	@ (80033a8 <HAL_ADC_Init+0x200>)
 8003294:	68d8      	ldr	r0, [r3, #12]
 8003296:	4001      	ands	r1, r0
 8003298:	4311      	orrs	r1, r2
 800329a:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032a2:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032a4:	d11c      	bne.n	80032e0 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032a6:	0712      	lsls	r2, r2, #28
 80032a8:	d41a      	bmi.n	80032e0 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032aa:	68d8      	ldr	r0, [r3, #12]
 80032ac:	4a3f      	ldr	r2, [pc, #252]	@ (80033ac <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032ae:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032b0:	4002      	ands	r2, r0
 80032b2:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80032b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80032b8:	430a      	orrs	r2, r1
 80032ba:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80032bc:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80032c0:	2a01      	cmp	r2, #1
 80032c2:	d054      	beq.n	800336e <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80032cc:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80032ce:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80032d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032d2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80032d6:	430a      	orrs	r2, r1
 80032d8:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80032da:	f7ff feb7 	bl	800304c <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032de:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032e0:	68e2      	ldr	r2, [r4, #12]
 80032e2:	2a01      	cmp	r2, #1
 80032e4:	d027      	beq.n	8003336 <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032e8:	f022 020f 	bic.w	r2, r2, #15
 80032ec:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032ee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 80032f0:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032f2:	f023 0303 	bic.w	r3, r3, #3
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80032fc:	b002      	add	sp, #8
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003300:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003302:	f043 0310 	orr.w	r3, r3, #16
 8003306:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8003308:	2501      	movs	r5, #1
}
 800330a:	4628      	mov	r0, r5
 800330c:	b002      	add	sp, #8
 800330e:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003310:	2500      	movs	r5, #0
 8003312:	e783      	b.n	800321c <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 8003314:	f7fe fe28 	bl	8001f68 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003318:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 800331a:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 800331e:	e74f      	b.n	80031c0 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003320:	2910      	cmp	r1, #16
 8003322:	d1a0      	bne.n	8003266 <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003324:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003326:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003328:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800332c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800332e:	430a      	orrs	r2, r1
 8003330:	f042 021c 	orr.w	r2, r2, #28
 8003334:	e79f      	b.n	8003276 <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003336:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003338:	69a2      	ldr	r2, [r4, #24]
 800333a:	f021 010f 	bic.w	r1, r1, #15
 800333e:	3a01      	subs	r2, #1
 8003340:	430a      	orrs	r2, r1
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
 8003344:	e7d3      	b.n	80032ee <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003346:	4b16      	ldr	r3, [pc, #88]	@ (80033a0 <HAL_ADC_Init+0x1f8>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f013 0f01 	tst.w	r3, #1
 800334e:	4b18      	ldr	r3, [pc, #96]	@ (80033b0 <HAL_ADC_Init+0x208>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	d180      	bne.n	8003256 <HAL_ADC_Init+0xae>
 8003354:	07d8      	lsls	r0, r3, #31
 8003356:	f53f af7e 	bmi.w	8003256 <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800335a:	4a16      	ldr	r2, [pc, #88]	@ (80033b4 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800335c:	6893      	ldr	r3, [r2, #8]
 800335e:	6861      	ldr	r1, [r4, #4]
 8003360:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8003364:	430b      	orrs	r3, r1
 8003366:	6093      	str	r3, [r2, #8]
}
 8003368:	e775      	b.n	8003256 <HAL_ADC_Init+0xae>
 800336a:	4a13      	ldr	r2, [pc, #76]	@ (80033b8 <HAL_ADC_Init+0x210>)
 800336c:	e7f6      	b.n	800335c <HAL_ADC_Init+0x1b4>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800336e:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8003372:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8003374:	3901      	subs	r1, #1
 8003376:	6918      	ldr	r0, [r3, #16]
 8003378:	4332      	orrs	r2, r6
 800337a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800337e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003380:	430a      	orrs	r2, r1
 8003382:	490e      	ldr	r1, [pc, #56]	@ (80033bc <HAL_ADC_Init+0x214>)
 8003384:	4001      	ands	r1, r0
 8003386:	430a      	orrs	r2, r1
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	611a      	str	r2, [r3, #16]
 800338e:	e79d      	b.n	80032cc <HAL_ADC_Init+0x124>
 8003390:	5fffffc0 	.word	0x5fffffc0
 8003394:	24000010 	.word	0x24000010
 8003398:	053e2d63 	.word	0x053e2d63
 800339c:	6fffffc0 	.word	0x6fffffc0
 80033a0:	40022000 	.word	0x40022000
 80033a4:	58026000 	.word	0x58026000
 80033a8:	fff0c003 	.word	0xfff0c003
 80033ac:	ffffbffc 	.word	0xffffbffc
 80033b0:	40022100 	.word	0x40022100
 80033b4:	40022300 	.word	0x40022300
 80033b8:	58026300 	.word	0x58026300
 80033bc:	fc00f81e 	.word	0xfc00f81e

080033c0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80033c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033c2:	2300      	movs	r3, #0
{
 80033c4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80033c6:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d040      	beq.n	8003452 <HAL_ADCEx_Calibration_Start+0x92>
 80033d0:	2301      	movs	r3, #1
 80033d2:	4604      	mov	r4, r0
 80033d4:	460e      	mov	r6, r1
 80033d6:	4615      	mov	r5, r2
 80033d8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033dc:	f7ff fdfc 	bl	8002fd8 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033e0:	b9e8      	cbnz	r0, 800341e <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e2:	6d67      	ldr	r7, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 80033e4:	f005 4280 	and.w	r2, r5, #1073741824	@ 0x40000000
 80033e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <HAL_ADCEx_Calibration_Start+0x98>)
 80033ea:	f406 3180 	and.w	r1, r6, #65536	@ 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80033ee:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80033f0:	403b      	ands	r3, r7
 80033f2:	f043 0302 	orr.w	r3, r3, #2
 80033f6:	6563      	str	r3, [r4, #84]	@ 0x54
 80033f8:	4b18      	ldr	r3, [pc, #96]	@ (800345c <HAL_ADCEx_Calibration_Start+0x9c>)
 80033fa:	68ae      	ldr	r6, [r5, #8]
 80033fc:	4033      	ands	r3, r6
 80033fe:	4313      	orrs	r3, r2
 8003400:	430b      	orrs	r3, r1
 8003402:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003406:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003408:	68ab      	ldr	r3, [r5, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800340a:	4a15      	ldr	r2, [pc, #84]	@ (8003460 <HAL_ADCEx_Calibration_Start+0xa0>)
 800340c:	2b00      	cmp	r3, #0
 800340e:	db0f      	blt.n	8003430 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003410:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003412:	f023 0303 	bic.w	r3, r3, #3
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6563      	str	r3, [r4, #84]	@ 0x54
 800341c:	e003      	b.n	8003426 <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003420:	f043 0310 	orr.w	r3, r3, #16
 8003424:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003426:	2300      	movs	r3, #0
 8003428:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800342c:	b003      	add	sp, #12
 800342e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8003430:	9b01      	ldr	r3, [sp, #4]
 8003432:	3301      	adds	r3, #1
 8003434:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003436:	9b01      	ldr	r3, [sp, #4]
 8003438:	4293      	cmp	r3, r2
 800343a:	d3e5      	bcc.n	8003408 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800343c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 800343e:	2200      	movs	r2, #0
        return HAL_ERROR;
 8003440:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8003442:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8003446:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        ADC_STATE_CLR_SET(hadc->State,
 800344a:	f043 0310 	orr.w	r3, r3, #16
 800344e:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8003450:	e7ec      	b.n	800342c <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 8003452:	2002      	movs	r0, #2
}
 8003454:	b003      	add	sp, #12
 8003456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003458:	ffffeefd 	.word	0xffffeefd
 800345c:	3ffeffc0 	.word	0x3ffeffc0
 8003460:	25c3f800 	.word	0x25c3f800

08003464 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop

08003468 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop

0800346c <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop

08003470 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop

08003474 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop

08003478 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003478:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 800347c:	2a01      	cmp	r2, #1
 800347e:	d035      	beq.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8003480:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003482:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003484:	2001      	movs	r0, #1
{
 8003486:	b4f0      	push	{r4, r5, r6, r7}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003488:	4d28      	ldr	r5, [pc, #160]	@ (800352c <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
{
 800348a:	b09a      	sub	sp, #104	@ 0x68
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800348c:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800348e:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003490:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 8003492:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003496:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003498:	d008      	beq.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800349a:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800349c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a0:	f041 0120 	orr.w	r1, r1, #32
 80034a4:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80034a6:	b01a      	add	sp, #104	@ 0x68
 80034a8:	bcf0      	pop	{r4, r5, r6, r7}
 80034aa:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ac:	4a20      	ldr	r2, [pc, #128]	@ (8003530 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80034ae:	6890      	ldr	r0, [r2, #8]
 80034b0:	0740      	lsls	r0, r0, #29
 80034b2:	d50b      	bpl.n	80034cc <HAL_ADCEx_MultiModeConfigChannel+0x54>
 80034b4:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80034b8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ba:	f042 0220 	orr.w	r2, r2, #32
 80034be:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 80034c6:	b01a      	add	sp, #104	@ 0x68
 80034c8:	bcf0      	pop	{r4, r5, r6, r7}
 80034ca:	4770      	bx	lr
 80034cc:	68a0      	ldr	r0, [r4, #8]
 80034ce:	0745      	lsls	r5, r0, #29
 80034d0:	d4f1      	bmi.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034d2:	6808      	ldr	r0, [r1, #0]
 80034d4:	b9a0      	cbnz	r0, 8003500 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80034d6:	4917      	ldr	r1, [pc, #92]	@ (8003534 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 80034d8:	6888      	ldr	r0, [r1, #8]
 80034da:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80034de:	6088      	str	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034e0:	68a0      	ldr	r0, [r4, #8]
 80034e2:	07c0      	lsls	r0, r0, #31
 80034e4:	d504      	bpl.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80034e6:	6892      	ldr	r2, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e8:	2000      	movs	r0, #0
 80034ea:	e7e9      	b.n	80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 80034ec:	2002      	movs	r0, #2
}
 80034ee:	4770      	bx	lr
 80034f0:	6892      	ldr	r2, [r2, #8]
 80034f2:	07d5      	lsls	r5, r2, #31
 80034f4:	d4f8      	bmi.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034f6:	6888      	ldr	r0, [r1, #8]
 80034f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003538 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80034fa:	4002      	ands	r2, r0
 80034fc:	608a      	str	r2, [r1, #8]
 80034fe:	e7f3      	b.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003500:	4e0c      	ldr	r6, [pc, #48]	@ (8003534 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8003502:	684f      	ldr	r7, [r1, #4]
 8003504:	68b5      	ldr	r5, [r6, #8]
 8003506:	f425 4540 	bic.w	r5, r5, #49152	@ 0xc000
 800350a:	433d      	orrs	r5, r7
 800350c:	60b5      	str	r5, [r6, #8]
 800350e:	68a4      	ldr	r4, [r4, #8]
 8003510:	07e4      	lsls	r4, r4, #31
 8003512:	d4e8      	bmi.n	80034e6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003514:	6892      	ldr	r2, [r2, #8]
 8003516:	07d7      	lsls	r7, r2, #31
 8003518:	d4e6      	bmi.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
        MODIFY_REG(tmpADC_Common->CCR,
 800351a:	688a      	ldr	r2, [r1, #8]
 800351c:	68b4      	ldr	r4, [r6, #8]
 800351e:	4310      	orrs	r0, r2
 8003520:	4a05      	ldr	r2, [pc, #20]	@ (8003538 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8003522:	4022      	ands	r2, r4
 8003524:	4310      	orrs	r0, r2
 8003526:	60b0      	str	r0, [r6, #8]
 8003528:	e7de      	b.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
 800352a:	bf00      	nop
 800352c:	40022000 	.word	0x40022000
 8003530:	40022100 	.word	0x40022100
 8003534:	40022300 	.word	0x40022300
 8003538:	fffff0e0 	.word	0xfffff0e0

0800353c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800353c:	4906      	ldr	r1, [pc, #24]	@ (8003558 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003542:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003544:	4b05      	ldr	r3, [pc, #20]	@ (800355c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003546:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003548:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003550:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8003552:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003554:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00
 800355c:	05fa0000 	.word	0x05fa0000

08003560 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003560:	4b1a      	ldr	r3, [pc, #104]	@ (80035cc <HAL_NVIC_SetPriority+0x6c>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003568:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800356a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800356e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003572:	f1be 0f04 	cmp.w	lr, #4
 8003576:	bf28      	it	cs
 8003578:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800357c:	f1bc 0f06 	cmp.w	ip, #6
 8003580:	d91a      	bls.n	80035b8 <HAL_NVIC_SetPriority+0x58>
 8003582:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800358a:	fa03 f30c 	lsl.w	r3, r3, ip
 800358e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8003596:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	fa03 f30e 	lsl.w	r3, r3, lr
 800359c:	ea21 0303 	bic.w	r3, r1, r3
 80035a0:	fa03 f30c 	lsl.w	r3, r3, ip
 80035a4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80035ac:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80035ae:	db06      	blt.n	80035be <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b0:	4a07      	ldr	r2, [pc, #28]	@ (80035d0 <HAL_NVIC_SetPriority+0x70>)
 80035b2:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80035b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80035b8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ba:	4694      	mov	ip, r2
 80035bc:	e7e9      	b.n	8003592 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035be:	f000 000f 	and.w	r0, r0, #15
 80035c2:	4a04      	ldr	r2, [pc, #16]	@ (80035d4 <HAL_NVIC_SetPriority+0x74>)
 80035c4:	5413      	strb	r3, [r2, r0]
 80035c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80035ca:	bf00      	nop
 80035cc:	e000ed00 	.word	0xe000ed00
 80035d0:	e000e400 	.word	0xe000e400
 80035d4:	e000ed14 	.word	0xe000ed14

080035d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80035d8:	2800      	cmp	r0, #0
 80035da:	db07      	blt.n	80035ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035dc:	2301      	movs	r3, #1
 80035de:	f000 011f 	and.w	r1, r0, #31
 80035e2:	4a03      	ldr	r2, [pc, #12]	@ (80035f0 <HAL_NVIC_EnableIRQ+0x18>)
 80035e4:	0940      	lsrs	r0, r0, #5
 80035e6:	408b      	lsls	r3, r1
 80035e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	e000e100 	.word	0xe000e100

080035f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f4:	1e43      	subs	r3, r0, #1
 80035f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035fa:	d301      	bcc.n	8003600 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80035fe:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003600:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003604:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003606:	4905      	ldr	r1, [pc, #20]	@ (800361c <HAL_SYSTICK_Config+0x28>)
 8003608:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003610:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003614:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003616:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003620:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003624:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003626:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800362a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800362e:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8003630:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800363c:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <HAL_MPU_Enable+0x1c>)
 800363e:	f040 0001 	orr.w	r0, r0, #1
 8003642:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003646:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003648:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800364c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800364e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003652:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800365c:	4a16      	ldr	r2, [pc, #88]	@ (80036b8 <HAL_MPU_ConfigRegion+0x5c>)
 800365e:	7843      	ldrb	r3, [r0, #1]
 8003660:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003664:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003670:	6843      	ldr	r3, [r0, #4]
 8003672:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003676:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003678:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800367c:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800367e:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003680:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003684:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003688:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800368a:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800368c:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003690:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003694:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003698:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800369a:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800369e:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80036a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80036a6:	7a01      	ldrb	r1, [r0, #8]
 80036a8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80036ac:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036b0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80036bc:	b188      	cbz	r0, 80036e2 <HAL_DAC_Init+0x26>
{
 80036be:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80036c0:	7903      	ldrb	r3, [r0, #4]
 80036c2:	4604      	mov	r4, r0
 80036c4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80036c8:	b13b      	cbz	r3, 80036da <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036ca:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80036cc:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036ce:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80036d0:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80036d2:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036d4:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80036d6:	7122      	strb	r2, [r4, #4]
}
 80036d8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80036da:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80036dc:	f7fe fcbe 	bl	800205c <HAL_DAC_MspInit>
 80036e0:	e7f3      	b.n	80036ca <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80036e2:	2001      	movs	r0, #1
}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop

080036e8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d05e      	beq.n	80037ae <HAL_DAC_Start_DMA+0xc6>
 80036f0:	460e      	mov	r6, r1
 80036f2:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036f4:	7942      	ldrb	r2, [r0, #5]
 80036f6:	4604      	mov	r4, r0
 80036f8:	2a01      	cmp	r2, #1
 80036fa:	d060      	beq.n	80037be <HAL_DAC_Start_DMA+0xd6>
 80036fc:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80036fe:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdac);
 8003700:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8003702:	2202      	movs	r2, #2
 8003704:	7102      	strb	r2, [r0, #4]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003706:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 8003708:	bb3e      	cbnz	r6, 800375a <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800370a:	6880      	ldr	r0, [r0, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800370c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003710:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 80037c4 <HAL_DAC_Start_DMA+0xdc>
 8003714:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003718:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 80037c8 <HAL_DAC_Start_DMA+0xe0>
 800371c:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003720:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 80037cc <HAL_DAC_Start_DMA+0xe4>
 8003724:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003728:	602a      	str	r2, [r5, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800372a:	2f00      	cmp	r7, #0
 800372c:	d044      	beq.n	80037b8 <HAL_DAC_Start_DMA+0xd0>
 800372e:	2f04      	cmp	r7, #4
 8003730:	d137      	bne.n	80037a2 <HAL_DAC_Start_DMA+0xba>
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
        break;
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003732:	f105 020c 	add.w	r2, r5, #12
  }

  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003736:	682f      	ldr	r7, [r5, #0]
 8003738:	f447 5700 	orr.w	r7, r7, #8192	@ 0x2000
 800373c:	602f      	str	r7, [r5, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800373e:	f000 fce7 	bl	8004110 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003742:	2300      	movs	r3, #0
 8003744:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8003746:	bb38      	cbnz	r0, 8003798 <HAL_DAC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003748:	6822      	ldr	r2, [r4, #0]
 800374a:	f006 0110 	and.w	r1, r6, #16
 800374e:	2301      	movs	r3, #1
 8003750:	6814      	ldr	r4, [r2, #0]
 8003752:	408b      	lsls	r3, r1
 8003754:	4323      	orrs	r3, r4
 8003756:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8003758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800375a:	68c0      	ldr	r0, [r0, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800375c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003760:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 80037d0 <HAL_DAC_Start_DMA+0xe8>
 8003764:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003768:	f8df c068 	ldr.w	ip, [pc, #104]	@ 80037d4 <HAL_DAC_Start_DMA+0xec>
 800376c:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003770:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80037d8 <HAL_DAC_Start_DMA+0xf0>
 8003774:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003778:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 800377a:	b1d7      	cbz	r7, 80037b2 <HAL_DAC_Start_DMA+0xca>
 800377c:	2f04      	cmp	r7, #4
 800377e:	d113      	bne.n	80037a8 <HAL_DAC_Start_DMA+0xc0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003780:	f105 0218 	add.w	r2, r5, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003784:	682f      	ldr	r7, [r5, #0]
 8003786:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 800378a:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800378c:	f000 fcc0 	bl	8004110 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8003790:	2300      	movs	r3, #0
 8003792:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8003794:	2800      	cmp	r0, #0
 8003796:	d0d7      	beq.n	8003748 <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003798:	6923      	ldr	r3, [r4, #16]
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	6123      	str	r3, [r4, #16]
}
 80037a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80037a2:	f105 0210 	add.w	r2, r5, #16
  if (Channel == DAC_CHANNEL_1)
 80037a6:	e7c6      	b.n	8003736 <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80037a8:	f105 021c 	add.w	r2, r5, #28
  if (Channel == DAC_CHANNEL_1)
 80037ac:	e7ea      	b.n	8003784 <HAL_DAC_Start_DMA+0x9c>
    return HAL_ERROR;
 80037ae:	2001      	movs	r0, #1
}
 80037b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80037b2:	f105 0214 	add.w	r2, r5, #20
  if (Channel == DAC_CHANNEL_1)
 80037b6:	e7e5      	b.n	8003784 <HAL_DAC_Start_DMA+0x9c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80037b8:	f105 0208 	add.w	r2, r5, #8
  if (Channel == DAC_CHANNEL_1)
 80037bc:	e7bb      	b.n	8003736 <HAL_DAC_Start_DMA+0x4e>
  __HAL_LOCK(hdac);
 80037be:	2002      	movs	r0, #2
}
 80037c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c2:	bf00      	nop
 80037c4:	080037e1 	.word	0x080037e1
 80037c8:	080037f5 	.word	0x080037f5
 80037cc:	08003805 	.word	0x08003805
 80037d0:	080039dd 	.word	0x080039dd
 80037d4:	080039f1 	.word	0x080039f1
 80037d8:	08003a01 	.word	0x08003a01

080037dc <HAL_DAC_ConvCpltCallbackCh1>:
  * @brief  Conversion complete callback in non-blocking mode for Channel1
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop

080037e0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80037e0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e2:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80037e4:	4620      	mov	r0, r4
 80037e6:	f7ff fff9 	bl	80037dc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037ea:	2301      	movs	r3, #1
 80037ec:	7123      	strb	r3, [r4, #4]
}
 80037ee:	bd10      	pop	{r4, pc}

080037f0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop

080037f4 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80037f4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80037f6:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80037f8:	f7ff fffa 	bl	80037f0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80037fc:	bd08      	pop	{r3, pc}
 80037fe:	bf00      	nop

08003800 <HAL_DAC_ErrorCallbackCh1>:
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop

08003804 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003804:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003806:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003808:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800380a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003812:	f7ff fff5 	bl	8003800 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003816:	2301      	movs	r3, #1
 8003818:	7123      	strb	r3, [r4, #4]
}
 800381a:	bd10      	pop	{r4, pc}

0800381c <HAL_DAC_DMAUnderrunCallbackCh1>:
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop

08003820 <HAL_DAC_IRQHandler>:
  uint32_t itsource = hdac->Instance->CR;
 8003820:	6803      	ldr	r3, [r0, #0]
{
 8003822:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = hdac->Instance->CR;
 8003824:	681d      	ldr	r5, [r3, #0]
{
 8003826:	4604      	mov	r4, r0
  uint32_t itflag   = hdac->Instance->SR;
 8003828:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800382a:	04aa      	lsls	r2, r5, #18
 800382c:	d501      	bpl.n	8003832 <HAL_DAC_IRQHandler+0x12>
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800382e:	04b1      	lsls	r1, r6, #18
 8003830:	d417      	bmi.n	8003862 <HAL_DAC_IRQHandler+0x42>
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003832:	00aa      	lsls	r2, r5, #2
 8003834:	d501      	bpl.n	800383a <HAL_DAC_IRQHandler+0x1a>
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003836:	00b3      	lsls	r3, r6, #2
 8003838:	d400      	bmi.n	800383c <HAL_DAC_IRQHandler+0x1c>
}
 800383a:	bd70      	pop	{r4, r5, r6, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 800383c:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003844:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8003846:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003848:	6922      	ldr	r2, [r4, #16]
 800384a:	f042 0202 	orr.w	r2, r2, #2
 800384e:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003850:	6359      	str	r1, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
}
 8003858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800385c:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800385e:	f000 b8db 	b.w	8003a18 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8003862:	2204      	movs	r2, #4
 8003864:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003866:	6902      	ldr	r2, [r0, #16]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800386e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003872:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800387a:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800387c:	f7ff ffce 	bl	800381c <HAL_DAC_DMAUnderrunCallbackCh1>
 8003880:	e7d7      	b.n	8003832 <HAL_DAC_IRQHandler+0x12>
 8003882:	bf00      	nop

08003884 <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 8003884:	2800      	cmp	r0, #0
 8003886:	f000 8086 	beq.w	8003996 <HAL_DAC_ConfigChannel+0x112>
{
 800388a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800388e:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8003890:	2900      	cmp	r1, #0
 8003892:	d04d      	beq.n	8003930 <HAL_DAC_ConfigChannel+0xac>
  __HAL_LOCK(hdac);
 8003894:	7943      	ldrb	r3, [r0, #5]
 8003896:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003898:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 800389a:	2b01      	cmp	r3, #1
 800389c:	d079      	beq.n	8003992 <HAL_DAC_ConfigChannel+0x10e>
 800389e:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80038a0:	2904      	cmp	r1, #4
 80038a2:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 80038a4:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80038a6:	f04f 0302 	mov.w	r3, #2
 80038aa:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80038ac:	d043      	beq.n	8003936 <HAL_DAC_ConfigChannel+0xb2>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80038ae:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 80038b2:	6803      	ldr	r3, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80038b4:	6928      	ldr	r0, [r5, #16]
 80038b6:	2801      	cmp	r0, #1
 80038b8:	d108      	bne.n	80038cc <HAL_DAC_ConfigChannel+0x48>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038ba:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 80038bc:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038be:	4090      	lsls	r0, r2
 80038c0:	ea26 0600 	bic.w	r6, r6, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038c4:	6968      	ldr	r0, [r5, #20]
 80038c6:	4090      	lsls	r0, r2
 80038c8:	4330      	orrs	r0, r6
    hdac->Instance->CCR = tmpreg1;
 80038ca:	6398      	str	r0, [r3, #56]	@ 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80038cc:	2007      	movs	r0, #7
  tmpreg1 = hdac->Instance->MCR;
 80038ce:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80038d0:	4090      	lsls	r0, r2
 80038d2:	ea26 0600 	bic.w	r6, r6, r0
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80038d6:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80038da:	2801      	cmp	r0, #1
 80038dc:	d055      	beq.n	800398a <HAL_DAC_ConfigChannel+0x106>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80038de:	2802      	cmp	r0, #2
 80038e0:	d055      	beq.n	800398e <HAL_DAC_ConfigChannel+0x10a>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80038e2:	fab7 f087 	clz	r0, r7
 80038e6:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80038e8:	4339      	orrs	r1, r7
 80038ea:	4301      	orrs	r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038ec:	6868      	ldr	r0, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80038ee:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038f2:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038f4:	4090      	lsls	r0, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80038f6:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038f8:	4331      	orrs	r1, r6
  hdac->State = HAL_DAC_STATE_READY;
 80038fa:	2601      	movs	r6, #1
  hdac->Instance->MCR = tmpreg1;
 80038fc:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80038fe:	6819      	ldr	r1, [r3, #0]
 8003900:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003904:	f640 75fe 	movw	r5, #4094	@ 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003908:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800390a:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 800390c:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800390e:	ea21 0105 	bic.w	r1, r1, r5
  __HAL_UNLOCK(hdac);
 8003912:	2500      	movs	r5, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003914:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003916:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 8003918:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800391a:	fa00 f102 	lsl.w	r1, r0, r2
 800391e:	681a      	ldr	r2, [r3, #0]
  return status;
 8003920:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003922:	ea22 0201 	bic.w	r2, r2, r1
 8003926:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8003928:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 800392a:	7165      	strb	r5, [r4, #5]
}
 800392c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003930:	2001      	movs	r0, #1
}
 8003932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8003936:	f7fe fec5 	bl	80026c4 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800393a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800393c:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 800393e:	b9be      	cbnz	r6, 8003970 <HAL_DAC_ConfigChannel+0xec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003940:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 80039d4 <HAL_DAC_ConfigChannel+0x150>
 8003944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003946:	ea12 0f08 	tst.w	r2, r8
 800394a:	d026      	beq.n	800399a <HAL_DAC_ConfigChannel+0x116>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800394c:	f7fe feba 	bl	80026c4 <HAL_GetTick>
 8003950:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003952:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003954:	2801      	cmp	r0, #1
 8003956:	d9f5      	bls.n	8003944 <HAL_DAC_ConfigChannel+0xc0>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800395a:	ea12 0f08 	tst.w	r2, r8
 800395e:	d0f1      	beq.n	8003944 <HAL_DAC_ConfigChannel+0xc0>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003960:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003962:	2203      	movs	r2, #3
            return HAL_TIMEOUT;
 8003964:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003966:	f043 0308 	orr.w	r3, r3, #8
 800396a:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800396c:	7122      	strb	r2, [r4, #4]
            return HAL_TIMEOUT;
 800396e:	e7dd      	b.n	800392c <HAL_DAC_ConfigChannel+0xa8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003972:	2a00      	cmp	r2, #0
 8003974:	da2a      	bge.n	80039cc <HAL_DAC_ConfigChannel+0x148>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003976:	f7fe fea5 	bl	80026c4 <HAL_GetTick>
 800397a:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800397c:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800397e:	2801      	cmp	r0, #1
 8003980:	d9f6      	bls.n	8003970 <HAL_DAC_ConfigChannel+0xec>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003984:	2a00      	cmp	r2, #0
 8003986:	daf3      	bge.n	8003970 <HAL_DAC_ConfigChannel+0xec>
 8003988:	e7ea      	b.n	8003960 <HAL_DAC_ConfigChannel+0xdc>
    connectOnChip = 0x00000000UL;
 800398a:	2000      	movs	r0, #0
 800398c:	e7ac      	b.n	80038e8 <HAL_DAC_ConfigChannel+0x64>
    connectOnChip = DAC_MCR_MODE1_0;
 800398e:	2001      	movs	r0, #1
 8003990:	e7aa      	b.n	80038e8 <HAL_DAC_ConfigChannel+0x64>
  __HAL_LOCK(hdac);
 8003992:	2002      	movs	r0, #2
 8003994:	e7ca      	b.n	800392c <HAL_DAC_ConfigChannel+0xa8>
    return HAL_ERROR;
 8003996:	2001      	movs	r0, #1
}
 8003998:	4770      	bx	lr
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800399a:	69aa      	ldr	r2, [r5, #24]
 800399c:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800399e:	f006 0210 	and.w	r2, r6, #16
 80039a2:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 80039a6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80039a8:	4090      	lsls	r0, r2
 80039aa:	ea21 0100 	bic.w	r1, r1, r0
 80039ae:	69e8      	ldr	r0, [r5, #28]
 80039b0:	4090      	lsls	r0, r2
 80039b2:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80039b4:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80039b6:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80039b8:	4090      	lsls	r0, r2
 80039ba:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80039bc:	ea21 0100 	bic.w	r1, r1, r0
 80039c0:	6a28      	ldr	r0, [r5, #32]
 80039c2:	4090      	lsls	r0, r2
 80039c4:	4301      	orrs	r1, r0
 80039c6:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80039c8:	6829      	ldr	r1, [r5, #0]
 80039ca:	e773      	b.n	80038b4 <HAL_DAC_ConfigChannel+0x30>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80039cc:	69aa      	ldr	r2, [r5, #24]
 80039ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80039d0:	e7e5      	b.n	800399e <HAL_DAC_ConfigChannel+0x11a>
 80039d2:	bf00      	nop
 80039d4:	20008000 	.word	0x20008000

080039d8 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop

080039dc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80039dc:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039de:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80039e0:	4620      	mov	r0, r4
 80039e2:	f7ff fff9 	bl	80039d8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80039e6:	2301      	movs	r3, #1
 80039e8:	7123      	strb	r3, [r4, #4]
}
 80039ea:	bd10      	pop	{r4, pc}

080039ec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop

080039f0 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80039f0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80039f2:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80039f4:	f7ff fffa 	bl	80039ec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80039f8:	bd08      	pop	{r3, pc}
 80039fa:	bf00      	nop

080039fc <HAL_DACEx_ErrorCallbackCh2>:
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop

08003a00 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003a00:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a02:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a04:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003a06:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003a0e:	f7ff fff5 	bl	80039fc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a12:	2301      	movs	r3, #1
 8003a14:	7123      	strb	r3, [r4, #4]
}
 8003a16:	bd10      	pop	{r4, pc}

08003a18 <HAL_DACEx_DMAUnderrunCallbackCh2>:
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop

08003a1c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a1c:	4936      	ldr	r1, [pc, #216]	@ (8003af8 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8003a1e:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a20:	6803      	ldr	r3, [r0, #0]
 8003a22:	428b      	cmp	r3, r1
 8003a24:	d033      	beq.n	8003a8e <DMA_CalcBaseAndBitshift+0x72>
 8003a26:	3118      	adds	r1, #24
 8003a28:	1a59      	subs	r1, r3, r1
 8003a2a:	fab1 f181 	clz	r1, r1
 8003a2e:	0949      	lsrs	r1, r1, #5
 8003a30:	bb69      	cbnz	r1, 8003a8e <DMA_CalcBaseAndBitshift+0x72>
 8003a32:	4832      	ldr	r0, [pc, #200]	@ (8003afc <DMA_CalcBaseAndBitshift+0xe0>)
 8003a34:	4283      	cmp	r3, r0
 8003a36:	d03e      	beq.n	8003ab6 <DMA_CalcBaseAndBitshift+0x9a>
 8003a38:	3018      	adds	r0, #24
 8003a3a:	4283      	cmp	r3, r0
 8003a3c:	d03e      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa0>
 8003a3e:	3018      	adds	r0, #24
 8003a40:	4283      	cmp	r3, r0
 8003a42:	d034      	beq.n	8003aae <DMA_CalcBaseAndBitshift+0x92>
 8003a44:	3018      	adds	r0, #24
 8003a46:	4283      	cmp	r3, r0
 8003a48:	d03b      	beq.n	8003ac2 <DMA_CalcBaseAndBitshift+0xa6>
 8003a4a:	3018      	adds	r0, #24
 8003a4c:	4283      	cmp	r3, r0
 8003a4e:	d03e      	beq.n	8003ace <DMA_CalcBaseAndBitshift+0xb2>
 8003a50:	3018      	adds	r0, #24
 8003a52:	4283      	cmp	r3, r0
 8003a54:	d02a      	beq.n	8003aac <DMA_CalcBaseAndBitshift+0x90>
 8003a56:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8003a5a:	4283      	cmp	r3, r0
 8003a5c:	d035      	beq.n	8003aca <DMA_CalcBaseAndBitshift+0xae>
 8003a5e:	4928      	ldr	r1, [pc, #160]	@ (8003b00 <DMA_CalcBaseAndBitshift+0xe4>)
 8003a60:	428b      	cmp	r3, r1
 8003a62:	d031      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xac>
 8003a64:	3118      	adds	r1, #24
 8003a66:	428b      	cmp	r3, r1
 8003a68:	d034      	beq.n	8003ad4 <DMA_CalcBaseAndBitshift+0xb8>
 8003a6a:	3118      	adds	r1, #24
 8003a6c:	428b      	cmp	r3, r1
 8003a6e:	d034      	beq.n	8003ada <DMA_CalcBaseAndBitshift+0xbe>
 8003a70:	3118      	adds	r1, #24
 8003a72:	428b      	cmp	r3, r1
 8003a74:	d034      	beq.n	8003ae0 <DMA_CalcBaseAndBitshift+0xc4>
 8003a76:	3118      	adds	r1, #24
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	d034      	beq.n	8003ae6 <DMA_CalcBaseAndBitshift+0xca>
 8003a7c:	3118      	adds	r1, #24
 8003a7e:	428b      	cmp	r3, r1
 8003a80:	d034      	beq.n	8003aec <DMA_CalcBaseAndBitshift+0xd0>
 8003a82:	3118      	adds	r1, #24
 8003a84:	428b      	cmp	r3, r1
 8003a86:	d034      	beq.n	8003af2 <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003a88:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8003a8c:	e011      	b.n	8003ab2 <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	491c      	ldr	r1, [pc, #112]	@ (8003b04 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a92:	481d      	ldr	r0, [pc, #116]	@ (8003b08 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a94:	3b10      	subs	r3, #16
 8003a96:	fba1 1303 	umull	r1, r3, r1, r3
{
 8003a9a:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a9c:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a9e:	4c1b      	ldr	r4, [pc, #108]	@ (8003b0c <DMA_CalcBaseAndBitshift+0xf0>)
 8003aa0:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8003aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003aa6:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 8003aaa:	4770      	bx	lr
 8003aac:	2116      	movs	r1, #22
 8003aae:	4818      	ldr	r0, [pc, #96]	@ (8003b10 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ab0:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ab2:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8003ab4:	4770      	bx	lr
 8003ab6:	2110      	movs	r1, #16
 8003ab8:	4813      	ldr	r0, [pc, #76]	@ (8003b08 <DMA_CalcBaseAndBitshift+0xec>)
 8003aba:	e7f9      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x94>
 8003abc:	2116      	movs	r1, #22
 8003abe:	4812      	ldr	r0, [pc, #72]	@ (8003b08 <DMA_CalcBaseAndBitshift+0xec>)
 8003ac0:	e7f6      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x94>
 8003ac2:	2106      	movs	r1, #6
 8003ac4:	4812      	ldr	r0, [pc, #72]	@ (8003b10 <DMA_CalcBaseAndBitshift+0xf4>)
 8003ac6:	e7f3      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x94>
 8003ac8:	2106      	movs	r1, #6
 8003aca:	4812      	ldr	r0, [pc, #72]	@ (8003b14 <DMA_CalcBaseAndBitshift+0xf8>)
 8003acc:	e7f0      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x94>
 8003ace:	2110      	movs	r1, #16
 8003ad0:	480f      	ldr	r0, [pc, #60]	@ (8003b10 <DMA_CalcBaseAndBitshift+0xf4>)
 8003ad2:	e7ed      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x94>
 8003ad4:	2110      	movs	r1, #16
 8003ad6:	480f      	ldr	r0, [pc, #60]	@ (8003b14 <DMA_CalcBaseAndBitshift+0xf8>)
 8003ad8:	e7ea      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x94>
 8003ada:	2116      	movs	r1, #22
 8003adc:	480d      	ldr	r0, [pc, #52]	@ (8003b14 <DMA_CalcBaseAndBitshift+0xf8>)
 8003ade:	e7e7      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x94>
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	480d      	ldr	r0, [pc, #52]	@ (8003b18 <DMA_CalcBaseAndBitshift+0xfc>)
 8003ae4:	e7e4      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x94>
 8003ae6:	2106      	movs	r1, #6
 8003ae8:	480b      	ldr	r0, [pc, #44]	@ (8003b18 <DMA_CalcBaseAndBitshift+0xfc>)
 8003aea:	e7e1      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x94>
 8003aec:	2110      	movs	r1, #16
 8003aee:	480a      	ldr	r0, [pc, #40]	@ (8003b18 <DMA_CalcBaseAndBitshift+0xfc>)
 8003af0:	e7de      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x94>
 8003af2:	2116      	movs	r1, #22
 8003af4:	4808      	ldr	r0, [pc, #32]	@ (8003b18 <DMA_CalcBaseAndBitshift+0xfc>)
 8003af6:	e7db      	b.n	8003ab0 <DMA_CalcBaseAndBitshift+0x94>
 8003af8:	40020010 	.word	0x40020010
 8003afc:	40020040 	.word	0x40020040
 8003b00:	40020428 	.word	0x40020428
 8003b04:	aaaaaaab 	.word	0xaaaaaaab
 8003b08:	40020000 	.word	0x40020000
 8003b0c:	0806fbd4 	.word	0x0806fbd4
 8003b10:	40020004 	.word	0x40020004
 8003b14:	40020400 	.word	0x40020400
 8003b18:	40020404 	.word	0x40020404

08003b1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003b1c:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b1e:	4b28      	ldr	r3, [pc, #160]	@ (8003bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8003b20:	4928      	ldr	r1, [pc, #160]	@ (8003bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
{
 8003b22:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b24:	4d28      	ldr	r5, [pc, #160]	@ (8003bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8003b26:	4c29      	ldr	r4, [pc, #164]	@ (8003bcc <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8003b28:	42aa      	cmp	r2, r5
 8003b2a:	bf18      	it	ne
 8003b2c:	429a      	cmpne	r2, r3
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	428a      	cmp	r2, r1
 8003b36:	bf08      	it	eq
 8003b38:	f043 0301 	orreq.w	r3, r3, #1
 8003b3c:	3128      	adds	r1, #40	@ 0x28
 8003b3e:	42a2      	cmp	r2, r4
 8003b40:	bf08      	it	eq
 8003b42:	f043 0301 	orreq.w	r3, r3, #1
 8003b46:	3428      	adds	r4, #40	@ 0x28
 8003b48:	428a      	cmp	r2, r1
 8003b4a:	bf08      	it	eq
 8003b4c:	f043 0301 	orreq.w	r3, r3, #1
 8003b50:	3128      	adds	r1, #40	@ 0x28
 8003b52:	42a2      	cmp	r2, r4
 8003b54:	bf08      	it	eq
 8003b56:	f043 0301 	orreq.w	r3, r3, #1
 8003b5a:	428a      	cmp	r2, r1
 8003b5c:	bf08      	it	eq
 8003b5e:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b62:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b64:	b913      	cbnz	r3, 8003b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8003b66:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d111      	bne.n	8003b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003b6c:	f1a1 0308 	sub.w	r3, r1, #8
 8003b70:	4c18      	ldr	r4, [pc, #96]	@ (8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b72:	4a19      	ldr	r2, [pc, #100]	@ (8003bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b74:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003b76:	fba4 4303 	umull	r4, r3, r4, r3
 8003b7a:	4c18      	ldr	r4, [pc, #96]	@ (8003bdc <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 8003b7c:	091d      	lsrs	r5, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b7e:	eb02 1313 	add.w	r3, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b82:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b84:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b86:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003b88:	e9c0 3418 	strd	r3, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003b8c:	bc30      	pop	{r4, r5}
 8003b8e:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b90:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b94:	4912      	ldr	r1, [pc, #72]	@ (8003be0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b96:	4c13      	ldr	r4, [pc, #76]	@ (8003be4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b98:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b9a:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b9e:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ba0:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ba4:	d908      	bls.n	8003bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ba6:	f003 041f 	and.w	r4, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003baa:	4a0f      	ldr	r2, [pc, #60]	@ (8003be8 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bac:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003bae:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bb0:	40a1      	lsls	r1, r4
 8003bb2:	4c0e      	ldr	r4, [pc, #56]	@ (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003bb4:	0093      	lsls	r3, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bb6:	e7e6      	b.n	8003b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
      stream_number += 8U;
 8003bb8:	3308      	adds	r3, #8
 8003bba:	461c      	mov	r4, r3
 8003bbc:	e7f5      	b.n	8003baa <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
 8003bbe:	bf00      	nop
 8003bc0:	58025408 	.word	0x58025408
 8003bc4:	58025430 	.word	0x58025430
 8003bc8:	5802541c 	.word	0x5802541c
 8003bcc:	58025444 	.word	0x58025444
 8003bd0:	58025494 	.word	0x58025494
 8003bd4:	cccccccd 	.word	0xcccccccd
 8003bd8:	16009600 	.word	0x16009600
 8003bdc:	58025880 	.word	0x58025880
 8003be0:	bffdfbf0 	.word	0xbffdfbf0
 8003be4:	aaaaaaab 	.word	0xaaaaaaab
 8003be8:	10008200 	.word	0x10008200
 8003bec:	40020880 	.word	0x40020880

08003bf0 <HAL_DMA_Init>:
{
 8003bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf4:	4605      	mov	r5, r0
 8003bf6:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8003bf8:	f7fe fd64 	bl	80026c4 <HAL_GetTick>
  if(hdma == NULL)
 8003bfc:	2d00      	cmp	r5, #0
 8003bfe:	f000 81a1 	beq.w	8003f44 <HAL_DMA_Init+0x354>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c02:	682c      	ldr	r4, [r5, #0]
 8003c04:	4606      	mov	r6, r0
 8003c06:	4bac      	ldr	r3, [pc, #688]	@ (8003eb8 <HAL_DMA_Init+0x2c8>)
 8003c08:	4aac      	ldr	r2, [pc, #688]	@ (8003ebc <HAL_DMA_Init+0x2cc>)
 8003c0a:	4294      	cmp	r4, r2
 8003c0c:	bf18      	it	ne
 8003c0e:	429c      	cmpne	r4, r3
 8003c10:	f102 0218 	add.w	r2, r2, #24
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	4294      	cmp	r4, r2
 8003c1c:	bf08      	it	eq
 8003c1e:	f043 0301 	orreq.w	r3, r3, #1
 8003c22:	3218      	adds	r2, #24
 8003c24:	4294      	cmp	r4, r2
 8003c26:	bf08      	it	eq
 8003c28:	f043 0301 	orreq.w	r3, r3, #1
 8003c2c:	3218      	adds	r2, #24
 8003c2e:	4294      	cmp	r4, r2
 8003c30:	bf08      	it	eq
 8003c32:	f043 0301 	orreq.w	r3, r3, #1
 8003c36:	3218      	adds	r2, #24
 8003c38:	4294      	cmp	r4, r2
 8003c3a:	bf08      	it	eq
 8003c3c:	f043 0301 	orreq.w	r3, r3, #1
 8003c40:	3218      	adds	r2, #24
 8003c42:	4294      	cmp	r4, r2
 8003c44:	bf08      	it	eq
 8003c46:	f043 0301 	orreq.w	r3, r3, #1
 8003c4a:	3218      	adds	r2, #24
 8003c4c:	4294      	cmp	r4, r2
 8003c4e:	bf08      	it	eq
 8003c50:	f043 0301 	orreq.w	r3, r3, #1
 8003c54:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8003c58:	4294      	cmp	r4, r2
 8003c5a:	bf08      	it	eq
 8003c5c:	f043 0301 	orreq.w	r3, r3, #1
 8003c60:	3218      	adds	r2, #24
 8003c62:	4294      	cmp	r4, r2
 8003c64:	bf08      	it	eq
 8003c66:	f043 0301 	orreq.w	r3, r3, #1
 8003c6a:	3218      	adds	r2, #24
 8003c6c:	4294      	cmp	r4, r2
 8003c6e:	bf08      	it	eq
 8003c70:	f043 0301 	orreq.w	r3, r3, #1
 8003c74:	3218      	adds	r2, #24
 8003c76:	4294      	cmp	r4, r2
 8003c78:	bf08      	it	eq
 8003c7a:	f043 0301 	orreq.w	r3, r3, #1
 8003c7e:	3218      	adds	r2, #24
 8003c80:	4294      	cmp	r4, r2
 8003c82:	bf08      	it	eq
 8003c84:	f043 0301 	orreq.w	r3, r3, #1
 8003c88:	3218      	adds	r2, #24
 8003c8a:	4294      	cmp	r4, r2
 8003c8c:	bf08      	it	eq
 8003c8e:	f043 0301 	orreq.w	r3, r3, #1
 8003c92:	3218      	adds	r2, #24
 8003c94:	4294      	cmp	r4, r2
 8003c96:	bf08      	it	eq
 8003c98:	f043 0301 	orreq.w	r3, r3, #1
 8003c9c:	b91b      	cbnz	r3, 8003ca6 <HAL_DMA_Init+0xb6>
 8003c9e:	4b88      	ldr	r3, [pc, #544]	@ (8003ec0 <HAL_DMA_Init+0x2d0>)
 8003ca0:	429c      	cmp	r4, r3
 8003ca2:	f040 8196 	bne.w	8003fd2 <HAL_DMA_Init+0x3e2>
    __HAL_UNLOCK(hdma);
 8003ca6:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ca8:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8003caa:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cae:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	e006      	b.n	8003cca <HAL_DMA_Init+0xda>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cbc:	f7fe fd02 	bl	80026c4 <HAL_GetTick>
 8003cc0:	1b80      	subs	r0, r0, r6
 8003cc2:	2805      	cmp	r0, #5
 8003cc4:	f200 8142 	bhi.w	8003f4c <HAL_DMA_Init+0x35c>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cc8:	682c      	ldr	r4, [r5, #0]
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	07df      	lsls	r7, r3, #31
 8003cce:	d4f5      	bmi.n	8003cbc <HAL_DMA_Init+0xcc>
    registerValue |=  hdma->Init.Direction           |
 8003cd0:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cd4:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8003cd6:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd8:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003cda:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6969      	ldr	r1, [r5, #20]
 8003ce0:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ce2:	69e9      	ldr	r1, [r5, #28]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ce8:	4976      	ldr	r1, [pc, #472]	@ (8003ec4 <HAL_DMA_Init+0x2d4>)
 8003cea:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cec:	6a28      	ldr	r0, [r5, #32]
 8003cee:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003cf0:	4875      	ldr	r0, [pc, #468]	@ (8003ec8 <HAL_DMA_Init+0x2d8>)
    registerValue |=  hdma->Init.Direction           |
 8003cf2:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cf4:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8003cf6:	2904      	cmp	r1, #4
 8003cf8:	f000 813d 	beq.w	8003f76 <HAL_DMA_Init+0x386>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003cfc:	6800      	ldr	r0, [r0, #0]
 8003cfe:	f36f 000f 	bfc	r0, #0, #16
 8003d02:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8003d06:	f080 80f1 	bcs.w	8003eec <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003d0a:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003d0c:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d0e:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003d12:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d14:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d16:	4628      	mov	r0, r5
 8003d18:	f7ff fe80 	bl	8003a1c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d1c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8003d1e:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d20:	496a      	ldr	r1, [pc, #424]	@ (8003ecc <HAL_DMA_Init+0x2dc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d22:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d26:	4f6a      	ldr	r7, [pc, #424]	@ (8003ed0 <HAL_DMA_Init+0x2e0>)
 8003d28:	1a61      	subs	r1, r4, r1
 8003d2a:	4e6a      	ldr	r6, [pc, #424]	@ (8003ed4 <HAL_DMA_Init+0x2e4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d2c:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d2e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ed8 <HAL_DMA_Init+0x2e8>)
 8003d30:	fab1 f181 	clz	r1, r1
 8003d34:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d36:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d38:	eba4 0a02 	sub.w	sl, r4, r2
 8003d3c:	4b67      	ldr	r3, [pc, #412]	@ (8003edc <HAL_DMA_Init+0x2ec>)
 8003d3e:	0949      	lsrs	r1, r1, #5
 8003d40:	4a5e      	ldr	r2, [pc, #376]	@ (8003ebc <HAL_DMA_Init+0x2cc>)
 8003d42:	faba fa8a 	clz	sl, sl
 8003d46:	eba4 0903 	sub.w	r9, r4, r3
 8003d4a:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb8 <HAL_DMA_Init+0x2c8>)
 8003d4c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8003d50:	fab7 f787 	clz	r7, r7
 8003d54:	4294      	cmp	r4, r2
 8003d56:	bf18      	it	ne
 8003d58:	429c      	cmpne	r4, r3
 8003d5a:	f102 0218 	add.w	r2, r2, #24
 8003d5e:	fab9 f989 	clz	r9, r9
 8003d62:	eba4 0606 	sub.w	r6, r4, r6
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8003d70:	fab6 f686 	clz	r6, r6
 8003d74:	4294      	cmp	r4, r2
 8003d76:	bf08      	it	eq
 8003d78:	f043 0301 	orreq.w	r3, r3, #1
 8003d7c:	3218      	adds	r2, #24
 8003d7e:	097f      	lsrs	r7, r7, #5
 8003d80:	4294      	cmp	r4, r2
 8003d82:	bf08      	it	eq
 8003d84:	f043 0301 	orreq.w	r3, r3, #1
 8003d88:	3218      	adds	r2, #24
 8003d8a:	0976      	lsrs	r6, r6, #5
 8003d8c:	4294      	cmp	r4, r2
 8003d8e:	bf08      	it	eq
 8003d90:	f043 0301 	orreq.w	r3, r3, #1
 8003d94:	3218      	adds	r2, #24
 8003d96:	4294      	cmp	r4, r2
 8003d98:	bf08      	it	eq
 8003d9a:	f043 0301 	orreq.w	r3, r3, #1
 8003d9e:	3218      	adds	r2, #24
 8003da0:	4294      	cmp	r4, r2
 8003da2:	bf08      	it	eq
 8003da4:	f043 0301 	orreq.w	r3, r3, #1
 8003da8:	3218      	adds	r2, #24
 8003daa:	4294      	cmp	r4, r2
 8003dac:	bf08      	it	eq
 8003dae:	f043 0301 	orreq.w	r3, r3, #1
 8003db2:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8003db6:	4294      	cmp	r4, r2
 8003db8:	bf08      	it	eq
 8003dba:	f043 0301 	orreq.w	r3, r3, #1
 8003dbe:	3218      	adds	r2, #24
 8003dc0:	4294      	cmp	r4, r2
 8003dc2:	bf08      	it	eq
 8003dc4:	f043 0301 	orreq.w	r3, r3, #1
 8003dc8:	3218      	adds	r2, #24
 8003dca:	4294      	cmp	r4, r2
 8003dcc:	bf08      	it	eq
 8003dce:	f043 0301 	orreq.w	r3, r3, #1
 8003dd2:	3218      	adds	r2, #24
 8003dd4:	4294      	cmp	r4, r2
 8003dd6:	bf08      	it	eq
 8003dd8:	f043 0301 	orreq.w	r3, r3, #1
 8003ddc:	3218      	adds	r2, #24
 8003dde:	4294      	cmp	r4, r2
 8003de0:	bf08      	it	eq
 8003de2:	f043 0301 	orreq.w	r3, r3, #1
 8003de6:	3218      	adds	r2, #24
 8003de8:	4294      	cmp	r4, r2
 8003dea:	bf08      	it	eq
 8003dec:	f043 0301 	orreq.w	r3, r3, #1
 8003df0:	3218      	adds	r2, #24
 8003df2:	4294      	cmp	r4, r2
 8003df4:	bf08      	it	eq
 8003df6:	f043 0301 	orreq.w	r3, r3, #1
 8003dfa:	3218      	adds	r2, #24
 8003dfc:	4294      	cmp	r4, r2
 8003dfe:	bf08      	it	eq
 8003e00:	f043 0301 	orreq.w	r3, r3, #1
 8003e04:	4a36      	ldr	r2, [pc, #216]	@ (8003ee0 <HAL_DMA_Init+0x2f0>)
 8003e06:	ea4a 0303 	orr.w	r3, sl, r3
 8003e0a:	eba4 0802 	sub.w	r8, r4, r2
 8003e0e:	323c      	adds	r2, #60	@ 0x3c
 8003e10:	430b      	orrs	r3, r1
 8003e12:	fab8 f888 	clz	r8, r8
 8003e16:	eba4 0b02 	sub.w	fp, r4, r2
 8003e1a:	3214      	adds	r2, #20
 8003e1c:	ea49 0303 	orr.w	r3, r9, r3
 8003e20:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8003e24:	fabb fb8b 	clz	fp, fp
 8003e28:	1aa2      	subs	r2, r4, r2
 8003e2a:	ea48 0303 	orr.w	r3, r8, r3
 8003e2e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8003e32:	fab2 f282 	clz	r2, r2
 8003e36:	433b      	orrs	r3, r7
 8003e38:	0952      	lsrs	r2, r2, #5
 8003e3a:	4333      	orrs	r3, r6
 8003e3c:	9201      	str	r2, [sp, #4]
 8003e3e:	ea5b 0303 	orrs.w	r3, fp, r3
 8003e42:	d100      	bne.n	8003e46 <HAL_DMA_Init+0x256>
 8003e44:	b382      	cbz	r2, 8003ea8 <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e46:	4628      	mov	r0, r5
 8003e48:	9100      	str	r1, [sp, #0]
 8003e4a:	f7ff fe67 	bl	8003b1c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e4e:	68ab      	ldr	r3, [r5, #8]
 8003e50:	9900      	ldr	r1, [sp, #0]
 8003e52:	2b80      	cmp	r3, #128	@ 0x80
 8003e54:	f000 8083 	beq.w	8003f5e <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e58:	686a      	ldr	r2, [r5, #4]
 8003e5a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003e5c:	b2d0      	uxtb	r0, r2
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e5e:	3a01      	subs	r2, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e60:	e9d5 4c19 	ldrd	r4, ip, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e64:	2a07      	cmp	r2, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e66:	6018      	str	r0, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e68:	f8c4 c004 	str.w	ip, [r4, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e6c:	d87e      	bhi.n	8003f6c <HAL_DMA_Init+0x37c>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e6e:	ea4a 0a01 	orr.w	sl, sl, r1
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e72:	1e44      	subs	r4, r0, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e74:	ea49 090a 	orr.w	r9, r9, sl
 8003e78:	ea48 0809 	orr.w	r8, r8, r9
 8003e7c:	ea47 0708 	orr.w	r7, r7, r8
 8003e80:	433e      	orrs	r6, r7
 8003e82:	ea5b 0606 	orrs.w	r6, fp, r6
 8003e86:	d103      	bne.n	8003e90 <HAL_DMA_Init+0x2a0>
 8003e88:	9b01      	ldr	r3, [sp, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 811d 	beq.w	80040ca <HAL_DMA_Init+0x4da>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e90:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <HAL_DMA_Init+0x2f4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003e92:	4915      	ldr	r1, [pc, #84]	@ (8003ee8 <HAL_DMA_Init+0x2f8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e94:	4402      	add	r2, r0
 8003e96:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003e98:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e9a:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003e9c:	40a3      	lsls	r3, r4
 8003e9e:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
 8003ea2:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ea4:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ea6:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003eaa:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eac:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003eae:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 8003eb2:	b003      	add	sp, #12
 8003eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb8:	40020010 	.word	0x40020010
 8003ebc:	40020028 	.word	0x40020028
 8003ec0:	400204b8 	.word	0x400204b8
 8003ec4:	fe10803f 	.word	0xfe10803f
 8003ec8:	5c001000 	.word	0x5c001000
 8003ecc:	5802541c 	.word	0x5802541c
 8003ed0:	58025458 	.word	0x58025458
 8003ed4:	5802546c 	.word	0x5802546c
 8003ed8:	58025408 	.word	0x58025408
 8003edc:	58025430 	.word	0x58025430
 8003ee0:	58025444 	.word	0x58025444
 8003ee4:	1600963f 	.word	0x1600963f
 8003ee8:	58025940 	.word	0x58025940
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003eec:	6868      	ldr	r0, [r5, #4]
 8003eee:	282e      	cmp	r0, #46	@ 0x2e
 8003ef0:	d932      	bls.n	8003f58 <HAL_DMA_Init+0x368>
 8003ef2:	383f      	subs	r0, #63	@ 0x3f
 8003ef4:	2813      	cmp	r0, #19
 8003ef6:	d806      	bhi.n	8003f06 <HAL_DMA_Init+0x316>
 8003ef8:	4e7a      	ldr	r6, [pc, #488]	@ (80040e4 <HAL_DMA_Init+0x4f4>)
 8003efa:	fa26 f000 	lsr.w	r0, r6, r0
 8003efe:	07c0      	lsls	r0, r0, #31
 8003f00:	d501      	bpl.n	8003f06 <HAL_DMA_Init+0x316>
        registerValue |= DMA_SxCR_TRBUFF;
 8003f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f06:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f08:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f0a:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f0c:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003f10:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f14:	f47f aefe 	bne.w	8003d14 <HAL_DMA_Init+0x124>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f18:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8003f1a:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8003f1c:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f43f aef8 	beq.w	8003d14 <HAL_DMA_Init+0x124>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	d138      	bne.n	8003f9a <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 8003f28:	2901      	cmp	r1, #1
 8003f2a:	d04d      	beq.n	8003fc8 <HAL_DMA_Init+0x3d8>
 8003f2c:	f031 0202 	bics.w	r2, r1, #2
 8003f30:	f47f aef0 	bne.w	8003d14 <HAL_DMA_Init+0x124>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f34:	01c2      	lsls	r2, r0, #7
 8003f36:	f57f aeed 	bpl.w	8003d14 <HAL_DMA_Init+0x124>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f3a:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8003f3c:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f3e:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8003f40:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8003f44:	2001      	movs	r0, #1
}
 8003f46:	b003      	add	sp, #12
 8003f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f4c:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f4e:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f50:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f52:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        return HAL_ERROR;
 8003f56:	e7f5      	b.n	8003f44 <HAL_DMA_Init+0x354>
 8003f58:	2828      	cmp	r0, #40	@ 0x28
 8003f5a:	d9d4      	bls.n	8003f06 <HAL_DMA_Init+0x316>
 8003f5c:	e7d1      	b.n	8003f02 <HAL_DMA_Init+0x312>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f5e:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f60:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8003f62:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f66:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f68:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f6a:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f72:	676b      	str	r3, [r5, #116]	@ 0x74
 8003f74:	e798      	b.n	8003ea8 <HAL_DMA_Init+0x2b8>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f76:	6806      	ldr	r6, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f78:	e9d5 070b 	ldrd	r0, r7, [r5, #44]	@ 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f7c:	f36f 060f 	bfc	r6, #0, #16
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f80:	4307      	orrs	r7, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f82:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f86:	ea43 0307 	orr.w	r3, r3, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f8a:	d2af      	bcs.n	8003eec <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f8c:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f8e:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f90:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003f94:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f98:	e7bf      	b.n	8003f1a <HAL_DMA_Init+0x32a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f9a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003f9e:	d004      	beq.n	8003faa <HAL_DMA_Init+0x3ba>
    switch (hdma->Init.FIFOThreshold)
 8003fa0:	2902      	cmp	r1, #2
 8003fa2:	d9ca      	bls.n	8003f3a <HAL_DMA_Init+0x34a>
 8003fa4:	2903      	cmp	r1, #3
 8003fa6:	d0c5      	beq.n	8003f34 <HAL_DMA_Init+0x344>
 8003fa8:	e6b4      	b.n	8003d14 <HAL_DMA_Init+0x124>
    switch (hdma->Init.FIFOThreshold)
 8003faa:	2903      	cmp	r1, #3
 8003fac:	f63f aeb2 	bhi.w	8003d14 <HAL_DMA_Init+0x124>
 8003fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <HAL_DMA_Init+0x3c8>)
 8003fb2:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003f3b 	.word	0x08003f3b
 8003fbc:	08003f35 	.word	0x08003f35
 8003fc0:	08003f3b 	.word	0x08003f3b
 8003fc4:	08003fc9 	.word	0x08003fc9
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fc8:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8003fcc:	f47f aea2 	bne.w	8003d14 <HAL_DMA_Init+0x124>
 8003fd0:	e7b3      	b.n	8003f3a <HAL_DMA_Init+0x34a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fd2:	4a45      	ldr	r2, [pc, #276]	@ (80040e8 <HAL_DMA_Init+0x4f8>)
 8003fd4:	4945      	ldr	r1, [pc, #276]	@ (80040ec <HAL_DMA_Init+0x4fc>)
 8003fd6:	4b46      	ldr	r3, [pc, #280]	@ (80040f0 <HAL_DMA_Init+0x500>)
 8003fd8:	eba4 0a02 	sub.w	sl, r4, r2
 8003fdc:	1a61      	subs	r1, r4, r1
 8003fde:	4f45      	ldr	r7, [pc, #276]	@ (80040f4 <HAL_DMA_Init+0x504>)
 8003fe0:	eba4 0903 	sub.w	r9, r4, r3
 8003fe4:	faba fa8a 	clz	sl, sl
 8003fe8:	3314      	adds	r3, #20
 8003fea:	fab1 f181 	clz	r1, r1
 8003fee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8003ff2:	fab9 f989 	clz	r9, r9
 8003ff6:	eba4 0803 	sub.w	r8, r4, r3
 8003ffa:	0949      	lsrs	r1, r1, #5
 8003ffc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8004000:	1be7      	subs	r7, r4, r7
 8004002:	fab8 f888 	clz	r8, r8
 8004006:	ea4a 0301 	orr.w	r3, sl, r1
 800400a:	4e3b      	ldr	r6, [pc, #236]	@ (80040f8 <HAL_DMA_Init+0x508>)
 800400c:	3278      	adds	r2, #120	@ 0x78
 800400e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004012:	ea49 0303 	orr.w	r3, r9, r3
 8004016:	fab7 f787 	clz	r7, r7
 800401a:	1ba6      	subs	r6, r4, r6
 800401c:	eba4 0b02 	sub.w	fp, r4, r2
 8004020:	ea48 0303 	orr.w	r3, r8, r3
 8004024:	097f      	lsrs	r7, r7, #5
 8004026:	fab6 f686 	clz	r6, r6
 800402a:	3214      	adds	r2, #20
 800402c:	fabb fb8b 	clz	fp, fp
 8004030:	433b      	orrs	r3, r7
 8004032:	0976      	lsrs	r6, r6, #5
 8004034:	1aa2      	subs	r2, r4, r2
 8004036:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800403a:	4333      	orrs	r3, r6
 800403c:	fab2 f282 	clz	r2, r2
 8004040:	ea5b 0303 	orrs.w	r3, fp, r3
 8004044:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8004048:	9201      	str	r2, [sp, #4]
 800404a:	d101      	bne.n	8004050 <HAL_DMA_Init+0x460>
 800404c:	2a00      	cmp	r2, #0
 800404e:	d043      	beq.n	80040d8 <HAL_DMA_Init+0x4e8>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004050:	2302      	movs	r3, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004052:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 800410c <HAL_DMA_Init+0x51c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004056:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800405a:	2300      	movs	r3, #0
 800405c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004060:	68ab      	ldr	r3, [r5, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004062:	6822      	ldr	r2, [r4, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004064:	2b40      	cmp	r3, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004066:	ea02 0e0e 	and.w	lr, r2, lr
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800406a:	d033      	beq.n	80040d4 <HAL_DMA_Init+0x4e4>
 800406c:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 8004070:	fab3 f383 	clz	r3, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	0398      	lsls	r0, r3, #14
 8004078:	9100      	str	r1, [sp, #0]
 800407a:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 800407e:	ea43 0c02 	orr.w	ip, r3, r2
 8004082:	696a      	ldr	r2, [r5, #20]
 8004084:	69ab      	ldr	r3, [r5, #24]
 8004086:	ea4c 0c02 	orr.w	ip, ip, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800408a:	4a1c      	ldr	r2, [pc, #112]	@ (80040fc <HAL_DMA_Init+0x50c>)
 800408c:	ea4c 0c03 	orr.w	ip, ip, r3
 8004090:	69eb      	ldr	r3, [r5, #28]
 8004092:	4422      	add	r2, r4
 8004094:	ea4c 0c03 	orr.w	ip, ip, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004098:	6a2b      	ldr	r3, [r5, #32]
 800409a:	ea4e 1313 	orr.w	r3, lr, r3, lsr #4
 800409e:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040a2:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80040a4:	4b16      	ldr	r3, [pc, #88]	@ (8004100 <HAL_DMA_Init+0x510>)
 80040a6:	fba3 2302 	umull	r2, r3, r3, r2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80040aa:	6020      	str	r0, [r4, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ac:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	65eb      	str	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040b4:	f7ff fcb2 	bl	8003a1c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040b8:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ba:	4602      	mov	r2, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040bc:	9900      	ldr	r1, [sp, #0]
 80040be:	f003 001f 	and.w	r0, r3, #31
 80040c2:	2301      	movs	r3, #1
 80040c4:	4083      	lsls	r3, r0
 80040c6:	6053      	str	r3, [r2, #4]
 80040c8:	e6bd      	b.n	8003e46 <HAL_DMA_Init+0x256>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004104 <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040cc:	490e      	ldr	r1, [pc, #56]	@ (8004108 <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040ce:	4402      	add	r2, r0
 80040d0:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040d2:	e6e1      	b.n	8003e98 <HAL_DMA_Init+0x2a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040d4:	2010      	movs	r0, #16
 80040d6:	e7cf      	b.n	8004078 <HAL_DMA_Init+0x488>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040d8:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80040da:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040dc:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80040de:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 80040e2:	e72f      	b.n	8003f44 <HAL_DMA_Init+0x354>
 80040e4:	000f030f 	.word	0x000f030f
 80040e8:	58025408 	.word	0x58025408
 80040ec:	5802541c 	.word	0x5802541c
 80040f0:	58025430 	.word	0x58025430
 80040f4:	58025458 	.word	0x58025458
 80040f8:	5802546c 	.word	0x5802546c
 80040fc:	a7fdabf8 	.word	0xa7fdabf8
 8004100:	cccccccd 	.word	0xcccccccd
 8004104:	1000823f 	.word	0x1000823f
 8004108:	40020940 	.word	0x40020940
 800410c:	fffe000f 	.word	0xfffe000f

08004110 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004110:	2800      	cmp	r0, #0
 8004112:	f000 8221 	beq.w	8004558 <HAL_DMA_Start_IT+0x448>
{
 8004116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(hdma);
 800411a:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 800411e:	2c01      	cmp	r4, #1
 8004120:	f000 8217 	beq.w	8004552 <HAL_DMA_Start_IT+0x442>
 8004124:	2401      	movs	r4, #1
 8004126:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800412a:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 800412e:	2c01      	cmp	r4, #1
 8004130:	d008      	beq.n	8004144 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 8004136:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004138:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800413a:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 800413e:	2001      	movs	r0, #1
}
 8004140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004144:	2402      	movs	r4, #2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004146:	4e69      	ldr	r6, [pc, #420]	@ (80042ec <HAL_DMA_Start_IT+0x1dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004148:	f8df e1a8 	ldr.w	lr, [pc, #424]	@ 80042f4 <HAL_DMA_Start_IT+0x1e4>
    hdma->State = HAL_DMA_STATE_BUSY;
 800414c:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004150:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8004152:	4d67      	ldr	r5, [pc, #412]	@ (80042f0 <HAL_DMA_Start_IT+0x1e0>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004154:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8004156:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004158:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004308 <HAL_DMA_Start_IT+0x1f8>
 800415c:	4574      	cmp	r4, lr
 800415e:	bf18      	it	ne
 8004160:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 8004162:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 800430c <HAL_DMA_Start_IT+0x1fc>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004166:	f8d0 a058 	ldr.w	sl, [r0, #88]	@ 0x58
 800416a:	bf0c      	ite	eq
 800416c:	2601      	moveq	r6, #1
 800416e:	2600      	movne	r6, #0
 8004170:	4544      	cmp	r4, r8
 8004172:	bf14      	ite	ne
 8004174:	46b1      	movne	r9, r6
 8004176:	f046 0901 	orreq.w	r9, r6, #1
    __HAL_DMA_DISABLE(hdma);
 800417a:	42ac      	cmp	r4, r5
 800417c:	bf18      	it	ne
 800417e:	4564      	cmpne	r4, ip
 8004180:	bf0c      	ite	eq
 8004182:	2501      	moveq	r5, #1
 8004184:	2500      	movne	r5, #0
 8004186:	f040 80c3 	bne.w	8004310 <HAL_DMA_Start_IT+0x200>
 800418a:	f8d4 c000 	ldr.w	ip, [r4]
 800418e:	f02c 0c01 	bic.w	ip, ip, #1
 8004192:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004196:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800419a:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
 800419e:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80041a0:	f1bc 0f00 	cmp.w	ip, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041a6:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 80041aa:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041ac:	b91d      	cbnz	r5, 80041b6 <HAL_DMA_Start_IT+0xa6>
 80041ae:	f1b9 0f00 	cmp.w	r9, #0
 80041b2:	f000 8130 	beq.w	8004416 <HAL_DMA_Start_IT+0x306>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041b6:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 80041b8:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 80041bc:	f007 081f 	and.w	r8, r7, #31
 80041c0:	fa0e fe08 	lsl.w	lr, lr, r8
 80041c4:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041c8:	6827      	ldr	r7, [r4, #0]
 80041ca:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 80041ce:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80041d0:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041d2:	6883      	ldr	r3, [r0, #8]
 80041d4:	2b40      	cmp	r3, #64	@ 0x40
 80041d6:	f000 81c1 	beq.w	800455c <HAL_DMA_Start_IT+0x44c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80041da:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80041dc:	60e2      	str	r2, [r4, #12]
      if(hdma->XferHalfCpltCallback != NULL)
 80041de:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041e0:	2d00      	cmp	r5, #0
 80041e2:	f040 81a1 	bne.w	8004528 <HAL_DMA_Start_IT+0x418>
 80041e6:	4b43      	ldr	r3, [pc, #268]	@ (80042f4 <HAL_DMA_Start_IT+0x1e4>)
 80041e8:	429c      	cmp	r4, r3
 80041ea:	f000 81de 	beq.w	80045aa <HAL_DMA_Start_IT+0x49a>
 80041ee:	3318      	adds	r3, #24
 80041f0:	429c      	cmp	r4, r3
 80041f2:	f000 81f6 	beq.w	80045e2 <HAL_DMA_Start_IT+0x4d2>
 80041f6:	f1b9 0f00 	cmp.w	r9, #0
 80041fa:	f040 81c7 	bne.w	800458c <HAL_DMA_Start_IT+0x47c>
 80041fe:	4b3e      	ldr	r3, [pc, #248]	@ (80042f8 <HAL_DMA_Start_IT+0x1e8>)
 8004200:	429c      	cmp	r4, r3
 8004202:	f000 8201 	beq.w	8004608 <HAL_DMA_Start_IT+0x4f8>
 8004206:	4b3d      	ldr	r3, [pc, #244]	@ (80042fc <HAL_DMA_Start_IT+0x1ec>)
 8004208:	429c      	cmp	r4, r3
 800420a:	f000 8209 	beq.w	8004620 <HAL_DMA_Start_IT+0x510>
 800420e:	3318      	adds	r3, #24
 8004210:	429c      	cmp	r4, r3
 8004212:	f000 8223 	beq.w	800465c <HAL_DMA_Start_IT+0x54c>
 8004216:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800421a:	429c      	cmp	r4, r3
 800421c:	f000 8233 	beq.w	8004686 <HAL_DMA_Start_IT+0x576>
 8004220:	3318      	adds	r3, #24
 8004222:	429c      	cmp	r4, r3
 8004224:	f000 8242 	beq.w	80046ac <HAL_DMA_Start_IT+0x59c>
 8004228:	3318      	adds	r3, #24
 800422a:	429c      	cmp	r4, r3
 800422c:	f000 8249 	beq.w	80046c2 <HAL_DMA_Start_IT+0x5b2>
 8004230:	3318      	adds	r3, #24
 8004232:	429c      	cmp	r4, r3
 8004234:	f000 8250 	beq.w	80046d8 <HAL_DMA_Start_IT+0x5c8>
 8004238:	3318      	adds	r3, #24
 800423a:	429c      	cmp	r4, r3
 800423c:	f000 8257 	beq.w	80046ee <HAL_DMA_Start_IT+0x5de>
 8004240:	3318      	adds	r3, #24
 8004242:	429c      	cmp	r4, r3
 8004244:	f000 8267 	beq.w	8004716 <HAL_DMA_Start_IT+0x606>
 8004248:	3318      	adds	r3, #24
 800424a:	429c      	cmp	r4, r3
 800424c:	f000 8265 	beq.w	800471a <HAL_DMA_Start_IT+0x60a>
 8004250:	3318      	adds	r3, #24
 8004252:	429c      	cmp	r4, r3
 8004254:	f000 8275 	beq.w	8004742 <HAL_DMA_Start_IT+0x632>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	f023 030e 	bic.w	r3, r3, #14
 800425e:	f043 030a 	orr.w	r3, r3, #10
 8004262:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004264:	b11a      	cbz	r2, 800426e <HAL_DMA_Start_IT+0x15e>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	f043 0304 	orr.w	r3, r3, #4
 800426c:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800426e:	4b24      	ldr	r3, [pc, #144]	@ (8004300 <HAL_DMA_Start_IT+0x1f0>)
 8004270:	4a24      	ldr	r2, [pc, #144]	@ (8004304 <HAL_DMA_Start_IT+0x1f4>)
 8004272:	4294      	cmp	r4, r2
 8004274:	bf18      	it	ne
 8004276:	429c      	cmpne	r4, r3
 8004278:	f102 0214 	add.w	r2, r2, #20
 800427c:	bf0c      	ite	eq
 800427e:	2301      	moveq	r3, #1
 8004280:	2300      	movne	r3, #0
 8004282:	4294      	cmp	r4, r2
 8004284:	bf08      	it	eq
 8004286:	f043 0301 	orreq.w	r3, r3, #1
 800428a:	3214      	adds	r2, #20
 800428c:	4294      	cmp	r4, r2
 800428e:	bf08      	it	eq
 8004290:	f043 0301 	orreq.w	r3, r3, #1
 8004294:	3214      	adds	r2, #20
 8004296:	4294      	cmp	r4, r2
 8004298:	bf08      	it	eq
 800429a:	f043 0301 	orreq.w	r3, r3, #1
 800429e:	3214      	adds	r2, #20
 80042a0:	4294      	cmp	r4, r2
 80042a2:	bf08      	it	eq
 80042a4:	f043 0301 	orreq.w	r3, r3, #1
 80042a8:	3214      	adds	r2, #20
 80042aa:	4294      	cmp	r4, r2
 80042ac:	bf08      	it	eq
 80042ae:	f043 0301 	orreq.w	r3, r3, #1
 80042b2:	3214      	adds	r2, #20
 80042b4:	4294      	cmp	r4, r2
 80042b6:	bf08      	it	eq
 80042b8:	f043 0301 	orreq.w	r3, r3, #1
 80042bc:	b17b      	cbz	r3, 80042de <HAL_DMA_Start_IT+0x1ce>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042be:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80042c0:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	03d2      	lsls	r2, r2, #15
 80042c8:	f100 813e 	bmi.w	8004548 <HAL_DMA_Start_IT+0x438>
      if(hdma->DMAmuxRequestGen != 0U)
 80042cc:	f1bc 0f00 	cmp.w	ip, #0
 80042d0:	d005      	beq.n	80042de <HAL_DMA_Start_IT+0x1ce>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042d2:	f8dc 3000 	ldr.w	r3, [ip]
 80042d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042da:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 80042de:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6023      	str	r3, [r4, #0]
}
 80042e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ec:	40020070 	.word	0x40020070
 80042f0:	40020028 	.word	0x40020028
 80042f4:	40020040 	.word	0x40020040
 80042f8:	40020088 	.word	0x40020088
 80042fc:	400200a0 	.word	0x400200a0
 8004300:	58025408 	.word	0x58025408
 8004304:	5802541c 	.word	0x5802541c
 8004308:	40020058 	.word	0x40020058
 800430c:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8004310:	4574      	cmp	r4, lr
 8004312:	f000 8154 	beq.w	80045be <HAL_DMA_Start_IT+0x4ae>
 8004316:	4544      	cmp	r4, r8
 8004318:	f000 815a 	beq.w	80045d0 <HAL_DMA_Start_IT+0x4c0>
 800431c:	f1b9 0f00 	cmp.w	r9, #0
 8004320:	f040 811f 	bne.w	8004562 <HAL_DMA_Start_IT+0x452>
 8004324:	f8df c434 	ldr.w	ip, [pc, #1076]	@ 800475c <HAL_DMA_Start_IT+0x64c>
 8004328:	4564      	cmp	r4, ip
 800432a:	f000 8164 	beq.w	80045f6 <HAL_DMA_Start_IT+0x4e6>
 800432e:	f10c 0c18 	add.w	ip, ip, #24
 8004332:	4564      	cmp	r4, ip
 8004334:	f000 8180 	beq.w	8004638 <HAL_DMA_Start_IT+0x528>
 8004338:	f10c 0c18 	add.w	ip, ip, #24
 800433c:	4564      	cmp	r4, ip
 800433e:	f000 8184 	beq.w	800464a <HAL_DMA_Start_IT+0x53a>
 8004342:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 8004346:	4564      	cmp	r4, ip
 8004348:	f000 8194 	beq.w	8004674 <HAL_DMA_Start_IT+0x564>
 800434c:	f10c 0c18 	add.w	ip, ip, #24
 8004350:	4564      	cmp	r4, ip
 8004352:	f000 81a2 	beq.w	800469a <HAL_DMA_Start_IT+0x58a>
 8004356:	f10c 0c18 	add.w	ip, ip, #24
 800435a:	4564      	cmp	r4, ip
 800435c:	f000 81b3 	beq.w	80046c6 <HAL_DMA_Start_IT+0x5b6>
 8004360:	f10c 0c18 	add.w	ip, ip, #24
 8004364:	4564      	cmp	r4, ip
 8004366:	f000 81b9 	beq.w	80046dc <HAL_DMA_Start_IT+0x5cc>
 800436a:	f10c 0c18 	add.w	ip, ip, #24
 800436e:	4564      	cmp	r4, ip
 8004370:	f000 81bf 	beq.w	80046f2 <HAL_DMA_Start_IT+0x5e2>
 8004374:	f10c 0c18 	add.w	ip, ip, #24
 8004378:	4564      	cmp	r4, ip
 800437a:	f000 81c3 	beq.w	8004704 <HAL_DMA_Start_IT+0x5f4>
 800437e:	f10c 0c18 	add.w	ip, ip, #24
 8004382:	4564      	cmp	r4, ip
 8004384:	f000 81cb 	beq.w	800471e <HAL_DMA_Start_IT+0x60e>
 8004388:	f10c 0c18 	add.w	ip, ip, #24
 800438c:	4564      	cmp	r4, ip
 800438e:	f000 81cf 	beq.w	8004730 <HAL_DMA_Start_IT+0x620>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004392:	f8df c3cc 	ldr.w	ip, [pc, #972]	@ 8004760 <HAL_DMA_Start_IT+0x650>
 8004396:	f8df e3cc 	ldr.w	lr, [pc, #972]	@ 8004764 <HAL_DMA_Start_IT+0x654>
 800439a:	4574      	cmp	r4, lr
 800439c:	bf18      	it	ne
 800439e:	4564      	cmpne	r4, ip
 80043a0:	f10e 0e28 	add.w	lr, lr, #40	@ 0x28
 80043a4:	bf0c      	ite	eq
 80043a6:	f04f 0c01 	moveq.w	ip, #1
 80043aa:	f04f 0c00 	movne.w	ip, #0
 80043ae:	4574      	cmp	r4, lr
 80043b0:	bf08      	it	eq
 80043b2:	f04c 0c01 	orreq.w	ip, ip, #1
 80043b6:	f10e 0e14 	add.w	lr, lr, #20
 80043ba:	4574      	cmp	r4, lr
 80043bc:	bf08      	it	eq
 80043be:	f04c 0c01 	orreq.w	ip, ip, #1
 80043c2:	f10e 0e14 	add.w	lr, lr, #20
 80043c6:	4574      	cmp	r4, lr
 80043c8:	bf08      	it	eq
 80043ca:	f04c 0c01 	orreq.w	ip, ip, #1
 80043ce:	f10e 0e14 	add.w	lr, lr, #20
 80043d2:	4574      	cmp	r4, lr
 80043d4:	bf08      	it	eq
 80043d6:	f04c 0c01 	orreq.w	ip, ip, #1
    __HAL_DMA_DISABLE(hdma);
 80043da:	f8d4 e000 	ldr.w	lr, [r4]
 80043de:	f02e 0e01 	bic.w	lr, lr, #1
 80043e2:	f8c4 e000 	str.w	lr, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043e6:	f8df e380 	ldr.w	lr, [pc, #896]	@ 8004768 <HAL_DMA_Start_IT+0x658>
 80043ea:	4574      	cmp	r4, lr
 80043ec:	bf08      	it	eq
 80043ee:	f04c 0c01 	orreq.w	ip, ip, #1
 80043f2:	f1bc 0f00 	cmp.w	ip, #0
 80043f6:	d103      	bne.n	8004400 <HAL_DMA_Start_IT+0x2f0>
 80043f8:	f8df c370 	ldr.w	ip, [pc, #880]	@ 800476c <HAL_DMA_Start_IT+0x65c>
 80043fc:	4564      	cmp	r4, ip
 80043fe:	d14f      	bne.n	80044a0 <HAL_DMA_Start_IT+0x390>
    if(hdma->DMAmuxRequestGen != 0U)
 8004400:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004404:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8004408:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800440a:	f1bc 0f00 	cmp.w	ip, #0
 800440e:	d002      	beq.n	8004416 <HAL_DMA_Start_IT+0x306>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004410:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8004414:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004416:	f8df e344 	ldr.w	lr, [pc, #836]	@ 800475c <HAL_DMA_Start_IT+0x64c>
 800441a:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 8004770 <HAL_DMA_Start_IT+0x660>
 800441e:	4544      	cmp	r4, r8
 8004420:	bf18      	it	ne
 8004422:	4574      	cmpne	r4, lr
 8004424:	f108 0818 	add.w	r8, r8, #24
 8004428:	bf0c      	ite	eq
 800442a:	f04f 0e01 	moveq.w	lr, #1
 800442e:	f04f 0e00 	movne.w	lr, #0
 8004432:	4544      	cmp	r4, r8
 8004434:	bf08      	it	eq
 8004436:	f04e 0e01 	orreq.w	lr, lr, #1
 800443a:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 800443e:	4544      	cmp	r4, r8
 8004440:	bf08      	it	eq
 8004442:	f04e 0e01 	orreq.w	lr, lr, #1
 8004446:	f108 0818 	add.w	r8, r8, #24
 800444a:	4544      	cmp	r4, r8
 800444c:	bf08      	it	eq
 800444e:	f04e 0e01 	orreq.w	lr, lr, #1
 8004452:	f108 0818 	add.w	r8, r8, #24
 8004456:	4544      	cmp	r4, r8
 8004458:	bf08      	it	eq
 800445a:	f04e 0e01 	orreq.w	lr, lr, #1
 800445e:	f108 0818 	add.w	r8, r8, #24
 8004462:	4544      	cmp	r4, r8
 8004464:	bf08      	it	eq
 8004466:	f04e 0e01 	orreq.w	lr, lr, #1
 800446a:	f108 0818 	add.w	r8, r8, #24
 800446e:	4544      	cmp	r4, r8
 8004470:	bf08      	it	eq
 8004472:	f04e 0e01 	orreq.w	lr, lr, #1
 8004476:	f108 0818 	add.w	r8, r8, #24
 800447a:	4544      	cmp	r4, r8
 800447c:	bf08      	it	eq
 800447e:	f04e 0e01 	orreq.w	lr, lr, #1
 8004482:	f108 0818 	add.w	r8, r8, #24
 8004486:	4544      	cmp	r4, r8
 8004488:	bf08      	it	eq
 800448a:	f04e 0e01 	orreq.w	lr, lr, #1
 800448e:	f1be 0f00 	cmp.w	lr, #0
 8004492:	f47f ae90 	bne.w	80041b6 <HAL_DMA_Start_IT+0xa6>
 8004496:	f8df e2dc 	ldr.w	lr, [pc, #732]	@ 8004774 <HAL_DMA_Start_IT+0x664>
 800449a:	4574      	cmp	r4, lr
 800449c:	f43f ae8b 	beq.w	80041b6 <HAL_DMA_Start_IT+0xa6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80044a0:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 8004764 <HAL_DMA_Start_IT+0x654>
 80044a4:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 8004760 <HAL_DMA_Start_IT+0x650>
 80044a8:	4574      	cmp	r4, lr
 80044aa:	bf18      	it	ne
 80044ac:	4564      	cmpne	r4, ip
 80044ae:	f10e 0e14 	add.w	lr, lr, #20
 80044b2:	bf0c      	ite	eq
 80044b4:	f04f 0c01 	moveq.w	ip, #1
 80044b8:	f04f 0c00 	movne.w	ip, #0
 80044bc:	4574      	cmp	r4, lr
 80044be:	bf08      	it	eq
 80044c0:	f04c 0c01 	orreq.w	ip, ip, #1
 80044c4:	f10e 0e14 	add.w	lr, lr, #20
 80044c8:	4574      	cmp	r4, lr
 80044ca:	bf08      	it	eq
 80044cc:	f04c 0c01 	orreq.w	ip, ip, #1
 80044d0:	f10e 0e14 	add.w	lr, lr, #20
 80044d4:	4574      	cmp	r4, lr
 80044d6:	bf08      	it	eq
 80044d8:	f04c 0c01 	orreq.w	ip, ip, #1
 80044dc:	f10e 0e14 	add.w	lr, lr, #20
 80044e0:	4574      	cmp	r4, lr
 80044e2:	bf08      	it	eq
 80044e4:	f04c 0c01 	orreq.w	ip, ip, #1
 80044e8:	f10e 0e14 	add.w	lr, lr, #20
 80044ec:	4574      	cmp	r4, lr
 80044ee:	bf08      	it	eq
 80044f0:	f04c 0c01 	orreq.w	ip, ip, #1
 80044f4:	f1bc 0f00 	cmp.w	ip, #0
 80044f8:	d104      	bne.n	8004504 <HAL_DMA_Start_IT+0x3f4>
 80044fa:	f8df c270 	ldr.w	ip, [pc, #624]	@ 800476c <HAL_DMA_Start_IT+0x65c>
 80044fe:	4564      	cmp	r4, ip
 8004500:	f040 8125 	bne.w	800474e <HAL_DMA_Start_IT+0x63e>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004504:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 8004506:	f04f 0c01 	mov.w	ip, #1
 800450a:	f006 0e1f 	and.w	lr, r6, #31
 800450e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004512:	f8ca c004 	str.w	ip, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004516:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004518:	6883      	ldr	r3, [r0, #8]
 800451a:	2b40      	cmp	r3, #64	@ 0x40
 800451c:	f000 8113 	beq.w	8004746 <HAL_DMA_Start_IT+0x636>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004520:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004522:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004524:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004526:	e65e      	b.n	80041e6 <HAL_DMA_Start_IT+0xd6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	f023 031e 	bic.w	r3, r3, #30
 800452e:	f043 0316 	orr.w	r3, r3, #22
 8004532:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004534:	b11a      	cbz	r2, 800453e <HAL_DMA_Start_IT+0x42e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	f043 0308 	orr.w	r3, r3, #8
 800453c:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800453e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	03d2      	lsls	r2, r2, #15
 8004544:	f57f aec2 	bpl.w	80042cc <HAL_DMA_Start_IT+0x1bc>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e6bc      	b.n	80042cc <HAL_DMA_Start_IT+0x1bc>
  __HAL_LOCK(hdma);
 8004552:	2002      	movs	r0, #2
}
 8004554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8004558:	2001      	movs	r0, #1
}
 800455a:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800455c:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800455e:	60e1      	str	r1, [r4, #12]
 8004560:	e63d      	b.n	80041de <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 8004562:	f8df e1f0 	ldr.w	lr, [pc, #496]	@ 8004754 <HAL_DMA_Start_IT+0x644>
 8004566:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 800456a:	f02c 0c01 	bic.w	ip, ip, #1
 800456e:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 8004572:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004576:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 800457a:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800457c:	f1bc 0f00 	cmp.w	ip, #0
 8004580:	f43f ae19 	beq.w	80041b6 <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004584:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8004588:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800458a:	e614      	b.n	80041b6 <HAL_DMA_Start_IT+0xa6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800458c:	4971      	ldr	r1, [pc, #452]	@ (8004754 <HAL_DMA_Start_IT+0x644>)
 800458e:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8004590:	f023 031e 	bic.w	r3, r3, #30
 8004594:	f043 0316 	orr.w	r3, r3, #22
 8004598:	670b      	str	r3, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 800459a:	2a00      	cmp	r2, #0
 800459c:	f43f ae8f 	beq.w	80042be <HAL_DMA_Start_IT+0x1ae>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	f043 0308 	orr.w	r3, r3, #8
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	e689      	b.n	80042be <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80045aa:	496a      	ldr	r1, [pc, #424]	@ (8004754 <HAL_DMA_Start_IT+0x644>)
 80045ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80045ae:	f023 031e 	bic.w	r3, r3, #30
 80045b2:	f043 0316 	orr.w	r3, r3, #22
 80045b6:	640b      	str	r3, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 80045b8:	2a00      	cmp	r2, #0
 80045ba:	d1f1      	bne.n	80045a0 <HAL_DMA_Start_IT+0x490>
 80045bc:	e67f      	b.n	80042be <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80045be:	f8df e194 	ldr.w	lr, [pc, #404]	@ 8004754 <HAL_DMA_Start_IT+0x644>
 80045c2:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 80045c6:	f02c 0c01 	bic.w	ip, ip, #1
 80045ca:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045ce:	e5e2      	b.n	8004196 <HAL_DMA_Start_IT+0x86>
    __HAL_DMA_DISABLE(hdma);
 80045d0:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8004754 <HAL_DMA_Start_IT+0x644>
 80045d4:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 80045d8:	f02c 0c01 	bic.w	ip, ip, #1
 80045dc:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045e0:	e7c7      	b.n	8004572 <HAL_DMA_Start_IT+0x462>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80045e2:	495c      	ldr	r1, [pc, #368]	@ (8004754 <HAL_DMA_Start_IT+0x644>)
 80045e4:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 80045e6:	f023 031e 	bic.w	r3, r3, #30
 80045ea:	f043 0316 	orr.w	r3, r3, #22
 80045ee:	658b      	str	r3, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 80045f0:	2a00      	cmp	r2, #0
 80045f2:	d1d5      	bne.n	80045a0 <HAL_DMA_Start_IT+0x490>
 80045f4:	e663      	b.n	80042be <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80045f6:	f8df e15c 	ldr.w	lr, [pc, #348]	@ 8004754 <HAL_DMA_Start_IT+0x644>
 80045fa:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 80045fe:	f02c 0c01 	bic.w	ip, ip, #1
 8004602:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004606:	e6fb      	b.n	8004400 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004608:	4952      	ldr	r1, [pc, #328]	@ (8004754 <HAL_DMA_Start_IT+0x644>)
 800460a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800460e:	f023 031e 	bic.w	r3, r3, #30
 8004612:	f043 0316 	orr.w	r3, r3, #22
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 800461a:	2a00      	cmp	r2, #0
 800461c:	d1c0      	bne.n	80045a0 <HAL_DMA_Start_IT+0x490>
 800461e:	e64e      	b.n	80042be <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004620:	494c      	ldr	r1, [pc, #304]	@ (8004754 <HAL_DMA_Start_IT+0x644>)
 8004622:	f8d1 30a0 	ldr.w	r3, [r1, #160]	@ 0xa0
 8004626:	f023 031e 	bic.w	r3, r3, #30
 800462a:	f043 0316 	orr.w	r3, r3, #22
 800462e:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8004632:	2a00      	cmp	r2, #0
 8004634:	d1b4      	bne.n	80045a0 <HAL_DMA_Start_IT+0x490>
 8004636:	e642      	b.n	80042be <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8004638:	f8df e118 	ldr.w	lr, [pc, #280]	@ 8004754 <HAL_DMA_Start_IT+0x644>
 800463c:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 8004640:	f02c 0c01 	bic.w	ip, ip, #1
 8004644:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004648:	e6da      	b.n	8004400 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 800464a:	f8df e108 	ldr.w	lr, [pc, #264]	@ 8004754 <HAL_DMA_Start_IT+0x644>
 800464e:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 8004652:	f02c 0c01 	bic.w	ip, ip, #1
 8004656:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800465a:	e6d1      	b.n	8004400 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800465c:	493d      	ldr	r1, [pc, #244]	@ (8004754 <HAL_DMA_Start_IT+0x644>)
 800465e:	f8d1 30b8 	ldr.w	r3, [r1, #184]	@ 0xb8
 8004662:	f023 031e 	bic.w	r3, r3, #30
 8004666:	f043 0316 	orr.w	r3, r3, #22
 800466a:	f8c1 30b8 	str.w	r3, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 800466e:	2a00      	cmp	r2, #0
 8004670:	d196      	bne.n	80045a0 <HAL_DMA_Start_IT+0x490>
 8004672:	e624      	b.n	80042be <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8004674:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 8004758 <HAL_DMA_Start_IT+0x648>
 8004678:	f8de c010 	ldr.w	ip, [lr, #16]
 800467c:	f02c 0c01 	bic.w	ip, ip, #1
 8004680:	f8ce c010 	str.w	ip, [lr, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004684:	e6bc      	b.n	8004400 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004686:	4934      	ldr	r1, [pc, #208]	@ (8004758 <HAL_DMA_Start_IT+0x648>)
 8004688:	690b      	ldr	r3, [r1, #16]
 800468a:	f023 031e 	bic.w	r3, r3, #30
 800468e:	f043 0316 	orr.w	r3, r3, #22
 8004692:	610b      	str	r3, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 8004694:	2a00      	cmp	r2, #0
 8004696:	d183      	bne.n	80045a0 <HAL_DMA_Start_IT+0x490>
 8004698:	e611      	b.n	80042be <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 800469a:	f8df e0bc 	ldr.w	lr, [pc, #188]	@ 8004758 <HAL_DMA_Start_IT+0x648>
 800469e:	f8de c028 	ldr.w	ip, [lr, #40]	@ 0x28
 80046a2:	f02c 0c01 	bic.w	ip, ip, #1
 80046a6:	f8ce c028 	str.w	ip, [lr, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046aa:	e6a9      	b.n	8004400 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80046ac:	492a      	ldr	r1, [pc, #168]	@ (8004758 <HAL_DMA_Start_IT+0x648>)
 80046ae:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80046b0:	f023 031e 	bic.w	r3, r3, #30
 80046b4:	f043 0316 	orr.w	r3, r3, #22
 80046b8:	628b      	str	r3, [r1, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	f47f af70 	bne.w	80045a0 <HAL_DMA_Start_IT+0x490>
 80046c0:	e5fd      	b.n	80042be <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80046c2:	4925      	ldr	r1, [pc, #148]	@ (8004758 <HAL_DMA_Start_IT+0x648>)
 80046c4:	e772      	b.n	80045ac <HAL_DMA_Start_IT+0x49c>
    __HAL_DMA_DISABLE(hdma);
 80046c6:	f8df e090 	ldr.w	lr, [pc, #144]	@ 8004758 <HAL_DMA_Start_IT+0x648>
 80046ca:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 80046ce:	f02c 0c01 	bic.w	ip, ip, #1
 80046d2:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046d6:	e693      	b.n	8004400 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80046d8:	491f      	ldr	r1, [pc, #124]	@ (8004758 <HAL_DMA_Start_IT+0x648>)
 80046da:	e783      	b.n	80045e4 <HAL_DMA_Start_IT+0x4d4>
    __HAL_DMA_DISABLE(hdma);
 80046dc:	f8df e078 	ldr.w	lr, [pc, #120]	@ 8004758 <HAL_DMA_Start_IT+0x648>
 80046e0:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 80046e4:	f02c 0c01 	bic.w	ip, ip, #1
 80046e8:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ec:	e688      	b.n	8004400 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80046ee:	491a      	ldr	r1, [pc, #104]	@ (8004758 <HAL_DMA_Start_IT+0x648>)
 80046f0:	e74d      	b.n	800458e <HAL_DMA_Start_IT+0x47e>
    __HAL_DMA_DISABLE(hdma);
 80046f2:	f8df e064 	ldr.w	lr, [pc, #100]	@ 8004758 <HAL_DMA_Start_IT+0x648>
 80046f6:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 80046fa:	f02c 0c01 	bic.w	ip, ip, #1
 80046fe:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004702:	e67d      	b.n	8004400 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8004704:	f8df e050 	ldr.w	lr, [pc, #80]	@ 8004758 <HAL_DMA_Start_IT+0x648>
 8004708:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 800470c:	f02c 0c01 	bic.w	ip, ip, #1
 8004710:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004714:	e674      	b.n	8004400 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004716:	4910      	ldr	r1, [pc, #64]	@ (8004758 <HAL_DMA_Start_IT+0x648>)
 8004718:	e777      	b.n	800460a <HAL_DMA_Start_IT+0x4fa>
 800471a:	490f      	ldr	r1, [pc, #60]	@ (8004758 <HAL_DMA_Start_IT+0x648>)
 800471c:	e781      	b.n	8004622 <HAL_DMA_Start_IT+0x512>
    __HAL_DMA_DISABLE(hdma);
 800471e:	f8df e038 	ldr.w	lr, [pc, #56]	@ 8004758 <HAL_DMA_Start_IT+0x648>
 8004722:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 8004726:	f02c 0c01 	bic.w	ip, ip, #1
 800472a:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800472e:	e667      	b.n	8004400 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8004730:	f8df e024 	ldr.w	lr, [pc, #36]	@ 8004758 <HAL_DMA_Start_IT+0x648>
 8004734:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 8004738:	f02c 0c01 	bic.w	ip, ip, #1
 800473c:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004740:	e65e      	b.n	8004400 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004742:	4905      	ldr	r1, [pc, #20]	@ (8004758 <HAL_DMA_Start_IT+0x648>)
 8004744:	e78b      	b.n	800465e <HAL_DMA_Start_IT+0x54e>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004746:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004748:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800474a:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800474c:	e54b      	b.n	80041e6 <HAL_DMA_Start_IT+0xd6>
 800474e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004750:	e555      	b.n	80041fe <HAL_DMA_Start_IT+0xee>
 8004752:	bf00      	nop
 8004754:	40020000 	.word	0x40020000
 8004758:	40020400 	.word	0x40020400
 800475c:	40020088 	.word	0x40020088
 8004760:	5802541c 	.word	0x5802541c
 8004764:	58025408 	.word	0x58025408
 8004768:	58025480 	.word	0x58025480
 800476c:	58025494 	.word	0x58025494
 8004770:	400200a0 	.word	0x400200a0
 8004774:	400204b8 	.word	0x400204b8

08004778 <HAL_DMA_Abort>:
{
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800477c:	f7fd ffa2 	bl	80026c4 <HAL_GetTick>
  if(hdma == NULL)
 8004780:	2c00      	cmp	r4, #0
 8004782:	d06d      	beq.n	8004860 <HAL_DMA_Abort+0xe8>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004784:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8004788:	2b02      	cmp	r3, #2
 800478a:	d164      	bne.n	8004856 <HAL_DMA_Abort+0xde>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800478c:	6825      	ldr	r5, [r4, #0]
 800478e:	4606      	mov	r6, r0
 8004790:	4bad      	ldr	r3, [pc, #692]	@ (8004a48 <HAL_DMA_Abort+0x2d0>)
 8004792:	429d      	cmp	r5, r3
 8004794:	d066      	beq.n	8004864 <HAL_DMA_Abort+0xec>
 8004796:	3318      	adds	r3, #24
 8004798:	429d      	cmp	r5, r3
 800479a:	d063      	beq.n	8004864 <HAL_DMA_Abort+0xec>
 800479c:	3318      	adds	r3, #24
 800479e:	429d      	cmp	r5, r3
 80047a0:	f000 80f3 	beq.w	800498a <HAL_DMA_Abort+0x212>
 80047a4:	3318      	adds	r3, #24
 80047a6:	429d      	cmp	r5, r3
 80047a8:	f000 811a 	beq.w	80049e0 <HAL_DMA_Abort+0x268>
 80047ac:	3318      	adds	r3, #24
 80047ae:	429d      	cmp	r5, r3
 80047b0:	f000 8125 	beq.w	80049fe <HAL_DMA_Abort+0x286>
 80047b4:	3318      	adds	r3, #24
 80047b6:	429d      	cmp	r5, r3
 80047b8:	f000 80ff 	beq.w	80049ba <HAL_DMA_Abort+0x242>
 80047bc:	3318      	adds	r3, #24
 80047be:	429d      	cmp	r5, r3
 80047c0:	f000 812e 	beq.w	8004a20 <HAL_DMA_Abort+0x2a8>
 80047c4:	3318      	adds	r3, #24
 80047c6:	429d      	cmp	r5, r3
 80047c8:	f000 814a 	beq.w	8004a60 <HAL_DMA_Abort+0x2e8>
 80047cc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80047d0:	429d      	cmp	r5, r3
 80047d2:	f000 8158 	beq.w	8004a86 <HAL_DMA_Abort+0x30e>
 80047d6:	3318      	adds	r3, #24
 80047d8:	429d      	cmp	r5, r3
 80047da:	f000 8163 	beq.w	8004aa4 <HAL_DMA_Abort+0x32c>
 80047de:	3318      	adds	r3, #24
 80047e0:	429d      	cmp	r5, r3
 80047e2:	f000 816e 	beq.w	8004ac2 <HAL_DMA_Abort+0x34a>
 80047e6:	3318      	adds	r3, #24
 80047e8:	429d      	cmp	r5, r3
 80047ea:	f000 816c 	beq.w	8004ac6 <HAL_DMA_Abort+0x34e>
 80047ee:	3318      	adds	r3, #24
 80047f0:	429d      	cmp	r5, r3
 80047f2:	f000 816a 	beq.w	8004aca <HAL_DMA_Abort+0x352>
 80047f6:	3318      	adds	r3, #24
 80047f8:	429d      	cmp	r5, r3
 80047fa:	f000 8168 	beq.w	8004ace <HAL_DMA_Abort+0x356>
 80047fe:	3318      	adds	r3, #24
 8004800:	429d      	cmp	r5, r3
 8004802:	f000 8168 	beq.w	8004ad6 <HAL_DMA_Abort+0x35e>
 8004806:	3318      	adds	r3, #24
 8004808:	429d      	cmp	r5, r3
 800480a:	f000 8162 	beq.w	8004ad2 <HAL_DMA_Abort+0x35a>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800480e:	682b      	ldr	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004810:	4a8e      	ldr	r2, [pc, #568]	@ (8004a4c <HAL_DMA_Abort+0x2d4>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004812:	f023 030e 	bic.w	r3, r3, #14
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004816:	4295      	cmp	r5, r2
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004818:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800481a:	f000 80bf 	beq.w	800499c <HAL_DMA_Abort+0x224>
 800481e:	4b8c      	ldr	r3, [pc, #560]	@ (8004a50 <HAL_DMA_Abort+0x2d8>)
 8004820:	429d      	cmp	r5, r3
 8004822:	f000 80bb 	beq.w	800499c <HAL_DMA_Abort+0x224>
 8004826:	3314      	adds	r3, #20
 8004828:	429d      	cmp	r5, r3
 800482a:	f000 80b7 	beq.w	800499c <HAL_DMA_Abort+0x224>
 800482e:	3314      	adds	r3, #20
 8004830:	429d      	cmp	r5, r3
 8004832:	f000 80b3 	beq.w	800499c <HAL_DMA_Abort+0x224>
 8004836:	3314      	adds	r3, #20
 8004838:	429d      	cmp	r5, r3
 800483a:	f000 80af 	beq.w	800499c <HAL_DMA_Abort+0x224>
 800483e:	3314      	adds	r3, #20
 8004840:	429d      	cmp	r5, r3
 8004842:	f000 80ab 	beq.w	800499c <HAL_DMA_Abort+0x224>
 8004846:	3314      	adds	r3, #20
 8004848:	429d      	cmp	r5, r3
 800484a:	f000 80a7 	beq.w	800499c <HAL_DMA_Abort+0x224>
 800484e:	3314      	adds	r3, #20
 8004850:	429d      	cmp	r5, r3
 8004852:	d114      	bne.n	800487e <HAL_DMA_Abort+0x106>
 8004854:	e0a2      	b.n	800499c <HAL_DMA_Abort+0x224>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004856:	2280      	movs	r2, #128	@ 0x80
    __HAL_UNLOCK(hdma);
 8004858:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800485a:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800485c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8004860:	2001      	movs	r0, #1
}
 8004862:	bd70      	pop	{r4, r5, r6, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004864:	682b      	ldr	r3, [r5, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004866:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004868:	f023 031e 	bic.w	r3, r3, #30
 800486c:	602b      	str	r3, [r5, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800486e:	696b      	ldr	r3, [r5, #20]
 8004870:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004874:	616b      	str	r3, [r5, #20]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004876:	6813      	ldr	r3, [r2, #0]
 8004878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800487c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800487e:	682b      	ldr	r3, [r5, #0]
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	602b      	str	r3, [r5, #0]
 8004886:	e005      	b.n	8004894 <HAL_DMA_Abort+0x11c>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004888:	f7fd ff1c 	bl	80026c4 <HAL_GetTick>
 800488c:	1b83      	subs	r3, r0, r6
 800488e:	2b05      	cmp	r3, #5
 8004890:	f200 808a 	bhi.w	80049a8 <HAL_DMA_Abort+0x230>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	07db      	lsls	r3, r3, #31
 8004898:	d4f6      	bmi.n	8004888 <HAL_DMA_Abort+0x110>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	496a      	ldr	r1, [pc, #424]	@ (8004a48 <HAL_DMA_Abort+0x2d0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800489e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048a0:	428b      	cmp	r3, r1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048a4:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048a8:	d05e      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048aa:	3118      	adds	r1, #24
 80048ac:	428b      	cmp	r3, r1
 80048ae:	d05b      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048b0:	3118      	adds	r1, #24
 80048b2:	428b      	cmp	r3, r1
 80048b4:	d058      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048b6:	3118      	adds	r1, #24
 80048b8:	428b      	cmp	r3, r1
 80048ba:	d055      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048bc:	3118      	adds	r1, #24
 80048be:	428b      	cmp	r3, r1
 80048c0:	d052      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048c2:	3118      	adds	r1, #24
 80048c4:	428b      	cmp	r3, r1
 80048c6:	d04f      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048c8:	3118      	adds	r1, #24
 80048ca:	428b      	cmp	r3, r1
 80048cc:	d04c      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048ce:	3118      	adds	r1, #24
 80048d0:	428b      	cmp	r3, r1
 80048d2:	d049      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048d4:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80048d8:	428b      	cmp	r3, r1
 80048da:	d045      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048dc:	3118      	adds	r1, #24
 80048de:	428b      	cmp	r3, r1
 80048e0:	d042      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048e2:	3118      	adds	r1, #24
 80048e4:	428b      	cmp	r3, r1
 80048e6:	d03f      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048e8:	3118      	adds	r1, #24
 80048ea:	428b      	cmp	r3, r1
 80048ec:	d03c      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048ee:	3118      	adds	r1, #24
 80048f0:	428b      	cmp	r3, r1
 80048f2:	d039      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048f4:	3118      	adds	r1, #24
 80048f6:	428b      	cmp	r3, r1
 80048f8:	d036      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 80048fa:	3118      	adds	r1, #24
 80048fc:	428b      	cmp	r3, r1
 80048fe:	d033      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
 8004900:	3118      	adds	r1, #24
 8004902:	428b      	cmp	r3, r1
 8004904:	d030      	beq.n	8004968 <HAL_DMA_Abort+0x1f0>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004906:	2101      	movs	r1, #1
 8004908:	4091      	lsls	r1, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800490a:	4a51      	ldr	r2, [pc, #324]	@ (8004a50 <HAL_DMA_Abort+0x2d8>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800490c:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800490e:	484f      	ldr	r0, [pc, #316]	@ (8004a4c <HAL_DMA_Abort+0x2d4>)
 8004910:	4950      	ldr	r1, [pc, #320]	@ (8004a54 <HAL_DMA_Abort+0x2dc>)
 8004912:	4283      	cmp	r3, r0
 8004914:	bf18      	it	ne
 8004916:	4293      	cmpne	r3, r2
 8004918:	f100 003c 	add.w	r0, r0, #60	@ 0x3c
 800491c:	bf0c      	ite	eq
 800491e:	2201      	moveq	r2, #1
 8004920:	2200      	movne	r2, #0
 8004922:	428b      	cmp	r3, r1
 8004924:	bf08      	it	eq
 8004926:	f042 0201 	orreq.w	r2, r2, #1
 800492a:	3128      	adds	r1, #40	@ 0x28
 800492c:	4283      	cmp	r3, r0
 800492e:	bf08      	it	eq
 8004930:	f042 0201 	orreq.w	r2, r2, #1
 8004934:	3028      	adds	r0, #40	@ 0x28
 8004936:	428b      	cmp	r3, r1
 8004938:	bf08      	it	eq
 800493a:	f042 0201 	orreq.w	r2, r2, #1
 800493e:	3128      	adds	r1, #40	@ 0x28
 8004940:	4283      	cmp	r3, r0
 8004942:	bf08      	it	eq
 8004944:	f042 0201 	orreq.w	r2, r2, #1
 8004948:	428b      	cmp	r3, r1
 800494a:	bf08      	it	eq
 800494c:	f042 0201 	orreq.w	r2, r2, #1
 8004950:	b96a      	cbnz	r2, 800496e <HAL_DMA_Abort+0x1f6>
 8004952:	4a41      	ldr	r2, [pc, #260]	@ (8004a58 <HAL_DMA_Abort+0x2e0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00a      	beq.n	800496e <HAL_DMA_Abort+0x1f6>
    __HAL_UNLOCK(hdma);
 8004958:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800495a:	2201      	movs	r2, #1
  return HAL_OK;
 800495c:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 800495e:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004962:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8004966:	bd70      	pop	{r4, r5, r6, pc}
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004968:	233f      	movs	r3, #63	@ 0x3f
 800496a:	4093      	lsls	r3, r2
 800496c:	6083      	str	r3, [r0, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 800496e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004970:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 8004974:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0ee      	beq.n	8004958 <HAL_DMA_Abort+0x1e0>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800497a:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800497c:	e9d4 101c 	ldrd	r1, r0, [r4, #112]	@ 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004980:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004984:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004986:	6048      	str	r0, [r1, #4]
 8004988:	e7e6      	b.n	8004958 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800498a:	4b34      	ldr	r3, [pc, #208]	@ (8004a5c <HAL_DMA_Abort+0x2e4>)
 800498c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800498e:	f022 021e 	bic.w	r2, r2, #30
 8004992:	641a      	str	r2, [r3, #64]	@ 0x40
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004994:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004996:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800499a:	655a      	str	r2, [r3, #84]	@ 0x54
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800499c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800499e:	6813      	ldr	r3, [r2, #0]
 80049a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049a4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80049a6:	e76a      	b.n	800487e <HAL_DMA_Abort+0x106>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049a8:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80049aa:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 80049ac:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049ae:	6561      	str	r1, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hdma);
 80049b0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 80049b4:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        return HAL_ERROR;
 80049b8:	e752      	b.n	8004860 <HAL_DMA_Abort+0xe8>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80049ba:	4b28      	ldr	r3, [pc, #160]	@ (8004a5c <HAL_DMA_Abort+0x2e4>)
 80049bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80049c0:	f022 021e 	bic.w	r2, r2, #30
 80049c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049c8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80049cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049d4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80049d6:	6813      	ldr	r3, [r2, #0]
 80049d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049dc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80049de:	e74e      	b.n	800487e <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80049e0:	4b1e      	ldr	r3, [pc, #120]	@ (8004a5c <HAL_DMA_Abort+0x2e4>)
 80049e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049e4:	f022 021e 	bic.w	r2, r2, #30
 80049e8:	659a      	str	r2, [r3, #88]	@ 0x58
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049ea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80049ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049f0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049f2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80049f4:	6813      	ldr	r3, [r2, #0]
 80049f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049fa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80049fc:	e73f      	b.n	800487e <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80049fe:	4b17      	ldr	r3, [pc, #92]	@ (8004a5c <HAL_DMA_Abort+0x2e4>)
 8004a00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a02:	f022 021e 	bic.w	r2, r2, #30
 8004a06:	671a      	str	r2, [r3, #112]	@ 0x70
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a08:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004a0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a14:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004a16:	6813      	ldr	r3, [r2, #0]
 8004a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a1c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004a1e:	e72e      	b.n	800487e <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004a20:	4b0e      	ldr	r3, [pc, #56]	@ (8004a5c <HAL_DMA_Abort+0x2e4>)
 8004a22:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004a26:	f022 021e 	bic.w	r2, r2, #30
 8004a2a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a2e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004a32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a36:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a3a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004a3c:	6813      	ldr	r3, [r2, #0]
 8004a3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a42:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004a44:	e71b      	b.n	800487e <HAL_DMA_Abort+0x106>
 8004a46:	bf00      	nop
 8004a48:	40020010 	.word	0x40020010
 8004a4c:	58025408 	.word	0x58025408
 8004a50:	5802541c 	.word	0x5802541c
 8004a54:	58025430 	.word	0x58025430
 8004a58:	58025494 	.word	0x58025494
 8004a5c:	40020000 	.word	0x40020000
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004a60:	4b1e      	ldr	r3, [pc, #120]	@ (8004adc <HAL_DMA_Abort+0x364>)
 8004a62:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004a66:	f022 021e 	bic.w	r2, r2, #30
 8004a6a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a6e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8004a72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a76:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a7a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004a7c:	6813      	ldr	r3, [r2, #0]
 8004a7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a82:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004a84:	e6fb      	b.n	800487e <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004a86:	4b16      	ldr	r3, [pc, #88]	@ (8004ae0 <HAL_DMA_Abort+0x368>)
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	f022 021e 	bic.w	r2, r2, #30
 8004a8e:	611a      	str	r2, [r3, #16]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a96:	625a      	str	r2, [r3, #36]	@ 0x24
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a98:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004a9a:	6813      	ldr	r3, [r2, #0]
 8004a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004aa2:	e6ec      	b.n	800487e <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae0 <HAL_DMA_Abort+0x368>)
 8004aa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aa8:	f022 021e 	bic.w	r2, r2, #30
 8004aac:	629a      	str	r2, [r3, #40]	@ 0x28
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ab0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ab4:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ab6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004ab8:	6813      	ldr	r3, [r2, #0]
 8004aba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004abe:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004ac0:	e6dd      	b.n	800487e <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004ac2:	4b07      	ldr	r3, [pc, #28]	@ (8004ae0 <HAL_DMA_Abort+0x368>)
 8004ac4:	e762      	b.n	800498c <HAL_DMA_Abort+0x214>
 8004ac6:	4b06      	ldr	r3, [pc, #24]	@ (8004ae0 <HAL_DMA_Abort+0x368>)
 8004ac8:	e78b      	b.n	80049e2 <HAL_DMA_Abort+0x26a>
 8004aca:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <HAL_DMA_Abort+0x368>)
 8004acc:	e798      	b.n	8004a00 <HAL_DMA_Abort+0x288>
 8004ace:	4b04      	ldr	r3, [pc, #16]	@ (8004ae0 <HAL_DMA_Abort+0x368>)
 8004ad0:	e774      	b.n	80049bc <HAL_DMA_Abort+0x244>
 8004ad2:	4b03      	ldr	r3, [pc, #12]	@ (8004ae0 <HAL_DMA_Abort+0x368>)
 8004ad4:	e7c5      	b.n	8004a62 <HAL_DMA_Abort+0x2ea>
 8004ad6:	4b02      	ldr	r3, [pc, #8]	@ (8004ae0 <HAL_DMA_Abort+0x368>)
 8004ad8:	e7a3      	b.n	8004a22 <HAL_DMA_Abort+0x2aa>
 8004ada:	bf00      	nop
 8004adc:	40020000 	.word	0x40020000
 8004ae0:	40020400 	.word	0x40020400

08004ae4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d062      	beq.n	8004bae <HAL_DMA_Abort_IT+0xca>
{
 8004ae8:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aea:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d159      	bne.n	8004ba6 <HAL_DMA_Abort_IT+0xc2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004af2:	6802      	ldr	r2, [r0, #0]
 8004af4:	4b57      	ldr	r3, [pc, #348]	@ (8004c54 <HAL_DMA_Abort_IT+0x170>)
 8004af6:	4c58      	ldr	r4, [pc, #352]	@ (8004c58 <HAL_DMA_Abort_IT+0x174>)
 8004af8:	4958      	ldr	r1, [pc, #352]	@ (8004c5c <HAL_DMA_Abort_IT+0x178>)
 8004afa:	42a2      	cmp	r2, r4
 8004afc:	bf18      	it	ne
 8004afe:	429a      	cmpne	r2, r3
 8004b00:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 8004b04:	bf0c      	ite	eq
 8004b06:	2301      	moveq	r3, #1
 8004b08:	2300      	movne	r3, #0
 8004b0a:	428a      	cmp	r2, r1
 8004b0c:	bf08      	it	eq
 8004b0e:	f043 0301 	orreq.w	r3, r3, #1
 8004b12:	3130      	adds	r1, #48	@ 0x30
 8004b14:	42a2      	cmp	r2, r4
 8004b16:	bf08      	it	eq
 8004b18:	f043 0301 	orreq.w	r3, r3, #1
 8004b1c:	3430      	adds	r4, #48	@ 0x30
 8004b1e:	428a      	cmp	r2, r1
 8004b20:	bf08      	it	eq
 8004b22:	f043 0301 	orreq.w	r3, r3, #1
 8004b26:	3130      	adds	r1, #48	@ 0x30
 8004b28:	42a2      	cmp	r2, r4
 8004b2a:	bf08      	it	eq
 8004b2c:	f043 0301 	orreq.w	r3, r3, #1
 8004b30:	3430      	adds	r4, #48	@ 0x30
 8004b32:	428a      	cmp	r2, r1
 8004b34:	bf08      	it	eq
 8004b36:	f043 0301 	orreq.w	r3, r3, #1
 8004b3a:	f501 715c 	add.w	r1, r1, #880	@ 0x370
 8004b3e:	42a2      	cmp	r2, r4
 8004b40:	bf08      	it	eq
 8004b42:	f043 0301 	orreq.w	r3, r3, #1
 8004b46:	f504 745c 	add.w	r4, r4, #880	@ 0x370
 8004b4a:	428a      	cmp	r2, r1
 8004b4c:	bf08      	it	eq
 8004b4e:	f043 0301 	orreq.w	r3, r3, #1
 8004b52:	3130      	adds	r1, #48	@ 0x30
 8004b54:	42a2      	cmp	r2, r4
 8004b56:	bf08      	it	eq
 8004b58:	f043 0301 	orreq.w	r3, r3, #1
 8004b5c:	3430      	adds	r4, #48	@ 0x30
 8004b5e:	428a      	cmp	r2, r1
 8004b60:	bf08      	it	eq
 8004b62:	f043 0301 	orreq.w	r3, r3, #1
 8004b66:	3130      	adds	r1, #48	@ 0x30
 8004b68:	42a2      	cmp	r2, r4
 8004b6a:	bf08      	it	eq
 8004b6c:	f043 0301 	orreq.w	r3, r3, #1
 8004b70:	3430      	adds	r4, #48	@ 0x30
 8004b72:	428a      	cmp	r2, r1
 8004b74:	bf08      	it	eq
 8004b76:	f043 0301 	orreq.w	r3, r3, #1
 8004b7a:	3130      	adds	r1, #48	@ 0x30
 8004b7c:	42a2      	cmp	r2, r4
 8004b7e:	bf08      	it	eq
 8004b80:	f043 0301 	orreq.w	r3, r3, #1
 8004b84:	428a      	cmp	r2, r1
 8004b86:	bf08      	it	eq
 8004b88:	f043 0301 	orreq.w	r3, r3, #1
 8004b8c:	b913      	cbnz	r3, 8004b94 <HAL_DMA_Abort_IT+0xb0>
 8004b8e:	4b34      	ldr	r3, [pc, #208]	@ (8004c60 <HAL_DMA_Abort_IT+0x17c>)
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d10e      	bne.n	8004bb2 <HAL_DMA_Abort_IT+0xce>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b94:	2304      	movs	r3, #4
 8004b96:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8004b9a:	6813      	ldr	r3, [r2, #0]
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004ba2:	2000      	movs	r0, #0
}
 8004ba4:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ba6:	2380      	movs	r3, #128	@ 0x80
 8004ba8:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8004baa:	2001      	movs	r0, #1
}
 8004bac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004bae:	2001      	movs	r0, #1
}
 8004bb0:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8004c64 <HAL_DMA_Abort_IT+0x180>)
 8004bb4:	4d2c      	ldr	r5, [pc, #176]	@ (8004c68 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004bb6:	6811      	ldr	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bb8:	42aa      	cmp	r2, r5
 8004bba:	bf18      	it	ne
 8004bbc:	429a      	cmpne	r2, r3
 8004bbe:	4c2b      	ldr	r4, [pc, #172]	@ (8004c6c <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004bc0:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bc4:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 8004bc8:	bf0c      	ite	eq
 8004bca:	2301      	moveq	r3, #1
 8004bcc:	2300      	movne	r3, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004bce:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bd0:	42a2      	cmp	r2, r4
 8004bd2:	bf08      	it	eq
 8004bd4:	f043 0301 	orreq.w	r3, r3, #1
      __HAL_DMA_DISABLE(hdma);
 8004bd8:	6811      	ldr	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bda:	3428      	adds	r4, #40	@ 0x28
 8004bdc:	42aa      	cmp	r2, r5
 8004bde:	bf08      	it	eq
 8004be0:	f043 0301 	orreq.w	r3, r3, #1
      __HAL_DMA_DISABLE(hdma);
 8004be4:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004be8:	42a2      	cmp	r2, r4
 8004bea:	bf08      	it	eq
 8004bec:	f043 0301 	orreq.w	r3, r3, #1
 8004bf0:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8004bf2:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bf4:	42a2      	cmp	r2, r4
 8004bf6:	bf08      	it	eq
 8004bf8:	f043 0301 	orreq.w	r3, r3, #1
 8004bfc:	491c      	ldr	r1, [pc, #112]	@ (8004c70 <HAL_DMA_Abort_IT+0x18c>)
 8004bfe:	428a      	cmp	r2, r1
 8004c00:	bf08      	it	eq
 8004c02:	f043 0301 	orreq.w	r3, r3, #1
 8004c06:	b913      	cbnz	r3, 8004c0e <HAL_DMA_Abort_IT+0x12a>
 8004c08:	4b1a      	ldr	r3, [pc, #104]	@ (8004c74 <HAL_DMA_Abort_IT+0x190>)
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d117      	bne.n	8004c3e <HAL_DMA_Abort_IT+0x15a>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c0e:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c10:	6d85      	ldr	r5, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c12:	e9d0 1417 	ldrd	r1, r4, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c16:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c18:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c20:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c22:	6022      	str	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c24:	606b      	str	r3, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8004c26:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c28:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 8004c2c:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8004c2e:	b133      	cbz	r3, 8004c3e <HAL_DMA_Abort_IT+0x15a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c30:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c32:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c3a:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c3c:	604c      	str	r4, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8004c3e:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8004c40:	2200      	movs	r2, #0
      if(hdma->XferAbortCallback != NULL)
 8004c42:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8004c44:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8004c48:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0a8      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0xbe>
        hdma->XferAbortCallback(hdma);
 8004c50:	4798      	blx	r3
 8004c52:	e7a6      	b.n	8004ba2 <HAL_DMA_Abort_IT+0xbe>
 8004c54:	40020010 	.word	0x40020010
 8004c58:	40020028 	.word	0x40020028
 8004c5c:	40020040 	.word	0x40020040
 8004c60:	400204b8 	.word	0x400204b8
 8004c64:	5802541c 	.word	0x5802541c
 8004c68:	58025408 	.word	0x58025408
 8004c6c:	58025430 	.word	0x58025430
 8004c70:	58025480 	.word	0x58025480
 8004c74:	58025494 	.word	0x58025494

08004c78 <HAL_DMA_IRQHandler>:
{
 8004c78:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8004c7a:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c7c:	4b94      	ldr	r3, [pc, #592]	@ (8004ed0 <HAL_DMA_IRQHandler+0x258>)
{
 8004c7e:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c80:	6d85      	ldr	r5, [r0, #88]	@ 0x58
{
 8004c82:	4607      	mov	r7, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c84:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0U;
 8004c86:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004c88:	4b92      	ldr	r3, [pc, #584]	@ (8004ed4 <HAL_DMA_IRQHandler+0x25c>)
 8004c8a:	6802      	ldr	r2, [r0, #0]
 8004c8c:	4892      	ldr	r0, [pc, #584]	@ (8004ed8 <HAL_DMA_IRQHandler+0x260>)
  tmpisr_dma  = regs_dma->ISR;
 8004c8e:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004c90:	4282      	cmp	r2, r0
 8004c92:	bf18      	it	ne
 8004c94:	429a      	cmpne	r2, r3
 8004c96:	f100 0018 	add.w	r0, r0, #24
  tmpisr_bdma = regs_bdma->ISR;
 8004c9a:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	4282      	cmp	r2, r0
 8004ca4:	bf08      	it	eq
 8004ca6:	f043 0301 	orreq.w	r3, r3, #1
 8004caa:	3018      	adds	r0, #24
 8004cac:	4282      	cmp	r2, r0
 8004cae:	bf08      	it	eq
 8004cb0:	f043 0301 	orreq.w	r3, r3, #1
 8004cb4:	3018      	adds	r0, #24
 8004cb6:	4282      	cmp	r2, r0
 8004cb8:	bf08      	it	eq
 8004cba:	f043 0301 	orreq.w	r3, r3, #1
 8004cbe:	3018      	adds	r0, #24
 8004cc0:	4282      	cmp	r2, r0
 8004cc2:	bf08      	it	eq
 8004cc4:	f043 0301 	orreq.w	r3, r3, #1
 8004cc8:	3018      	adds	r0, #24
 8004cca:	4282      	cmp	r2, r0
 8004ccc:	bf08      	it	eq
 8004cce:	f043 0301 	orreq.w	r3, r3, #1
 8004cd2:	3018      	adds	r0, #24
 8004cd4:	4282      	cmp	r2, r0
 8004cd6:	bf08      	it	eq
 8004cd8:	f043 0301 	orreq.w	r3, r3, #1
 8004cdc:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8004ce0:	4282      	cmp	r2, r0
 8004ce2:	bf08      	it	eq
 8004ce4:	f043 0301 	orreq.w	r3, r3, #1
 8004ce8:	3018      	adds	r0, #24
 8004cea:	4282      	cmp	r2, r0
 8004cec:	bf08      	it	eq
 8004cee:	f043 0301 	orreq.w	r3, r3, #1
 8004cf2:	3018      	adds	r0, #24
 8004cf4:	4282      	cmp	r2, r0
 8004cf6:	bf08      	it	eq
 8004cf8:	f043 0301 	orreq.w	r3, r3, #1
 8004cfc:	3018      	adds	r0, #24
 8004cfe:	4282      	cmp	r2, r0
 8004d00:	bf08      	it	eq
 8004d02:	f043 0301 	orreq.w	r3, r3, #1
 8004d06:	3018      	adds	r0, #24
 8004d08:	4282      	cmp	r2, r0
 8004d0a:	bf08      	it	eq
 8004d0c:	f043 0301 	orreq.w	r3, r3, #1
 8004d10:	3018      	adds	r0, #24
 8004d12:	4282      	cmp	r2, r0
 8004d14:	bf08      	it	eq
 8004d16:	f043 0301 	orreq.w	r3, r3, #1
 8004d1a:	3018      	adds	r0, #24
 8004d1c:	4282      	cmp	r2, r0
 8004d1e:	bf08      	it	eq
 8004d20:	f043 0301 	orreq.w	r3, r3, #1
 8004d24:	b91b      	cbnz	r3, 8004d2e <HAL_DMA_IRQHandler+0xb6>
 8004d26:	4b6d      	ldr	r3, [pc, #436]	@ (8004edc <HAL_DMA_IRQHandler+0x264>)
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	f040 812f 	bne.w	8004f8c <HAL_DMA_IRQHandler+0x314>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d30:	2108      	movs	r1, #8
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	4099      	lsls	r1, r3
 8004d38:	4221      	tst	r1, r4
 8004d3a:	d00b      	beq.n	8004d54 <HAL_DMA_IRQHandler+0xdc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004d3c:	6810      	ldr	r0, [r2, #0]
 8004d3e:	0740      	lsls	r0, r0, #29
 8004d40:	d508      	bpl.n	8004d54 <HAL_DMA_IRQHandler+0xdc>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004d42:	6810      	ldr	r0, [r2, #0]
 8004d44:	f020 0004 	bic.w	r0, r0, #4
 8004d48:	6010      	str	r0, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d4a:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d4e:	f041 0101 	orr.w	r1, r1, #1
 8004d52:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d54:	fa24 f103 	lsr.w	r1, r4, r3
 8004d58:	07c8      	lsls	r0, r1, #31
 8004d5a:	d509      	bpl.n	8004d70 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004d5c:	6951      	ldr	r1, [r2, #20]
 8004d5e:	0609      	lsls	r1, r1, #24
 8004d60:	d506      	bpl.n	8004d70 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d62:	2101      	movs	r1, #1
 8004d64:	4099      	lsls	r1, r3
 8004d66:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d6a:	f041 0102 	orr.w	r1, r1, #2
 8004d6e:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d70:	2104      	movs	r1, #4
 8004d72:	4099      	lsls	r1, r3
 8004d74:	4221      	tst	r1, r4
 8004d76:	d007      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x110>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004d78:	6810      	ldr	r0, [r2, #0]
 8004d7a:	0780      	lsls	r0, r0, #30
 8004d7c:	d504      	bpl.n	8004d88 <HAL_DMA_IRQHandler+0x110>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d7e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d82:	f041 0104 	orr.w	r1, r1, #4
 8004d86:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d88:	2110      	movs	r1, #16
 8004d8a:	4099      	lsls	r1, r3
 8004d8c:	4221      	tst	r1, r4
 8004d8e:	f000 80b0 	beq.w	8004ef2 <HAL_DMA_IRQHandler+0x27a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004d92:	6810      	ldr	r0, [r2, #0]
 8004d94:	0700      	lsls	r0, r0, #28
 8004d96:	f140 80ac 	bpl.w	8004ef2 <HAL_DMA_IRQHandler+0x27a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d9a:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d9c:	6811      	ldr	r1, [r2, #0]
 8004d9e:	f411 2f80 	tst.w	r1, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004da2:	6811      	ldr	r1, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004da4:	f040 809e 	bne.w	8004ee4 <HAL_DMA_IRQHandler+0x26c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004da8:	05c9      	lsls	r1, r1, #23
 8004daa:	d403      	bmi.n	8004db4 <HAL_DMA_IRQHandler+0x13c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004dac:	6811      	ldr	r1, [r2, #0]
 8004dae:	f021 0108 	bic.w	r1, r1, #8
 8004db2:	6011      	str	r1, [r2, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8004db4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004db6:	2900      	cmp	r1, #0
 8004db8:	f000 809b 	beq.w	8004ef2 <HAL_DMA_IRQHandler+0x27a>
            hdma->XferHalfCpltCallback(hdma);
 8004dbc:	4638      	mov	r0, r7
 8004dbe:	4788      	blx	r1
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dc2:	2120      	movs	r1, #32
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	4099      	lsls	r1, r3
 8004dca:	4221      	tst	r1, r4
 8004dcc:	d053      	beq.n	8004e76 <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	4840      	ldr	r0, [pc, #256]	@ (8004ed4 <HAL_DMA_IRQHandler+0x25c>)
 8004dd2:	4c41      	ldr	r4, [pc, #260]	@ (8004ed8 <HAL_DMA_IRQHandler+0x260>)
 8004dd4:	42a2      	cmp	r2, r4
 8004dd6:	bf18      	it	ne
 8004dd8:	4282      	cmpne	r2, r0
 8004dda:	f104 0418 	add.w	r4, r4, #24
 8004dde:	bf0c      	ite	eq
 8004de0:	2001      	moveq	r0, #1
 8004de2:	2000      	movne	r0, #0
 8004de4:	42a2      	cmp	r2, r4
 8004de6:	bf08      	it	eq
 8004de8:	f040 0001 	orreq.w	r0, r0, #1
 8004dec:	3418      	adds	r4, #24
 8004dee:	42a2      	cmp	r2, r4
 8004df0:	bf08      	it	eq
 8004df2:	f040 0001 	orreq.w	r0, r0, #1
 8004df6:	3418      	adds	r4, #24
 8004df8:	42a2      	cmp	r2, r4
 8004dfa:	bf08      	it	eq
 8004dfc:	f040 0001 	orreq.w	r0, r0, #1
 8004e00:	3418      	adds	r4, #24
 8004e02:	42a2      	cmp	r2, r4
 8004e04:	bf08      	it	eq
 8004e06:	f040 0001 	orreq.w	r0, r0, #1
 8004e0a:	3418      	adds	r4, #24
 8004e0c:	42a2      	cmp	r2, r4
 8004e0e:	bf08      	it	eq
 8004e10:	f040 0001 	orreq.w	r0, r0, #1
 8004e14:	3418      	adds	r4, #24
 8004e16:	42a2      	cmp	r2, r4
 8004e18:	bf08      	it	eq
 8004e1a:	f040 0001 	orreq.w	r0, r0, #1
 8004e1e:	f504 7456 	add.w	r4, r4, #856	@ 0x358
 8004e22:	42a2      	cmp	r2, r4
 8004e24:	bf08      	it	eq
 8004e26:	f040 0001 	orreq.w	r0, r0, #1
 8004e2a:	3418      	adds	r4, #24
 8004e2c:	42a2      	cmp	r2, r4
 8004e2e:	bf08      	it	eq
 8004e30:	f040 0001 	orreq.w	r0, r0, #1
 8004e34:	3418      	adds	r4, #24
 8004e36:	42a2      	cmp	r2, r4
 8004e38:	bf08      	it	eq
 8004e3a:	f040 0001 	orreq.w	r0, r0, #1
 8004e3e:	3418      	adds	r4, #24
 8004e40:	42a2      	cmp	r2, r4
 8004e42:	bf08      	it	eq
 8004e44:	f040 0001 	orreq.w	r0, r0, #1
 8004e48:	3418      	adds	r4, #24
 8004e4a:	42a2      	cmp	r2, r4
 8004e4c:	bf08      	it	eq
 8004e4e:	f040 0001 	orreq.w	r0, r0, #1
 8004e52:	3418      	adds	r4, #24
 8004e54:	42a2      	cmp	r2, r4
 8004e56:	bf08      	it	eq
 8004e58:	f040 0001 	orreq.w	r0, r0, #1
 8004e5c:	3418      	adds	r4, #24
 8004e5e:	42a2      	cmp	r2, r4
 8004e60:	bf08      	it	eq
 8004e62:	f040 0001 	orreq.w	r0, r0, #1
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d147      	bne.n	8004efa <HAL_DMA_IRQHandler+0x282>
 8004e6a:	481c      	ldr	r0, [pc, #112]	@ (8004edc <HAL_DMA_IRQHandler+0x264>)
 8004e6c:	4282      	cmp	r2, r0
 8004e6e:	d044      	beq.n	8004efa <HAL_DMA_IRQHandler+0x282>
 8004e70:	6810      	ldr	r0, [r2, #0]
 8004e72:	0780      	lsls	r0, r0, #30
 8004e74:	d444      	bmi.n	8004f00 <HAL_DMA_IRQHandler+0x288>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d070      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x2e6>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e7e:	07dc      	lsls	r4, r3, #31
 8004e80:	d51e      	bpl.n	8004ec0 <HAL_DMA_IRQHandler+0x248>
        __HAL_DMA_DISABLE(hdma);
 8004e82:	683a      	ldr	r2, [r7, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e84:	2104      	movs	r1, #4
 8004e86:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e8a:	4915      	ldr	r1, [pc, #84]	@ (8004ee0 <HAL_DMA_IRQHandler+0x268>)
        __HAL_DMA_DISABLE(hdma);
 8004e8c:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e8e:	fba1 6106 	umull	r6, r1, r1, r6
        __HAL_DMA_DISABLE(hdma);
 8004e92:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e96:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	e002      	b.n	8004ea2 <HAL_DMA_IRQHandler+0x22a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e9c:	6813      	ldr	r3, [r2, #0]
 8004e9e:	07d8      	lsls	r0, r3, #31
 8004ea0:	d504      	bpl.n	8004eac <HAL_DMA_IRQHandler+0x234>
          if (++count > timeout)
 8004ea2:	9b01      	ldr	r3, [sp, #4]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	428b      	cmp	r3, r1
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	d9f7      	bls.n	8004e9c <HAL_DMA_IRQHandler+0x224>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004eac:	6813      	ldr	r3, [r2, #0]
 8004eae:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8004eb0:	bf4c      	ite	mi
 8004eb2:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8004eb4:	2301      	movpl	r3, #1
 8004eb6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8004ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d04b      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x2e6>
          hdma->XferCpltCallback(hdma);
 8004ec6:	4638      	mov	r0, r7
}
 8004ec8:	b003      	add	sp, #12
 8004eca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferCpltCallback(hdma);
 8004ece:	4718      	bx	r3
 8004ed0:	24000010 	.word	0x24000010
 8004ed4:	40020010 	.word	0x40020010
 8004ed8:	40020028 	.word	0x40020028
 8004edc:	400204b8 	.word	0x400204b8
 8004ee0:	1b4e81b5 	.word	0x1b4e81b5
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ee4:	0308      	lsls	r0, r1, #12
 8004ee6:	f57f af65 	bpl.w	8004db4 <HAL_DMA_IRQHandler+0x13c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004eea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004eec:	2900      	cmp	r1, #0
 8004eee:	f47f af65 	bne.w	8004dbc <HAL_DMA_IRQHandler+0x144>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ef2:	2120      	movs	r1, #32
 8004ef4:	4099      	lsls	r1, r3
 8004ef6:	420c      	tst	r4, r1
 8004ef8:	d0bd      	beq.n	8004e76 <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004efa:	6810      	ldr	r0, [r2, #0]
 8004efc:	06c4      	lsls	r4, r0, #27
 8004efe:	d5ba      	bpl.n	8004e76 <HAL_DMA_IRQHandler+0x1fe>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f00:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f02:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8004f06:	2904      	cmp	r1, #4
 8004f08:	d00e      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x2b0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f0a:	6813      	ldr	r3, [r2, #0]
 8004f0c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f10:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f12:	d026      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x2ea>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f14:	031d      	lsls	r5, r3, #12
 8004f16:	d531      	bpl.n	8004f7c <HAL_DMA_IRQHandler+0x304>
          if(hdma->XferCpltCallback != NULL)
 8004f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0ab      	beq.n	8004e76 <HAL_DMA_IRQHandler+0x1fe>
            hdma->XferCpltCallback(hdma);
 8004f1e:	4638      	mov	r0, r7
 8004f20:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f24:	b1db      	cbz	r3, 8004f5e <HAL_DMA_IRQHandler+0x2e6>
 8004f26:	e7a9      	b.n	8004e7c <HAL_DMA_IRQHandler+0x204>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f28:	6811      	ldr	r1, [r2, #0]
 8004f2a:	f021 0116 	bic.w	r1, r1, #22
 8004f2e:	6011      	str	r1, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f30:	6951      	ldr	r1, [r2, #20]
 8004f32:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004f36:	6151      	str	r1, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f3a:	b319      	cbz	r1, 8004f84 <HAL_DMA_IRQHandler+0x30c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f3c:	6811      	ldr	r1, [r2, #0]
 8004f3e:	f021 0108 	bic.w	r1, r1, #8
 8004f42:	6011      	str	r1, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f44:	223f      	movs	r2, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8004f46:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
          __HAL_UNLOCK(hdma);
 8004f4c:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f4e:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8004f50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8004f52:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8004f56:	f887 2034 	strb.w	r2, [r7, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1b3      	bne.n	8004ec6 <HAL_DMA_IRQHandler+0x24e>
}
 8004f5e:	b003      	add	sp, #12
 8004f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f62:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8004f66:	d1d7      	bne.n	8004f18 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f68:	6811      	ldr	r1, [r2, #0]
 8004f6a:	f021 0110 	bic.w	r1, r1, #16
 8004f6e:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8004f70:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8004f72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8004f76:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8004f7a:	e7cd      	b.n	8004f18 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1CpltCallback != NULL)
 8004f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1cd      	bne.n	8004f1e <HAL_DMA_IRQHandler+0x2a6>
 8004f82:	e778      	b.n	8004e76 <HAL_DMA_IRQHandler+0x1fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f84:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004f86:	2900      	cmp	r1, #0
 8004f88:	d1d8      	bne.n	8004f3c <HAL_DMA_IRQHandler+0x2c4>
 8004f8a:	e7db      	b.n	8004f44 <HAL_DMA_IRQHandler+0x2cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f8c:	4b40      	ldr	r3, [pc, #256]	@ (8005090 <HAL_DMA_IRQHandler+0x418>)
 8004f8e:	4841      	ldr	r0, [pc, #260]	@ (8005094 <HAL_DMA_IRQHandler+0x41c>)
 8004f90:	4282      	cmp	r2, r0
 8004f92:	bf18      	it	ne
 8004f94:	429a      	cmpne	r2, r3
 8004f96:	f100 0014 	add.w	r0, r0, #20
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	4282      	cmp	r2, r0
 8004fa2:	bf08      	it	eq
 8004fa4:	f043 0301 	orreq.w	r3, r3, #1
 8004fa8:	3014      	adds	r0, #20
 8004faa:	4282      	cmp	r2, r0
 8004fac:	bf08      	it	eq
 8004fae:	f043 0301 	orreq.w	r3, r3, #1
 8004fb2:	3014      	adds	r0, #20
 8004fb4:	4282      	cmp	r2, r0
 8004fb6:	bf08      	it	eq
 8004fb8:	f043 0301 	orreq.w	r3, r3, #1
 8004fbc:	3014      	adds	r0, #20
 8004fbe:	4282      	cmp	r2, r0
 8004fc0:	bf08      	it	eq
 8004fc2:	f043 0301 	orreq.w	r3, r3, #1
 8004fc6:	3014      	adds	r0, #20
 8004fc8:	4282      	cmp	r2, r0
 8004fca:	bf08      	it	eq
 8004fcc:	f043 0301 	orreq.w	r3, r3, #1
 8004fd0:	b913      	cbnz	r3, 8004fd8 <HAL_DMA_IRQHandler+0x360>
 8004fd2:	4b31      	ldr	r3, [pc, #196]	@ (8005098 <HAL_DMA_IRQHandler+0x420>)
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d1c2      	bne.n	8004f5e <HAL_DMA_IRQHandler+0x2e6>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004fd8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8004fda:	2404      	movs	r4, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004fdc:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004fde:	f000 001f 	and.w	r0, r0, #31
 8004fe2:	4084      	lsls	r4, r0
 8004fe4:	420c      	tst	r4, r1
 8004fe6:	d00b      	beq.n	8005000 <HAL_DMA_IRQHandler+0x388>
 8004fe8:	075e      	lsls	r6, r3, #29
 8004fea:	d509      	bpl.n	8005000 <HAL_DMA_IRQHandler+0x388>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fec:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004fee:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ff0:	d532      	bpl.n	8005058 <HAL_DMA_IRQHandler+0x3e0>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ff2:	03da      	lsls	r2, r3, #15
 8004ff4:	d436      	bmi.n	8005064 <HAL_DMA_IRQHandler+0x3ec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ff6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f47f af64 	bne.w	8004ec6 <HAL_DMA_IRQHandler+0x24e>
 8004ffe:	e7ae      	b.n	8004f5e <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005000:	2402      	movs	r4, #2
 8005002:	4084      	lsls	r4, r0
 8005004:	420c      	tst	r4, r1
 8005006:	d00b      	beq.n	8005020 <HAL_DMA_IRQHandler+0x3a8>
 8005008:	079e      	lsls	r6, r3, #30
 800500a:	d509      	bpl.n	8005020 <HAL_DMA_IRQHandler+0x3a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800500c:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800500e:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005010:	d52d      	bpl.n	800506e <HAL_DMA_IRQHandler+0x3f6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005012:	03da      	lsls	r2, r3, #15
 8005014:	d437      	bmi.n	8005086 <HAL_DMA_IRQHandler+0x40e>
          if(hdma->XferM1CpltCallback != NULL)
 8005016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005018:	2b00      	cmp	r3, #0
 800501a:	f47f af54 	bne.w	8004ec6 <HAL_DMA_IRQHandler+0x24e>
 800501e:	e79e      	b.n	8004f5e <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005020:	2408      	movs	r4, #8
 8005022:	4084      	lsls	r4, r0
 8005024:	420c      	tst	r4, r1
 8005026:	d09a      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x2e6>
 8005028:	071b      	lsls	r3, r3, #28
 800502a:	d598      	bpl.n	8004f5e <HAL_DMA_IRQHandler+0x2e6>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800502c:	6813      	ldr	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 800502e:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005030:	f023 030e 	bic.w	r3, r3, #14
 8005034:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005036:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8005038:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800503a:	fa03 f000 	lsl.w	r0, r3, r0
 800503e:	6068      	str	r0, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005040:	657b      	str	r3, [r7, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 8005042:	f887 1034 	strb.w	r1, [r7, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005046:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 800504a:	2a00      	cmp	r2, #0
 800504c:	d087      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x2e6>
        hdma->XferErrorCallback(hdma);
 800504e:	4638      	mov	r0, r7
}
 8005050:	b003      	add	sp, #12
 8005052:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8005056:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005058:	069b      	lsls	r3, r3, #26
 800505a:	d403      	bmi.n	8005064 <HAL_DMA_IRQHandler+0x3ec>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800505c:	6813      	ldr	r3, [r2, #0]
 800505e:	f023 0304 	bic.w	r3, r3, #4
 8005062:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005066:	2b00      	cmp	r3, #0
 8005068:	f47f af2d 	bne.w	8004ec6 <HAL_DMA_IRQHandler+0x24e>
 800506c:	e777      	b.n	8004f5e <HAL_DMA_IRQHandler+0x2e6>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800506e:	f013 0320 	ands.w	r3, r3, #32
 8005072:	d108      	bne.n	8005086 <HAL_DMA_IRQHandler+0x40e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005074:	6811      	ldr	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005076:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005078:	f021 010a 	bic.w	r1, r1, #10
 800507c:	6011      	str	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800507e:	f887 0035 	strb.w	r0, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005082:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8005086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005088:	2b00      	cmp	r3, #0
 800508a:	f47f af1c 	bne.w	8004ec6 <HAL_DMA_IRQHandler+0x24e>
 800508e:	e766      	b.n	8004f5e <HAL_DMA_IRQHandler+0x2e6>
 8005090:	58025408 	.word	0x58025408
 8005094:	5802541c 	.word	0x5802541c
 8005098:	58025494 	.word	0x58025494

0800509c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800509c:	680b      	ldr	r3, [r1, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 81dc 	beq.w	800545c <HAL_GPIO_Init+0x3c0>
 80050a4:	4ab4      	ldr	r2, [pc, #720]	@ (8005378 <HAL_GPIO_Init+0x2dc>)
 80050a6:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 80050a8:	f04f 0200 	mov.w	r2, #0
{
 80050ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050b0:	f04f 0b01 	mov.w	fp, #1
{
 80050b4:	b085      	sub	sp, #20
 80050b6:	f000 8105 	beq.w	80052c4 <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050ba:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050be:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050c0:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 80050c4:	9b00      	ldr	r3, [sp, #0]
 80050c6:	ea1c 0a03 	ands.w	sl, ip, r3
 80050ca:	f000 814b 	beq.w	8005364 <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050ce:	684d      	ldr	r5, [r1, #4]
 80050d0:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050d2:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050d4:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050d8:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050dc:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050e0:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050e2:	f1b8 0f01 	cmp.w	r8, #1
 80050e6:	f240 815d 	bls.w	80053a4 <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050ea:	2f03      	cmp	r7, #3
 80050ec:	f040 81cf 	bne.w	800548e <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050f0:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 80050f4:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050f6:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050fa:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050fe:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 8005102:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005104:	f000 812e 	beq.w	8005364 <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005108:	4e9c      	ldr	r6, [pc, #624]	@ (800537c <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800510a:	f002 0703 	and.w	r7, r2, #3
 800510e:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005110:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005114:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005116:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800511a:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800511e:	4b98      	ldr	r3, [pc, #608]	@ (8005380 <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005120:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 8005124:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 8005128:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800512c:	4298      	cmp	r0, r3
 800512e:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005132:	f004 0402 	and.w	r4, r4, #2
 8005136:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800513a:	9403      	str	r4, [sp, #12]
 800513c:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800513e:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005140:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005144:	f000 8178 	beq.w	8005438 <HAL_GPIO_Init+0x39c>
 8005148:	4b8e      	ldr	r3, [pc, #568]	@ (8005384 <HAL_GPIO_Init+0x2e8>)
 800514a:	4298      	cmp	r0, r3
 800514c:	f000 80de 	beq.w	800530c <HAL_GPIO_Init+0x270>
 8005150:	f8df c234 	ldr.w	ip, [pc, #564]	@ 8005388 <HAL_GPIO_Init+0x2ec>
 8005154:	4560      	cmp	r0, ip
 8005156:	f000 817b 	beq.w	8005450 <HAL_GPIO_Init+0x3b4>
 800515a:	f8df c230 	ldr.w	ip, [pc, #560]	@ 800538c <HAL_GPIO_Init+0x2f0>
 800515e:	4560      	cmp	r0, ip
 8005160:	f000 817d 	beq.w	800545e <HAL_GPIO_Init+0x3c2>
 8005164:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8005390 <HAL_GPIO_Init+0x2f4>
 8005168:	4560      	cmp	r0, ip
 800516a:	f000 816b 	beq.w	8005444 <HAL_GPIO_Init+0x3a8>
 800516e:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8005394 <HAL_GPIO_Init+0x2f8>
 8005172:	4560      	cmp	r0, ip
 8005174:	f000 8179 	beq.w	800546a <HAL_GPIO_Init+0x3ce>
 8005178:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 8005398 <HAL_GPIO_Init+0x2fc>
 800517c:	4560      	cmp	r0, ip
 800517e:	f000 817a 	beq.w	8005476 <HAL_GPIO_Init+0x3da>
 8005182:	f8df c218 	ldr.w	ip, [pc, #536]	@ 800539c <HAL_GPIO_Init+0x300>
 8005186:	4560      	cmp	r0, ip
 8005188:	f000 817b 	beq.w	8005482 <HAL_GPIO_Init+0x3e6>
 800518c:	f8df c210 	ldr.w	ip, [pc, #528]	@ 80053a0 <HAL_GPIO_Init+0x304>
 8005190:	4560      	cmp	r0, ip
 8005192:	bf0c      	ite	eq
 8005194:	f04f 0c09 	moveq.w	ip, #9
 8005198:	f04f 0c0a 	movne.w	ip, #10
 800519c:	fa0c f707 	lsl.w	r7, ip, r7
 80051a0:	433c      	orrs	r4, r7
 80051a2:	e0b8      	b.n	8005316 <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 80051a4:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051a8:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051aa:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051ac:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051b0:	fa06 f807 	lsl.w	r8, r6, r7
 80051b4:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80051b8:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051bc:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 80051c0:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051c4:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051c8:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051cc:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 80051d0:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 80051d4:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051d8:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051da:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051de:	fa06 fe07 	lsl.w	lr, r6, r7
 80051e2:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 80051e6:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051ea:	d117      	bne.n	800521c <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051ec:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051f0:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 80051f2:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051f6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80051fa:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051fe:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8005202:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005206:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005208:	260f      	movs	r6, #15
 800520a:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800520e:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005210:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005214:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8005218:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800521c:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 800521e:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005220:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005224:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005228:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800522c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800522e:	d045      	beq.n	80052bc <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005230:	4f52      	ldr	r7, [pc, #328]	@ (800537c <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005232:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005234:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8005238:	f044 0402 	orr.w	r4, r4, #2
 800523c:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8005240:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8005244:	f022 0703 	bic.w	r7, r2, #3
 8005248:	f004 0402 	and.w	r4, r4, #2
 800524c:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 8005250:	9403      	str	r4, [sp, #12]
 8005252:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8005256:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005258:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800525c:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005260:	00a4      	lsls	r4, r4, #2
 8005262:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005266:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005268:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 800526c:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 800526e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 8005272:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 8005276:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005278:	f100 80d2 	bmi.w	8005420 <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 800527c:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800527e:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8005282:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 8005284:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005286:	02ae      	lsls	r6, r5, #10
 8005288:	f100 80d3 	bmi.w	8005432 <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 800528c:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800528e:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8005292:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005294:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005298:	03ae      	lsls	r6, r5, #14
 800529a:	f100 80c7 	bmi.w	800542c <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 800529e:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80052a0:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052a4:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80052a6:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80052aa:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052ae:	f100 80ba 	bmi.w	8005426 <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 80052b2:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052b4:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80052b8:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 80052bc:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052be:	fa33 f402 	lsrs.w	r4, r3, r2
 80052c2:	d055      	beq.n	8005370 <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052c4:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 80052c8:	ea13 0c0e 	ands.w	ip, r3, lr
 80052cc:	d0f6      	beq.n	80052bc <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052ce:	684d      	ldr	r5, [r1, #4]
 80052d0:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052d2:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052d4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052d8:	fa06 f807 	lsl.w	r8, r6, r7
 80052dc:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052e0:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80052e4:	f1b8 0f01 	cmp.w	r8, #1
 80052e8:	f67f af5c 	bls.w	80051a4 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052ec:	2c03      	cmp	r4, #3
 80052ee:	d095      	beq.n	800521c <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 80052f0:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8005378 <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052f4:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 80052f6:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052fa:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052fe:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005302:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 8005306:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800530a:	e787      	b.n	800521c <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800530c:	f04f 0c02 	mov.w	ip, #2
 8005310:	fa0c f707 	lsl.w	r7, ip, r7
 8005314:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005316:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005318:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 800531a:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 800531e:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 8005322:	bf4c      	ite	mi
 8005324:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 8005328:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800532a:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 800532c:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 8005330:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 8005334:	bf54      	ite	pl
 8005336:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8005338:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800533c:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 800533e:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005342:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8005346:	bf54      	ite	pl
 8005348:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800534a:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800534e:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8005350:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8005354:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8005358:	bf54      	ite	pl
 800535a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800535c:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 8005360:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 8005364:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005366:	9b00      	ldr	r3, [sp, #0]
 8005368:	fa33 f402 	lsrs.w	r4, r3, r2
 800536c:	f47f aea8 	bne.w	80050c0 <HAL_GPIO_Init+0x24>
  }
}
 8005370:	b005      	add	sp, #20
 8005372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005376:	bf00      	nop
 8005378:	58020000 	.word	0x58020000
 800537c:	58024400 	.word	0x58024400
 8005380:	58020400 	.word	0x58020400
 8005384:	58020800 	.word	0x58020800
 8005388:	58020c00 	.word	0x58020c00
 800538c:	58021000 	.word	0x58021000
 8005390:	58021400 	.word	0x58021400
 8005394:	58021800 	.word	0x58021800
 8005398:	58021c00 	.word	0x58021c00
 800539c:	58022000 	.word	0x58022000
 80053a0:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 80053a4:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053a8:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053aa:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053ac:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053b0:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053b4:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053b6:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80053ba:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053be:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 80053c2:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053c6:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053ca:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053ce:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 80053d2:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053d6:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 80053da:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053de:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053e2:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 80053e6:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ea:	f47f ae81 	bne.w	80050f0 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053ee:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053f2:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 80053f4:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053f8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80053fc:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005400:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8005404:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005408:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800540a:	230f      	movs	r3, #15
 800540c:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005410:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005412:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005416:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 800541a:	f8c8 c020 	str.w	ip, [r8, #32]
 800541e:	e667      	b.n	80050f0 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8005420:	ea44 040c 	orr.w	r4, r4, ip
 8005424:	e72b      	b.n	800527e <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 8005426:	ea44 040c 	orr.w	r4, r4, ip
 800542a:	e743      	b.n	80052b4 <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 800542c:	ea4c 0404 	orr.w	r4, ip, r4
 8005430:	e736      	b.n	80052a0 <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 8005432:	ea44 040c 	orr.w	r4, r4, ip
 8005436:	e72a      	b.n	800528e <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005438:	f04f 0c01 	mov.w	ip, #1
 800543c:	fa0c f707 	lsl.w	r7, ip, r7
 8005440:	433c      	orrs	r4, r7
 8005442:	e768      	b.n	8005316 <HAL_GPIO_Init+0x27a>
 8005444:	f04f 0c05 	mov.w	ip, #5
 8005448:	fa0c f707 	lsl.w	r7, ip, r7
 800544c:	433c      	orrs	r4, r7
 800544e:	e762      	b.n	8005316 <HAL_GPIO_Init+0x27a>
 8005450:	f04f 0c03 	mov.w	ip, #3
 8005454:	fa0c f707 	lsl.w	r7, ip, r7
 8005458:	433c      	orrs	r4, r7
 800545a:	e75c      	b.n	8005316 <HAL_GPIO_Init+0x27a>
 800545c:	4770      	bx	lr
 800545e:	f04f 0c04 	mov.w	ip, #4
 8005462:	fa0c f707 	lsl.w	r7, ip, r7
 8005466:	433c      	orrs	r4, r7
 8005468:	e755      	b.n	8005316 <HAL_GPIO_Init+0x27a>
 800546a:	f04f 0c06 	mov.w	ip, #6
 800546e:	fa0c f707 	lsl.w	r7, ip, r7
 8005472:	433c      	orrs	r4, r7
 8005474:	e74f      	b.n	8005316 <HAL_GPIO_Init+0x27a>
 8005476:	f04f 0c07 	mov.w	ip, #7
 800547a:	fa0c f707 	lsl.w	r7, ip, r7
 800547e:	433c      	orrs	r4, r7
 8005480:	e749      	b.n	8005316 <HAL_GPIO_Init+0x27a>
 8005482:	f04f 0c08 	mov.w	ip, #8
 8005486:	fa0c f707 	lsl.w	r7, ip, r7
 800548a:	433c      	orrs	r4, r7
 800548c:	e743      	b.n	8005316 <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 800548e:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005492:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005494:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005498:	fa03 fc04 	lsl.w	ip, r3, r4
 800549c:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 80054a0:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054a4:	e624      	b.n	80050f0 <HAL_GPIO_Init+0x54>
 80054a6:	bf00      	nop

080054a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80054a8:	6903      	ldr	r3, [r0, #16]
 80054aa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80054ac:	bf14      	ite	ne
 80054ae:	2001      	movne	r0, #1
 80054b0:	2000      	moveq	r0, #0
 80054b2:	4770      	bx	lr

080054b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054b4:	b902      	cbnz	r2, 80054b8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80054b6:	0409      	lsls	r1, r1, #16
 80054b8:	6181      	str	r1, [r0, #24]
  }
}
 80054ba:	4770      	bx	lr

080054bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80054bc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80054be:	4c10      	ldr	r4, [pc, #64]	@ (8005500 <HAL_PWREx_ConfigSupply+0x44>)
 80054c0:	68e3      	ldr	r3, [r4, #12]
 80054c2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80054c6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80054c8:	d105      	bne.n	80054d6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	1a18      	subs	r0, r3, r0
 80054d0:	bf18      	it	ne
 80054d2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80054d4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80054d6:	f023 0307 	bic.w	r3, r3, #7
 80054da:	4303      	orrs	r3, r0
 80054dc:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80054de:	f7fd f8f1 	bl	80026c4 <HAL_GetTick>
 80054e2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054e4:	e005      	b.n	80054f2 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80054e6:	f7fd f8ed 	bl	80026c4 <HAL_GetTick>
 80054ea:	1b40      	subs	r0, r0, r5
 80054ec:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80054f0:	d804      	bhi.n	80054fc <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054f2:	6863      	ldr	r3, [r4, #4]
 80054f4:	049b      	lsls	r3, r3, #18
 80054f6:	d5f6      	bpl.n	80054e6 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 80054f8:	2000      	movs	r0, #0
}
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80054fc:	2001      	movs	r0, #1
}
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	58024800 	.word	0x58024800

08005504 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005504:	4b33      	ldr	r3, [pc, #204]	@ (80055d4 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8005506:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005508:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800550a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800550c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800550e:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005514:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8005518:	d036      	beq.n	8005588 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800551a:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800551e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005522:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005526:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800552a:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 800552e:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005530:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005534:	ee06 2a90 	vmov	s13, r2
 8005538:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800553c:	d002      	beq.n	8005544 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 800553e:	2902      	cmp	r1, #2
 8005540:	d042      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8005542:	b319      	cbz	r1, 800558c <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005544:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80055d8 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8005548:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800554c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800555a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800555e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005566:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800556a:	4b1a      	ldr	r3, [pc, #104]	@ (80055d4 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 800556c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005572:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005574:	ee07 3a10 	vmov	s14, r3
 8005578:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800557c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005580:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005584:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8005588:	bc30      	pop	{r4, r5}
 800558a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	0692      	lsls	r2, r2, #26
 8005590:	d51d      	bpl.n	80055ce <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005592:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005594:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005598:	4a10      	ldr	r2, [pc, #64]	@ (80055dc <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800559a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800559c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055a4:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055a6:	ee06 3a10 	vmov	s12, r3
 80055aa:	ee05 2a90 	vmov	s11, r2
 80055ae:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80055b2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80055b6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80055ba:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80055be:	ee36 7a26 	vadd.f32	s14, s12, s13
 80055c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055c6:	e7d0      	b.n	800556a <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055c8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80055e0 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 80055cc:	e7bc      	b.n	8005548 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055ce:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80055e4 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 80055d2:	e7b9      	b.n	8005548 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80055d4:	58024400 	.word	0x58024400
 80055d8:	4a742400 	.word	0x4a742400
 80055dc:	03d09000 	.word	0x03d09000
 80055e0:	4bbebc20 	.word	0x4bbebc20
 80055e4:	4c742400 	.word	0x4c742400

080055e8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80055e8:	2800      	cmp	r0, #0
 80055ea:	f000 82e7 	beq.w	8005bbc <HAL_RCC_OscConfig+0x5d4>
{
 80055ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055f0:	6803      	ldr	r3, [r0, #0]
 80055f2:	4604      	mov	r4, r0
 80055f4:	07d9      	lsls	r1, r3, #31
 80055f6:	d52e      	bpl.n	8005656 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f8:	4997      	ldr	r1, [pc, #604]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
 80055fa:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055fc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055fe:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005602:	2a10      	cmp	r2, #16
 8005604:	f000 80ee 	beq.w	80057e4 <HAL_RCC_OscConfig+0x1fc>
 8005608:	2a18      	cmp	r2, #24
 800560a:	f000 80e6 	beq.w	80057da <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800560e:	6863      	ldr	r3, [r4, #4]
 8005610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005614:	f000 8111 	beq.w	800583a <HAL_RCC_OscConfig+0x252>
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8167 	beq.w	80058ec <HAL_RCC_OscConfig+0x304>
 800561e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005622:	4b8d      	ldr	r3, [pc, #564]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f000 8288 	beq.w	8005b3a <HAL_RCC_OscConfig+0x552>
 800562a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005636:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005638:	f7fd f844 	bl	80026c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800563c:	4e86      	ldr	r6, [pc, #536]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800563e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005640:	e005      	b.n	800564e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005642:	f7fd f83f 	bl	80026c4 <HAL_GetTick>
 8005646:	1b40      	subs	r0, r0, r5
 8005648:	2864      	cmp	r0, #100	@ 0x64
 800564a:	f200 814d 	bhi.w	80058e8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800564e:	6833      	ldr	r3, [r6, #0]
 8005650:	039b      	lsls	r3, r3, #14
 8005652:	d5f6      	bpl.n	8005642 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	079d      	lsls	r5, r3, #30
 8005658:	d470      	bmi.n	800573c <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800565a:	06d9      	lsls	r1, r3, #27
 800565c:	d533      	bpl.n	80056c6 <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800565e:	4a7e      	ldr	r2, [pc, #504]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
 8005660:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005662:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005664:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005668:	2b08      	cmp	r3, #8
 800566a:	f000 80cb 	beq.w	8005804 <HAL_RCC_OscConfig+0x21c>
 800566e:	2b18      	cmp	r3, #24
 8005670:	f000 80c3 	beq.w	80057fa <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005674:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8005676:	4d78      	ldr	r5, [pc, #480]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 816f 	beq.w	800595c <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 800567e:	682b      	ldr	r3, [r5, #0]
 8005680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005684:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005686:	f7fd f81d 	bl	80026c4 <HAL_GetTick>
 800568a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800568c:	e005      	b.n	800569a <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800568e:	f7fd f819 	bl	80026c4 <HAL_GetTick>
 8005692:	1b80      	subs	r0, r0, r6
 8005694:	2802      	cmp	r0, #2
 8005696:	f200 8127 	bhi.w	80058e8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800569a:	682b      	ldr	r3, [r5, #0]
 800569c:	05db      	lsls	r3, r3, #23
 800569e:	d5f6      	bpl.n	800568e <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056a0:	f7fd f816 	bl	80026d0 <HAL_GetREVID>
 80056a4:	f241 0303 	movw	r3, #4099	@ 0x1003
 80056a8:	4298      	cmp	r0, r3
 80056aa:	f200 8267 	bhi.w	8005b7c <HAL_RCC_OscConfig+0x594>
 80056ae:	6a22      	ldr	r2, [r4, #32]
 80056b0:	686b      	ldr	r3, [r5, #4]
 80056b2:	2a20      	cmp	r2, #32
 80056b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80056b8:	bf0c      	ite	eq
 80056ba:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 80056be:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80056c2:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	071d      	lsls	r5, r3, #28
 80056c8:	d516      	bpl.n	80056f8 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056ca:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80056cc:	4d62      	ldr	r5, [pc, #392]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8122 	beq.w	8005918 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 80056d4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80056dc:	f7fc fff2 	bl	80026c4 <HAL_GetTick>
 80056e0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056e2:	e005      	b.n	80056f0 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056e4:	f7fc ffee 	bl	80026c4 <HAL_GetTick>
 80056e8:	1b80      	subs	r0, r0, r6
 80056ea:	2802      	cmp	r0, #2
 80056ec:	f200 80fc 	bhi.w	80058e8 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056f0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80056f2:	0798      	lsls	r0, r3, #30
 80056f4:	d5f6      	bpl.n	80056e4 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	069a      	lsls	r2, r3, #26
 80056fa:	d516      	bpl.n	800572a <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80056fc:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80056fe:	4d56      	ldr	r5, [pc, #344]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 811a 	beq.w	800593a <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 8005706:	682b      	ldr	r3, [r5, #0]
 8005708:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800570c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800570e:	f7fc ffd9 	bl	80026c4 <HAL_GetTick>
 8005712:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005714:	e005      	b.n	8005722 <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005716:	f7fc ffd5 	bl	80026c4 <HAL_GetTick>
 800571a:	1b80      	subs	r0, r0, r6
 800571c:	2802      	cmp	r0, #2
 800571e:	f200 80e3 	bhi.w	80058e8 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005722:	682b      	ldr	r3, [r5, #0]
 8005724:	049f      	lsls	r7, r3, #18
 8005726:	d5f6      	bpl.n	8005716 <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	0759      	lsls	r1, r3, #29
 800572c:	f100 808b 	bmi.w	8005846 <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005730:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005732:	2b00      	cmp	r3, #0
 8005734:	f040 80bf 	bne.w	80058b6 <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 8005738:	2000      	movs	r0, #0
}
 800573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800573c:	4a46      	ldr	r2, [pc, #280]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
 800573e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005740:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005742:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8005746:	d12d      	bne.n	80057a4 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005748:	4b43      	ldr	r3, [pc, #268]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800574a:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	0759      	lsls	r1, r3, #29
 8005750:	d501      	bpl.n	8005756 <HAL_RCC_OscConfig+0x16e>
 8005752:	2a00      	cmp	r2, #0
 8005754:	d04f      	beq.n	80057f6 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005756:	4d40      	ldr	r5, [pc, #256]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
 8005758:	682b      	ldr	r3, [r5, #0]
 800575a:	f023 0319 	bic.w	r3, r3, #25
 800575e:	4313      	orrs	r3, r2
 8005760:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005762:	f7fc ffaf 	bl	80026c4 <HAL_GetTick>
 8005766:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005768:	e005      	b.n	8005776 <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800576a:	f7fc ffab 	bl	80026c4 <HAL_GetTick>
 800576e:	1b80      	subs	r0, r0, r6
 8005770:	2802      	cmp	r0, #2
 8005772:	f200 80b9 	bhi.w	80058e8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005776:	682b      	ldr	r3, [r5, #0]
 8005778:	075b      	lsls	r3, r3, #29
 800577a:	d5f6      	bpl.n	800576a <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577c:	f7fc ffa8 	bl	80026d0 <HAL_GetREVID>
 8005780:	f241 0303 	movw	r3, #4099	@ 0x1003
 8005784:	4298      	cmp	r0, r3
 8005786:	f200 8110 	bhi.w	80059aa <HAL_RCC_OscConfig+0x3c2>
 800578a:	6922      	ldr	r2, [r4, #16]
 800578c:	686b      	ldr	r3, [r5, #4]
 800578e:	2a40      	cmp	r2, #64	@ 0x40
 8005790:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005794:	bf0c      	ite	eq
 8005796:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800579a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800579e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	e75a      	b.n	800565a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80057a4:	2b18      	cmp	r3, #24
 80057a6:	f000 80fc 	beq.w	80059a2 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057aa:	4d2b      	ldr	r5, [pc, #172]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057ac:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057ae:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057b0:	2a00      	cmp	r2, #0
 80057b2:	f000 80e5 	beq.w	8005980 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057b6:	f023 0319 	bic.w	r3, r3, #25
 80057ba:	4313      	orrs	r3, r2
 80057bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80057be:	f7fc ff81 	bl	80026c4 <HAL_GetTick>
 80057c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057c4:	e005      	b.n	80057d2 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057c6:	f7fc ff7d 	bl	80026c4 <HAL_GetTick>
 80057ca:	1b80      	subs	r0, r0, r6
 80057cc:	2802      	cmp	r0, #2
 80057ce:	f200 808b 	bhi.w	80058e8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057d2:	682b      	ldr	r3, [r5, #0]
 80057d4:	075f      	lsls	r7, r3, #29
 80057d6:	d5f6      	bpl.n	80057c6 <HAL_RCC_OscConfig+0x1de>
 80057d8:	e7d0      	b.n	800577c <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80057da:	f001 0103 	and.w	r1, r1, #3
 80057de:	2902      	cmp	r1, #2
 80057e0:	f47f af15 	bne.w	800560e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	0392      	lsls	r2, r2, #14
 80057ea:	f57f af34 	bpl.w	8005656 <HAL_RCC_OscConfig+0x6e>
 80057ee:	6862      	ldr	r2, [r4, #4]
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	f47f af30 	bne.w	8005656 <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 80057f6:	2001      	movs	r0, #1
}
 80057f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80057fa:	f002 0203 	and.w	r2, r2, #3
 80057fe:	2a01      	cmp	r2, #1
 8005800:	f47f af38 	bne.w	8005674 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005804:	4b14      	ldr	r3, [pc, #80]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	05da      	lsls	r2, r3, #23
 800580a:	d502      	bpl.n	8005812 <HAL_RCC_OscConfig+0x22a>
 800580c:	69e3      	ldr	r3, [r4, #28]
 800580e:	2b80      	cmp	r3, #128	@ 0x80
 8005810:	d1f1      	bne.n	80057f6 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005812:	f7fc ff5d 	bl	80026d0 <HAL_GetREVID>
 8005816:	f241 0303 	movw	r3, #4099	@ 0x1003
 800581a:	4298      	cmp	r0, r3
 800581c:	f200 80ce 	bhi.w	80059bc <HAL_RCC_OscConfig+0x3d4>
 8005820:	6a22      	ldr	r2, [r4, #32]
 8005822:	2a20      	cmp	r2, #32
 8005824:	f000 81b9 	beq.w	8005b9a <HAL_RCC_OscConfig+0x5b2>
 8005828:	490b      	ldr	r1, [pc, #44]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
 800582a:	684b      	ldr	r3, [r1, #4]
 800582c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005830:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8005834:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	e745      	b.n	80056c6 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800583a:	4a07      	ldr	r2, [pc, #28]	@ (8005858 <HAL_RCC_OscConfig+0x270>)
 800583c:	6813      	ldr	r3, [r2, #0]
 800583e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005842:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005844:	e6f8      	b.n	8005638 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8005846:	4d05      	ldr	r5, [pc, #20]	@ (800585c <HAL_RCC_OscConfig+0x274>)
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800584e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005850:	f7fc ff38 	bl	80026c4 <HAL_GetTick>
 8005854:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x282>
 8005858:	58024400 	.word	0x58024400
 800585c:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005860:	f7fc ff30 	bl	80026c4 <HAL_GetTick>
 8005864:	1b80      	subs	r0, r0, r6
 8005866:	2864      	cmp	r0, #100	@ 0x64
 8005868:	d83e      	bhi.n	80058e8 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	05da      	lsls	r2, r3, #23
 800586e:	d5f7      	bpl.n	8005860 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005870:	68a3      	ldr	r3, [r4, #8]
 8005872:	2b01      	cmp	r3, #1
 8005874:	f000 818b 	beq.w	8005b8e <HAL_RCC_OscConfig+0x5a6>
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 8166 	beq.w	8005b4a <HAL_RCC_OscConfig+0x562>
 800587e:	2b05      	cmp	r3, #5
 8005880:	4b85      	ldr	r3, [pc, #532]	@ (8005a98 <HAL_RCC_OscConfig+0x4b0>)
 8005882:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005884:	f000 8192 	beq.w	8005bac <HAL_RCC_OscConfig+0x5c4>
 8005888:	f022 0201 	bic.w	r2, r2, #1
 800588c:	671a      	str	r2, [r3, #112]	@ 0x70
 800588e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005890:	f022 0204 	bic.w	r2, r2, #4
 8005894:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005896:	f7fc ff15 	bl	80026c4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800589a:	4e7f      	ldr	r6, [pc, #508]	@ (8005a98 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589c:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80058a0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058a2:	e004      	b.n	80058ae <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a4:	f7fc ff0e 	bl	80026c4 <HAL_GetTick>
 80058a8:	1b40      	subs	r0, r0, r5
 80058aa:	42b8      	cmp	r0, r7
 80058ac:	d81c      	bhi.n	80058e8 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058ae:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80058b0:	079b      	lsls	r3, r3, #30
 80058b2:	d5f7      	bpl.n	80058a4 <HAL_RCC_OscConfig+0x2bc>
 80058b4:	e73c      	b.n	8005730 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058b6:	4d78      	ldr	r5, [pc, #480]	@ (8005a98 <HAL_RCC_OscConfig+0x4b0>)
 80058b8:	692a      	ldr	r2, [r5, #16]
 80058ba:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80058be:	2a18      	cmp	r2, #24
 80058c0:	f000 80ee 	beq.w	8005aa0 <HAL_RCC_OscConfig+0x4b8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c4:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80058c6:	682b      	ldr	r3, [r5, #0]
 80058c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058cc:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ce:	d07f      	beq.n	80059d0 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 80058d0:	f7fc fef8 	bl	80026c4 <HAL_GetTick>
 80058d4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058d6:	682b      	ldr	r3, [r5, #0]
 80058d8:	019b      	lsls	r3, r3, #6
 80058da:	f57f af2d 	bpl.w	8005738 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058de:	f7fc fef1 	bl	80026c4 <HAL_GetTick>
 80058e2:	1b00      	subs	r0, r0, r4
 80058e4:	2802      	cmp	r0, #2
 80058e6:	d9f6      	bls.n	80058d6 <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 80058e8:	2003      	movs	r0, #3
}
 80058ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058ec:	4d6a      	ldr	r5, [pc, #424]	@ (8005a98 <HAL_RCC_OscConfig+0x4b0>)
 80058ee:	682b      	ldr	r3, [r5, #0]
 80058f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058f4:	602b      	str	r3, [r5, #0]
 80058f6:	682b      	ldr	r3, [r5, #0]
 80058f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80058fe:	f7fc fee1 	bl	80026c4 <HAL_GetTick>
 8005902:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005904:	e004      	b.n	8005910 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005906:	f7fc fedd 	bl	80026c4 <HAL_GetTick>
 800590a:	1b80      	subs	r0, r0, r6
 800590c:	2864      	cmp	r0, #100	@ 0x64
 800590e:	d8eb      	bhi.n	80058e8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	039f      	lsls	r7, r3, #14
 8005914:	d4f7      	bmi.n	8005906 <HAL_RCC_OscConfig+0x31e>
 8005916:	e69d      	b.n	8005654 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8005918:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800591a:	f023 0301 	bic.w	r3, r3, #1
 800591e:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8005920:	f7fc fed0 	bl	80026c4 <HAL_GetTick>
 8005924:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005926:	e004      	b.n	8005932 <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005928:	f7fc fecc 	bl	80026c4 <HAL_GetTick>
 800592c:	1b80      	subs	r0, r0, r6
 800592e:	2802      	cmp	r0, #2
 8005930:	d8da      	bhi.n	80058e8 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005932:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8005934:	0799      	lsls	r1, r3, #30
 8005936:	d4f7      	bmi.n	8005928 <HAL_RCC_OscConfig+0x340>
 8005938:	e6dd      	b.n	80056f6 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 800593a:	682b      	ldr	r3, [r5, #0]
 800593c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005940:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005942:	f7fc febf 	bl	80026c4 <HAL_GetTick>
 8005946:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005948:	e004      	b.n	8005954 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800594a:	f7fc febb 	bl	80026c4 <HAL_GetTick>
 800594e:	1b80      	subs	r0, r0, r6
 8005950:	2802      	cmp	r0, #2
 8005952:	d8c9      	bhi.n	80058e8 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	0498      	lsls	r0, r3, #18
 8005958:	d4f7      	bmi.n	800594a <HAL_RCC_OscConfig+0x362>
 800595a:	e6e5      	b.n	8005728 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005962:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005964:	f7fc feae 	bl	80026c4 <HAL_GetTick>
 8005968:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800596a:	e004      	b.n	8005976 <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800596c:	f7fc feaa 	bl	80026c4 <HAL_GetTick>
 8005970:	1b80      	subs	r0, r0, r6
 8005972:	2802      	cmp	r0, #2
 8005974:	d8b8      	bhi.n	80058e8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005976:	682b      	ldr	r3, [r5, #0]
 8005978:	05df      	lsls	r7, r3, #23
 800597a:	d4f7      	bmi.n	800596c <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	e6a2      	b.n	80056c6 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8005980:	f023 0301 	bic.w	r3, r3, #1
 8005984:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005986:	f7fc fe9d 	bl	80026c4 <HAL_GetTick>
 800598a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800598c:	e004      	b.n	8005998 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598e:	f7fc fe99 	bl	80026c4 <HAL_GetTick>
 8005992:	1b80      	subs	r0, r0, r6
 8005994:	2802      	cmp	r0, #2
 8005996:	d8a7      	bhi.n	80058e8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	0758      	lsls	r0, r3, #29
 800599c:	d4f7      	bmi.n	800598e <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	e65b      	b.n	800565a <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80059a2:	0790      	lsls	r0, r2, #30
 80059a4:	f47f af01 	bne.w	80057aa <HAL_RCC_OscConfig+0x1c2>
 80059a8:	e6ce      	b.n	8005748 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059aa:	686b      	ldr	r3, [r5, #4]
 80059ac:	6922      	ldr	r2, [r4, #16]
 80059ae:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80059b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80059b6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	e64e      	b.n	800565a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059bc:	4a36      	ldr	r2, [pc, #216]	@ (8005a98 <HAL_RCC_OscConfig+0x4b0>)
 80059be:	6a21      	ldr	r1, [r4, #32]
 80059c0:	68d3      	ldr	r3, [r2, #12]
 80059c2:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80059c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80059ca:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	e67a      	b.n	80056c6 <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 80059d0:	f7fc fe78 	bl	80026c4 <HAL_GetTick>
 80059d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059d6:	e004      	b.n	80059e2 <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d8:	f7fc fe74 	bl	80026c4 <HAL_GetTick>
 80059dc:	1b80      	subs	r0, r0, r6
 80059de:	2802      	cmp	r0, #2
 80059e0:	d882      	bhi.n	80058e8 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059e2:	682b      	ldr	r3, [r5, #0]
 80059e4:	0199      	lsls	r1, r3, #6
 80059e6:	d4f7      	bmi.n	80059d8 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059e8:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80059ea:	4b2c      	ldr	r3, [pc, #176]	@ (8005a9c <HAL_RCC_OscConfig+0x4b4>)
 80059ec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80059ee:	400b      	ands	r3, r1
 80059f0:	4313      	orrs	r3, r2
 80059f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80059f4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80059f8:	62ab      	str	r3, [r5, #40]	@ 0x28
 80059fa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80059fc:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8005a00:	3901      	subs	r1, #1
 8005a02:	3b01      	subs	r3, #1
 8005a04:	3a01      	subs	r2, #1
 8005a06:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005a0a:	025b      	lsls	r3, r3, #9
 8005a0c:	0412      	lsls	r2, r2, #16
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005a14:	4313      	orrs	r3, r2
 8005a16:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005a18:	3a01      	subs	r2, #1
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	0612      	lsls	r2, r2, #24
 8005a1e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005a22:	4313      	orrs	r3, r2
 8005a24:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8005a26:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a2e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005a30:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8005a32:	f36f 03cf 	bfc	r3, #3, #13
 8005a36:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005a3a:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a3c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005a3e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005a40:	f023 030c 	bic.w	r3, r3, #12
 8005a44:	4313      	orrs	r3, r2
 8005a46:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a48:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005a4a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005a4c:	f023 0302 	bic.w	r3, r3, #2
 8005a50:	4313      	orrs	r3, r2
 8005a52:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a54:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005a56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a5a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a5c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a62:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a64:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005a66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a6a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8005a6c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005a7c:	f7fc fe22 	bl	80026c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a80:	4d05      	ldr	r5, [pc, #20]	@ (8005a98 <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
 8005a82:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	019a      	lsls	r2, r3, #6
 8005a88:	f53f ae56 	bmi.w	8005738 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a8c:	f7fc fe1a 	bl	80026c4 <HAL_GetTick>
 8005a90:	1b00      	subs	r0, r0, r4
 8005a92:	2802      	cmp	r0, #2
 8005a94:	d9f6      	bls.n	8005a84 <HAL_RCC_OscConfig+0x49c>
 8005a96:	e727      	b.n	80058e8 <HAL_RCC_OscConfig+0x300>
 8005a98:	58024400 	.word	0x58024400
 8005a9c:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aa0:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005aa2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005aa4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aa6:	f43f aea6 	beq.w	80057f6 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aaa:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aae:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005ab0:	428b      	cmp	r3, r1
 8005ab2:	f47f aea0 	bne.w	80057f6 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ab6:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005abc:	429a      	cmp	r2, r3
 8005abe:	f47f ae9a 	bne.w	80057f6 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ac2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005ac4:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8005ac8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	f47f ae93 	bne.w	80057f6 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ad2:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8005ad6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	f47f ae8c 	bne.w	80057f6 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ade:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005ae0:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8005ae4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	f47f ae85 	bne.w	80057f6 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005aec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005aee:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8005af2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005af4:	4298      	cmp	r0, r3
 8005af6:	f47f ae7e 	bne.w	80057f6 <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005afa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005afc:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005afe:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005b02:	429a      	cmp	r2, r3
 8005b04:	f43f ae18 	beq.w	8005738 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8005b08:	4a2d      	ldr	r2, [pc, #180]	@ (8005bc0 <HAL_RCC_OscConfig+0x5d8>)
 8005b0a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8005b12:	f7fc fdd7 	bl	80026c4 <HAL_GetTick>
 8005b16:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005b18:	f7fc fdd4 	bl	80026c4 <HAL_GetTick>
 8005b1c:	42a8      	cmp	r0, r5
 8005b1e:	d0fb      	beq.n	8005b18 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b20:	4a27      	ldr	r2, [pc, #156]	@ (8005bc0 <HAL_RCC_OscConfig+0x5d8>)
 8005b22:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005b24:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8005b26:	f36f 03cf 	bfc	r3, #3, #13
 8005b2a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005b2e:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8005b30:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005b32:	f043 0301 	orr.w	r3, r3, #1
 8005b36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b38:	e5fe      	b.n	8005738 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b3a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005b46:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b48:	e576      	b.n	8005638 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b4a:	4d1d      	ldr	r5, [pc, #116]	@ (8005bc0 <HAL_RCC_OscConfig+0x5d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b4c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b50:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	672b      	str	r3, [r5, #112]	@ 0x70
 8005b58:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005b5a:	f023 0304 	bic.w	r3, r3, #4
 8005b5e:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005b60:	f7fc fdb0 	bl	80026c4 <HAL_GetTick>
 8005b64:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b66:	e005      	b.n	8005b74 <HAL_RCC_OscConfig+0x58c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b68:	f7fc fdac 	bl	80026c4 <HAL_GetTick>
 8005b6c:	1b80      	subs	r0, r0, r6
 8005b6e:	42b8      	cmp	r0, r7
 8005b70:	f63f aeba 	bhi.w	80058e8 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b74:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005b76:	0798      	lsls	r0, r3, #30
 8005b78:	d4f6      	bmi.n	8005b68 <HAL_RCC_OscConfig+0x580>
 8005b7a:	e5d9      	b.n	8005730 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b7c:	68eb      	ldr	r3, [r5, #12]
 8005b7e:	6a22      	ldr	r2, [r4, #32]
 8005b80:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005b84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005b88:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	e59b      	b.n	80056c6 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc0 <HAL_RCC_OscConfig+0x5d8>)
 8005b90:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8005b92:	f043 0301 	orr.w	r3, r3, #1
 8005b96:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b98:	e67d      	b.n	8005896 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b9a:	4a09      	ldr	r2, [pc, #36]	@ (8005bc0 <HAL_RCC_OscConfig+0x5d8>)
 8005b9c:	6853      	ldr	r3, [r2, #4]
 8005b9e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005ba2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ba6:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	e58c      	b.n	80056c6 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bac:	f042 0204 	orr.w	r2, r2, #4
 8005bb0:	671a      	str	r2, [r3, #112]	@ 0x70
 8005bb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005bb4:	f042 0201 	orr.w	r2, r2, #1
 8005bb8:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bba:	e66c      	b.n	8005896 <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 8005bbc:	2001      	movs	r0, #1
}
 8005bbe:	4770      	bx	lr
 8005bc0:	58024400 	.word	0x58024400

08005bc4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc4:	4a3f      	ldr	r2, [pc, #252]	@ (8005cc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005bc6:	6913      	ldr	r3, [r2, #16]
 8005bc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bcc:	2b10      	cmp	r3, #16
 8005bce:	d04f      	beq.n	8005c70 <HAL_RCC_GetSysClockFreq+0xac>
 8005bd0:	2b18      	cmp	r3, #24
 8005bd2:	d00a      	beq.n	8005bea <HAL_RCC_GetSysClockFreq+0x26>
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d14d      	bne.n	8005c74 <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bd8:	6813      	ldr	r3, [r2, #0]
 8005bda:	0699      	lsls	r1, r3, #26
 8005bdc:	d54c      	bpl.n	8005c78 <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bde:	6813      	ldr	r3, [r2, #0]
 8005be0:	4839      	ldr	r0, [pc, #228]	@ (8005cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005be2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005be6:	40d8      	lsrs	r0, r3
 8005be8:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bea:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8005bec:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005bee:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005bf0:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8005bf2:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005bf6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005bf8:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8005bfc:	d036      	beq.n	8005c6c <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005bfe:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c02:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c06:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c0a:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c0e:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 8005c12:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c18:	ee06 3a90 	vmov	s13, r3
 8005c1c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8005c20:	d002      	beq.n	8005c28 <HAL_RCC_GetSysClockFreq+0x64>
 8005c22:	2902      	cmp	r1, #2
 8005c24:	d048      	beq.n	8005cb8 <HAL_RCC_GetSysClockFreq+0xf4>
 8005c26:	b349      	cbz	r1, 8005c7c <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c28:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005ccc <HAL_RCC_GetSysClockFreq+0x108>
 8005c2c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005c30:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c36:	ee07 3a10 	vmov	s14, r3
 8005c3a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005c3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005c42:	ee37 7a25 	vadd.f32	s14, s14, s11
 8005c46:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005c4a:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c52:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005c56:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005c58:	ee07 3a90 	vmov	s15, r3
 8005c5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c68:	ee17 0a90 	vmov	r0, s15
}
 8005c6c:	bc30      	pop	{r4, r5}
 8005c6e:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c70:	4817      	ldr	r0, [pc, #92]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c72:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 8005c74:	4817      	ldr	r0, [pc, #92]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c76:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c78:	4813      	ldr	r0, [pc, #76]	@ (8005cc8 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8005c7a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c7c:	6813      	ldr	r3, [r2, #0]
 8005c7e:	069b      	lsls	r3, r3, #26
 8005c80:	d51d      	bpl.n	8005cbe <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c82:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c88:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c8a:	490f      	ldr	r1, [pc, #60]	@ (8005cc8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005c8c:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c94:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c96:	ee06 3a10 	vmov	s12, r3
 8005c9a:	ee05 1a90 	vmov	s11, r1
 8005c9e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005ca2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005ca6:	ee36 6a07 	vadd.f32	s12, s12, s14
 8005caa:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8005cae:	ee76 7a26 	vadd.f32	s15, s12, s13
 8005cb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cb6:	e7ca      	b.n	8005c4e <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cb8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005cd8 <HAL_RCC_GetSysClockFreq+0x114>
 8005cbc:	e7b6      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cbe:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005cdc <HAL_RCC_GetSysClockFreq+0x118>
 8005cc2:	e7b3      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x68>
 8005cc4:	58024400 	.word	0x58024400
 8005cc8:	03d09000 	.word	0x03d09000
 8005ccc:	4a742400 	.word	0x4a742400
 8005cd0:	017d7840 	.word	0x017d7840
 8005cd4:	003d0900 	.word	0x003d0900
 8005cd8:	4bbebc20 	.word	0x4bbebc20
 8005cdc:	4c742400 	.word	0x4c742400

08005ce0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	f000 810e 	beq.w	8005f02 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce6:	4a8d      	ldr	r2, [pc, #564]	@ (8005f1c <HAL_RCC_ClockConfig+0x23c>)
 8005ce8:	6813      	ldr	r3, [r2, #0]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	428b      	cmp	r3, r1
{
 8005cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf8:	d20c      	bcs.n	8005d14 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfa:	6813      	ldr	r3, [r2, #0]
 8005cfc:	f023 030f 	bic.w	r3, r3, #15
 8005d00:	430b      	orrs	r3, r1
 8005d02:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d04:	6813      	ldr	r3, [r2, #0]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	428b      	cmp	r3, r1
 8005d0c:	d002      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005d0e:	2001      	movs	r0, #1
}
 8005d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	0758      	lsls	r0, r3, #29
 8005d18:	d50b      	bpl.n	8005d32 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d1a:	4981      	ldr	r1, [pc, #516]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
 8005d1c:	6920      	ldr	r0, [r4, #16]
 8005d1e:	698a      	ldr	r2, [r1, #24]
 8005d20:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005d24:	4290      	cmp	r0, r2
 8005d26:	d904      	bls.n	8005d32 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d28:	698a      	ldr	r2, [r1, #24]
 8005d2a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005d2e:	4302      	orrs	r2, r0
 8005d30:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d32:	0719      	lsls	r1, r3, #28
 8005d34:	d50b      	bpl.n	8005d4e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d36:	497a      	ldr	r1, [pc, #488]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
 8005d38:	6960      	ldr	r0, [r4, #20]
 8005d3a:	69ca      	ldr	r2, [r1, #28]
 8005d3c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005d40:	4290      	cmp	r0, r2
 8005d42:	d904      	bls.n	8005d4e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d44:	69ca      	ldr	r2, [r1, #28]
 8005d46:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005d4a:	4302      	orrs	r2, r0
 8005d4c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d4e:	06da      	lsls	r2, r3, #27
 8005d50:	d50b      	bpl.n	8005d6a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d52:	4973      	ldr	r1, [pc, #460]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
 8005d54:	69a0      	ldr	r0, [r4, #24]
 8005d56:	69ca      	ldr	r2, [r1, #28]
 8005d58:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005d5c:	4290      	cmp	r0, r2
 8005d5e:	d904      	bls.n	8005d6a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d60:	69ca      	ldr	r2, [r1, #28]
 8005d62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d66:	4302      	orrs	r2, r0
 8005d68:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d6a:	069f      	lsls	r7, r3, #26
 8005d6c:	d50b      	bpl.n	8005d86 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d6e:	496c      	ldr	r1, [pc, #432]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
 8005d70:	69e0      	ldr	r0, [r4, #28]
 8005d72:	6a0a      	ldr	r2, [r1, #32]
 8005d74:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005d78:	4290      	cmp	r0, r2
 8005d7a:	d904      	bls.n	8005d86 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d7c:	6a0a      	ldr	r2, [r1, #32]
 8005d7e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005d82:	4302      	orrs	r2, r0
 8005d84:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d86:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d88:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d8c:	f140 80ab 	bpl.w	8005ee6 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d90:	4e63      	ldr	r6, [pc, #396]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
 8005d92:	68e0      	ldr	r0, [r4, #12]
 8005d94:	69b1      	ldr	r1, [r6, #24]
 8005d96:	f001 010f 	and.w	r1, r1, #15
 8005d9a:	4288      	cmp	r0, r1
 8005d9c:	d904      	bls.n	8005da8 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d9e:	69b1      	ldr	r1, [r6, #24]
 8005da0:	f021 010f 	bic.w	r1, r1, #15
 8005da4:	4301      	orrs	r1, r0
 8005da6:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005da8:	2a00      	cmp	r2, #0
 8005daa:	d030      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005dac:	4a5c      	ldr	r2, [pc, #368]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
 8005dae:	68a1      	ldr	r1, [r4, #8]
 8005db0:	6993      	ldr	r3, [r2, #24]
 8005db2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005db6:	430b      	orrs	r3, r1
 8005db8:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dba:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dbc:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dbe:	2902      	cmp	r1, #2
 8005dc0:	f000 80a1 	beq.w	8005f06 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dc4:	2903      	cmp	r1, #3
 8005dc6:	f000 8098 	beq.w	8005efa <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005dca:	2901      	cmp	r1, #1
 8005dcc:	f000 80a1 	beq.w	8005f12 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dd0:	075f      	lsls	r7, r3, #29
 8005dd2:	d59c      	bpl.n	8005d0e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dd4:	4e52      	ldr	r6, [pc, #328]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd6:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dda:	6933      	ldr	r3, [r6, #16]
 8005ddc:	f023 0307 	bic.w	r3, r3, #7
 8005de0:	430b      	orrs	r3, r1
 8005de2:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8005de4:	f7fc fc6e 	bl	80026c4 <HAL_GetTick>
 8005de8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dea:	e005      	b.n	8005df8 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dec:	f7fc fc6a 	bl	80026c4 <HAL_GetTick>
 8005df0:	1bc0      	subs	r0, r0, r7
 8005df2:	4540      	cmp	r0, r8
 8005df4:	f200 808b 	bhi.w	8005f0e <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df8:	6933      	ldr	r3, [r6, #16]
 8005dfa:	6862      	ldr	r2, [r4, #4]
 8005dfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e00:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005e04:	d1f2      	bne.n	8005dec <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	079e      	lsls	r6, r3, #30
 8005e0a:	d506      	bpl.n	8005e1a <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e0c:	68e0      	ldr	r0, [r4, #12]
 8005e0e:	4944      	ldr	r1, [pc, #272]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
 8005e10:	698a      	ldr	r2, [r1, #24]
 8005e12:	f002 020f 	and.w	r2, r2, #15
 8005e16:	4290      	cmp	r0, r2
 8005e18:	d369      	bcc.n	8005eee <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e1a:	4940      	ldr	r1, [pc, #256]	@ (8005f1c <HAL_RCC_ClockConfig+0x23c>)
 8005e1c:	680a      	ldr	r2, [r1, #0]
 8005e1e:	f002 020f 	and.w	r2, r2, #15
 8005e22:	42aa      	cmp	r2, r5
 8005e24:	d90a      	bls.n	8005e3c <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e26:	680a      	ldr	r2, [r1, #0]
 8005e28:	f022 020f 	bic.w	r2, r2, #15
 8005e2c:	432a      	orrs	r2, r5
 8005e2e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e30:	680a      	ldr	r2, [r1, #0]
 8005e32:	f002 020f 	and.w	r2, r2, #15
 8005e36:	42aa      	cmp	r2, r5
 8005e38:	f47f af69 	bne.w	8005d0e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e3c:	0758      	lsls	r0, r3, #29
 8005e3e:	d50b      	bpl.n	8005e58 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e40:	4937      	ldr	r1, [pc, #220]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
 8005e42:	6920      	ldr	r0, [r4, #16]
 8005e44:	698a      	ldr	r2, [r1, #24]
 8005e46:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005e4a:	4290      	cmp	r0, r2
 8005e4c:	d204      	bcs.n	8005e58 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e4e:	698a      	ldr	r2, [r1, #24]
 8005e50:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005e54:	4302      	orrs	r2, r0
 8005e56:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e58:	0719      	lsls	r1, r3, #28
 8005e5a:	d50b      	bpl.n	8005e74 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e5c:	4930      	ldr	r1, [pc, #192]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
 8005e5e:	6960      	ldr	r0, [r4, #20]
 8005e60:	69ca      	ldr	r2, [r1, #28]
 8005e62:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005e66:	4290      	cmp	r0, r2
 8005e68:	d204      	bcs.n	8005e74 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e6a:	69ca      	ldr	r2, [r1, #28]
 8005e6c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005e70:	4302      	orrs	r2, r0
 8005e72:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e74:	06da      	lsls	r2, r3, #27
 8005e76:	d50b      	bpl.n	8005e90 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e78:	4929      	ldr	r1, [pc, #164]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
 8005e7a:	69a0      	ldr	r0, [r4, #24]
 8005e7c:	69ca      	ldr	r2, [r1, #28]
 8005e7e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005e82:	4290      	cmp	r0, r2
 8005e84:	d204      	bcs.n	8005e90 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e86:	69ca      	ldr	r2, [r1, #28]
 8005e88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e8c:	4302      	orrs	r2, r0
 8005e8e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e90:	069b      	lsls	r3, r3, #26
 8005e92:	d50b      	bpl.n	8005eac <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e94:	4a22      	ldr	r2, [pc, #136]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
 8005e96:	69e1      	ldr	r1, [r4, #28]
 8005e98:	6a13      	ldr	r3, [r2, #32]
 8005e9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e9e:	4299      	cmp	r1, r3
 8005ea0:	d204      	bcs.n	8005eac <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ea2:	6a13      	ldr	r3, [r2, #32]
 8005ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005eac:	f7ff fe8a 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 8005eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f20 <HAL_RCC_ClockConfig+0x240>)
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	481b      	ldr	r0, [pc, #108]	@ (8005f24 <HAL_RCC_ClockConfig+0x244>)
 8005eb6:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005eb8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005eba:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8005ebe:	4d1a      	ldr	r5, [pc, #104]	@ (8005f28 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ec0:	f002 020f 	and.w	r2, r2, #15
 8005ec4:	4c19      	ldr	r4, [pc, #100]	@ (8005f2c <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ec6:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ec8:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005eca:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8005ece:	4818      	ldr	r0, [pc, #96]	@ (8005f30 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ed0:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ed4:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8005ed6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8005ed8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005eda:	40d3      	lsrs	r3, r2
 8005edc:	6023      	str	r3, [r4, #0]
}
 8005ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8005ee2:	f7fc bb8d 	b.w	8002600 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	f47f af60 	bne.w	8005dac <HAL_RCC_ClockConfig+0xcc>
 8005eec:	e795      	b.n	8005e1a <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eee:	698a      	ldr	r2, [r1, #24]
 8005ef0:	f022 020f 	bic.w	r2, r2, #15
 8005ef4:	4302      	orrs	r2, r0
 8005ef6:	618a      	str	r2, [r1, #24]
 8005ef8:	e78f      	b.n	8005e1a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005efa:	019a      	lsls	r2, r3, #6
 8005efc:	f53f af6a 	bmi.w	8005dd4 <HAL_RCC_ClockConfig+0xf4>
 8005f00:	e705      	b.n	8005d0e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005f02:	2001      	movs	r0, #1
}
 8005f04:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f06:	0398      	lsls	r0, r3, #14
 8005f08:	f53f af64 	bmi.w	8005dd4 <HAL_RCC_ClockConfig+0xf4>
 8005f0c:	e6ff      	b.n	8005d0e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8005f0e:	2003      	movs	r0, #3
 8005f10:	e6fe      	b.n	8005d10 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f12:	05db      	lsls	r3, r3, #23
 8005f14:	f53f af5e 	bmi.w	8005dd4 <HAL_RCC_ClockConfig+0xf4>
 8005f18:	e6f9      	b.n	8005d0e <HAL_RCC_ClockConfig+0x2e>
 8005f1a:	bf00      	nop
 8005f1c:	52002000 	.word	0x52002000
 8005f20:	58024400 	.word	0x58024400
 8005f24:	0806fbc4 	.word	0x0806fbc4
 8005f28:	24000010 	.word	0x24000010
 8005f2c:	2400000c 	.word	0x2400000c
 8005f30:	24000018 	.word	0x24000018

08005f34 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f34:	4a18      	ldr	r2, [pc, #96]	@ (8005f98 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f36:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f38:	6913      	ldr	r3, [r2, #16]
 8005f3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d024      	beq.n	8005f8c <HAL_RCC_GetHCLKFreq+0x58>
 8005f42:	2b18      	cmp	r3, #24
 8005f44:	d009      	beq.n	8005f5a <HAL_RCC_GetHCLKFreq+0x26>
 8005f46:	bb1b      	cbnz	r3, 8005f90 <HAL_RCC_GetHCLKFreq+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f48:	6813      	ldr	r3, [r2, #0]
 8005f4a:	069b      	lsls	r3, r3, #26
 8005f4c:	d522      	bpl.n	8005f94 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f4e:	6812      	ldr	r2, [r2, #0]
 8005f50:	4b12      	ldr	r3, [pc, #72]	@ (8005f9c <HAL_RCC_GetHCLKFreq+0x68>)
 8005f52:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005f56:	40d3      	lsrs	r3, r2
 8005f58:	e002      	b.n	8005f60 <HAL_RCC_GetHCLKFreq+0x2c>
 8005f5a:	f7ff fad3 	bl	8005504 <HAL_RCC_GetSysClockFreq.part.0>
 8005f5e:	4603      	mov	r3, r0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f60:	490d      	ldr	r1, [pc, #52]	@ (8005f98 <HAL_RCC_GetHCLKFreq+0x64>)
 8005f62:	480f      	ldr	r0, [pc, #60]	@ (8005fa0 <HAL_RCC_GetHCLKFreq+0x6c>)
 8005f64:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f66:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f68:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8005fa4 <HAL_RCC_GetHCLKFreq+0x70>)
 8005f6e:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f72:	4d0d      	ldr	r5, [pc, #52]	@ (8005fa8 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f74:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f76:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f78:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f7c:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f80:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f82:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8005f86:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f88:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f8c:	4b07      	ldr	r3, [pc, #28]	@ (8005fac <HAL_RCC_GetHCLKFreq+0x78>)
 8005f8e:	e7e7      	b.n	8005f60 <HAL_RCC_GetHCLKFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8005f90:	4b07      	ldr	r3, [pc, #28]	@ (8005fb0 <HAL_RCC_GetHCLKFreq+0x7c>)
 8005f92:	e7e5      	b.n	8005f60 <HAL_RCC_GetHCLKFreq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f94:	4b01      	ldr	r3, [pc, #4]	@ (8005f9c <HAL_RCC_GetHCLKFreq+0x68>)
 8005f96:	e7e3      	b.n	8005f60 <HAL_RCC_GetHCLKFreq+0x2c>
 8005f98:	58024400 	.word	0x58024400
 8005f9c:	03d09000 	.word	0x03d09000
 8005fa0:	0806fbc4 	.word	0x0806fbc4
 8005fa4:	2400000c 	.word	0x2400000c
 8005fa8:	24000010 	.word	0x24000010
 8005fac:	017d7840 	.word	0x017d7840
 8005fb0:	003d0900 	.word	0x003d0900

08005fb4 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006028 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fb8:	6913      	ldr	r3, [r2, #16]
 8005fba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fbe:	2b10      	cmp	r3, #16
 8005fc0:	d02b      	beq.n	800601a <HAL_RCC_GetPCLK1Freq+0x66>
 8005fc2:	2b18      	cmp	r3, #24
 8005fc4:	d009      	beq.n	8005fda <HAL_RCC_GetPCLK1Freq+0x26>
 8005fc6:	bb53      	cbnz	r3, 800601e <HAL_RCC_GetPCLK1Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fc8:	6813      	ldr	r3, [r2, #0]
 8005fca:	069b      	lsls	r3, r3, #26
 8005fcc:	d529      	bpl.n	8006022 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	4b16      	ldr	r3, [pc, #88]	@ (800602c <HAL_RCC_GetPCLK1Freq+0x78>)
 8005fd2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005fd6:	40d3      	lsrs	r3, r2
 8005fd8:	e002      	b.n	8005fe0 <HAL_RCC_GetPCLK1Freq+0x2c>
 8005fda:	f7ff fa93 	bl	8005504 <HAL_RCC_GetSysClockFreq.part.0>
 8005fde:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fe0:	4a11      	ldr	r2, [pc, #68]	@ (8006028 <HAL_RCC_GetPCLK1Freq+0x74>)
 8005fe2:	4913      	ldr	r1, [pc, #76]	@ (8006030 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8005fe4:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8005fe6:	4d13      	ldr	r5, [pc, #76]	@ (8006034 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fe8:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fec:	4c12      	ldr	r4, [pc, #72]	@ (8006038 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fee:	5c08      	ldrb	r0, [r1, r0]
 8005ff0:	f000 001f 	and.w	r0, r0, #31
 8005ff4:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ff6:	6990      	ldr	r0, [r2, #24]
 8005ff8:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8005ffc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ffe:	5c08      	ldrb	r0, [r1, r0]
 8006000:	f000 001f 	and.w	r0, r0, #31
 8006004:	40c3      	lsrs	r3, r0
 8006006:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006008:	69d2      	ldr	r2, [r2, #28]
 800600a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800600e:	5c88      	ldrb	r0, [r1, r2]
 8006010:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006014:	fa23 f000 	lsr.w	r0, r3, r0
 8006018:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800601a:	4b08      	ldr	r3, [pc, #32]	@ (800603c <HAL_RCC_GetPCLK1Freq+0x88>)
 800601c:	e7e0      	b.n	8005fe0 <HAL_RCC_GetPCLK1Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 800601e:	4b08      	ldr	r3, [pc, #32]	@ (8006040 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8006020:	e7de      	b.n	8005fe0 <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006022:	4b02      	ldr	r3, [pc, #8]	@ (800602c <HAL_RCC_GetPCLK1Freq+0x78>)
 8006024:	e7dc      	b.n	8005fe0 <HAL_RCC_GetPCLK1Freq+0x2c>
 8006026:	bf00      	nop
 8006028:	58024400 	.word	0x58024400
 800602c:	03d09000 	.word	0x03d09000
 8006030:	0806fbc4 	.word	0x0806fbc4
 8006034:	24000010 	.word	0x24000010
 8006038:	2400000c 	.word	0x2400000c
 800603c:	017d7840 	.word	0x017d7840
 8006040:	003d0900 	.word	0x003d0900

08006044 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006044:	4a1c      	ldr	r2, [pc, #112]	@ (80060b8 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006046:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006048:	6913      	ldr	r3, [r2, #16]
 800604a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800604e:	2b10      	cmp	r3, #16
 8006050:	d02b      	beq.n	80060aa <HAL_RCC_GetPCLK2Freq+0x66>
 8006052:	2b18      	cmp	r3, #24
 8006054:	d009      	beq.n	800606a <HAL_RCC_GetPCLK2Freq+0x26>
 8006056:	bb53      	cbnz	r3, 80060ae <HAL_RCC_GetPCLK2Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006058:	6813      	ldr	r3, [r2, #0]
 800605a:	069b      	lsls	r3, r3, #26
 800605c:	d529      	bpl.n	80060b2 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	4b16      	ldr	r3, [pc, #88]	@ (80060bc <HAL_RCC_GetPCLK2Freq+0x78>)
 8006062:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006066:	40d3      	lsrs	r3, r2
 8006068:	e002      	b.n	8006070 <HAL_RCC_GetPCLK2Freq+0x2c>
 800606a:	f7ff fa4b 	bl	8005504 <HAL_RCC_GetSysClockFreq.part.0>
 800606e:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006070:	4a11      	ldr	r2, [pc, #68]	@ (80060b8 <HAL_RCC_GetPCLK2Freq+0x74>)
 8006072:	4913      	ldr	r1, [pc, #76]	@ (80060c0 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8006074:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8006076:	4d13      	ldr	r5, [pc, #76]	@ (80060c4 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006078:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800607c:	4c12      	ldr	r4, [pc, #72]	@ (80060c8 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800607e:	5c08      	ldrb	r0, [r1, r0]
 8006080:	f000 001f 	and.w	r0, r0, #31
 8006084:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006086:	6990      	ldr	r0, [r2, #24]
 8006088:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800608c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800608e:	5c08      	ldrb	r0, [r1, r0]
 8006090:	f000 001f 	and.w	r0, r0, #31
 8006094:	40c3      	lsrs	r3, r0
 8006096:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006098:	69d2      	ldr	r2, [r2, #28]
 800609a:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800609e:	5c88      	ldrb	r0, [r1, r2]
 80060a0:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80060a4:	fa23 f000 	lsr.w	r0, r3, r0
 80060a8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060aa:	4b08      	ldr	r3, [pc, #32]	@ (80060cc <HAL_RCC_GetPCLK2Freq+0x88>)
 80060ac:	e7e0      	b.n	8006070 <HAL_RCC_GetPCLK2Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 80060ae:	4b08      	ldr	r3, [pc, #32]	@ (80060d0 <HAL_RCC_GetPCLK2Freq+0x8c>)
 80060b0:	e7de      	b.n	8006070 <HAL_RCC_GetPCLK2Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80060b2:	4b02      	ldr	r3, [pc, #8]	@ (80060bc <HAL_RCC_GetPCLK2Freq+0x78>)
 80060b4:	e7dc      	b.n	8006070 <HAL_RCC_GetPCLK2Freq+0x2c>
 80060b6:	bf00      	nop
 80060b8:	58024400 	.word	0x58024400
 80060bc:	03d09000 	.word	0x03d09000
 80060c0:	0806fbc4 	.word	0x0806fbc4
 80060c4:	24000010 	.word	0x24000010
 80060c8:	2400000c 	.word	0x2400000c
 80060cc:	017d7840 	.word	0x017d7840
 80060d0:	003d0900 	.word	0x003d0900

080060d4 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060d6:	4c36      	ldr	r4, [pc, #216]	@ (80061b0 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80060d8:	4606      	mov	r6, r0
 80060da:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060e2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e4:	f7fc faee 	bl	80026c4 <HAL_GetTick>
 80060e8:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060ea:	e004      	b.n	80060f6 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060ec:	f7fc faea 	bl	80026c4 <HAL_GetTick>
 80060f0:	1b40      	subs	r0, r0, r5
 80060f2:	2802      	cmp	r0, #2
 80060f4:	d856      	bhi.n	80061a4 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	011a      	lsls	r2, r3, #4
 80060fa:	d4f7      	bmi.n	80060ec <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80060fc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80060fe:	6832      	ldr	r2, [r6, #0]
 8006100:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006104:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006108:	62a3      	str	r3, [r4, #40]	@ 0x28
 800610a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800610e:	3b01      	subs	r3, #1
 8006110:	3a01      	subs	r2, #1
 8006112:	025b      	lsls	r3, r3, #9
 8006114:	0412      	lsls	r2, r2, #16
 8006116:	b29b      	uxth	r3, r3
 8006118:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800611c:	4313      	orrs	r3, r2
 800611e:	6872      	ldr	r2, [r6, #4]
 8006120:	3a01      	subs	r2, #1
 8006122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006126:	4313      	orrs	r3, r2
 8006128:	6932      	ldr	r2, [r6, #16]
 800612a:	3a01      	subs	r2, #1
 800612c:	0612      	lsls	r2, r2, #24
 800612e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006132:	4313      	orrs	r3, r2
 8006134:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006136:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006138:	6972      	ldr	r2, [r6, #20]
 800613a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800613e:	4313      	orrs	r3, r2
 8006140:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006142:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006144:	69b2      	ldr	r2, [r6, #24]
 8006146:	f023 0320 	bic.w	r3, r3, #32
 800614a:	4313      	orrs	r3, r2
 800614c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800614e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006150:	f023 0310 	bic.w	r3, r3, #16
 8006154:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006156:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006158:	69f2      	ldr	r2, [r6, #28]
 800615a:	f36f 03cf 	bfc	r3, #3, #13
 800615e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006162:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006164:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006166:	f043 0310 	orr.w	r3, r3, #16
 800616a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800616c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800616e:	b1df      	cbz	r7, 80061a8 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006170:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006172:	bf0c      	ite	eq
 8006174:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006178:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800617c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800617e:	4c0c      	ldr	r4, [pc, #48]	@ (80061b0 <RCCEx_PLL2_Config.part.0+0xdc>)
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006186:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006188:	f7fc fa9c 	bl	80026c4 <HAL_GetTick>
 800618c:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800618e:	e004      	b.n	800619a <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006190:	f7fc fa98 	bl	80026c4 <HAL_GetTick>
 8006194:	1b40      	subs	r0, r0, r5
 8006196:	2802      	cmp	r0, #2
 8006198:	d804      	bhi.n	80061a4 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	d5f7      	bpl.n	8006190 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 80061a0:	2000      	movs	r0, #0
}
 80061a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80061a4:	2003      	movs	r0, #3
}
 80061a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80061ae:	e7e6      	b.n	800617e <RCCEx_PLL2_Config.part.0+0xaa>
 80061b0:	58024400 	.word	0x58024400

080061b4 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80061b6:	4c36      	ldr	r4, [pc, #216]	@ (8006290 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80061b8:	4606      	mov	r6, r0
 80061ba:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061c2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c4:	f7fc fa7e 	bl	80026c4 <HAL_GetTick>
 80061c8:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061ca:	e004      	b.n	80061d6 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061cc:	f7fc fa7a 	bl	80026c4 <HAL_GetTick>
 80061d0:	1b40      	subs	r0, r0, r5
 80061d2:	2802      	cmp	r0, #2
 80061d4:	d856      	bhi.n	8006284 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	009a      	lsls	r2, r3, #2
 80061da:	d4f7      	bmi.n	80061cc <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80061dc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80061de:	6832      	ldr	r2, [r6, #0]
 80061e0:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80061e4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80061e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80061ea:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	3a01      	subs	r2, #1
 80061f2:	025b      	lsls	r3, r3, #9
 80061f4:	0412      	lsls	r2, r2, #16
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80061fc:	4313      	orrs	r3, r2
 80061fe:	6872      	ldr	r2, [r6, #4]
 8006200:	3a01      	subs	r2, #1
 8006202:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006206:	4313      	orrs	r3, r2
 8006208:	6932      	ldr	r2, [r6, #16]
 800620a:	3a01      	subs	r2, #1
 800620c:	0612      	lsls	r2, r2, #24
 800620e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006212:	4313      	orrs	r3, r2
 8006214:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006216:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006218:	6972      	ldr	r2, [r6, #20]
 800621a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800621e:	4313      	orrs	r3, r2
 8006220:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006222:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006224:	69b2      	ldr	r2, [r6, #24]
 8006226:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800622a:	4313      	orrs	r3, r2
 800622c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800622e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006234:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006236:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006238:	69f2      	ldr	r2, [r6, #28]
 800623a:	f36f 03cf 	bfc	r3, #3, #13
 800623e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006242:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006244:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800624a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800624c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800624e:	b1df      	cbz	r7, 8006288 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006250:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006252:	bf0c      	ite	eq
 8006254:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006258:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800625c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800625e:	4c0c      	ldr	r4, [pc, #48]	@ (8006290 <RCCEx_PLL3_Config.part.0+0xdc>)
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006266:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006268:	f7fc fa2c 	bl	80026c4 <HAL_GetTick>
 800626c:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800626e:	e004      	b.n	800627a <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006270:	f7fc fa28 	bl	80026c4 <HAL_GetTick>
 8006274:	1b40      	subs	r0, r0, r5
 8006276:	2802      	cmp	r0, #2
 8006278:	d804      	bhi.n	8006284 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	d5f7      	bpl.n	8006270 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8006280:	2000      	movs	r0, #0
}
 8006282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006284:	2003      	movs	r0, #3
}
 8006286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006288:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800628c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800628e:	e7e6      	b.n	800625e <RCCEx_PLL3_Config.part.0+0xaa>
 8006290:	58024400 	.word	0x58024400

08006294 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006298:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800629c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800629e:	011d      	lsls	r5, r3, #4
 80062a0:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 80062a4:	d524      	bpl.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80062a6:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80062a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80062ac:	f000 85df 	beq.w	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xbda>
 80062b0:	f200 86a8 	bhi.w	8007004 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80062b4:	2900      	cmp	r1, #0
 80062b6:	f000 85f6 	beq.w	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xc12>
 80062ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80062be:	f040 86a5 	bne.w	800700c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062c2:	49a9      	ldr	r1, [pc, #676]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062c4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80062c6:	f001 0103 	and.w	r1, r1, #3
 80062ca:	2903      	cmp	r1, #3
 80062cc:	f000 869e 	beq.w	800700c <HAL_RCCEx_PeriphCLKConfig+0xd78>
 80062d0:	2102      	movs	r1, #2
 80062d2:	3008      	adds	r0, #8
 80062d4:	f7ff fefe 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 80062d8:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062da:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80062de:	b93e      	cbnz	r6, 80062f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80062e0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80062e2:	4da1      	ldr	r5, [pc, #644]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062e4:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80062e6:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80062e8:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 80062ec:	4301      	orrs	r1, r0
 80062ee:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062f0:	05d8      	lsls	r0, r3, #23
 80062f2:	d50a      	bpl.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 80062f4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80062f6:	2904      	cmp	r1, #4
 80062f8:	d806      	bhi.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062fa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80062fe:	03ff      	.short	0x03ff
 8006300:	0582056d 	.word	0x0582056d
 8006304:	04040404 	.word	0x04040404
      status = ret;
 8006308:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800630a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800630c:	0599      	lsls	r1, r3, #22
 800630e:	d524      	bpl.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8006310:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8006312:	2980      	cmp	r1, #128	@ 0x80
 8006314:	f000 854b 	beq.w	8006dae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006318:	f200 8687 	bhi.w	800702a <HAL_RCCEx_PeriphCLKConfig+0xd96>
 800631c:	2900      	cmp	r1, #0
 800631e:	f000 85bb 	beq.w	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8006322:	2940      	cmp	r1, #64	@ 0x40
 8006324:	f040 8688 	bne.w	8007038 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006328:	498f      	ldr	r1, [pc, #572]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800632a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800632c:	f001 0103 	and.w	r1, r1, #3
 8006330:	2903      	cmp	r1, #3
 8006332:	f000 8681 	beq.w	8007038 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8006336:	2100      	movs	r1, #0
 8006338:	f104 0008 	add.w	r0, r4, #8
 800633c:	f7ff feca 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 8006340:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006342:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006346:	2d00      	cmp	r5, #0
 8006348:	f040 8543 	bne.w	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800634c:	4f86      	ldr	r7, [pc, #536]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800634e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8006350:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006352:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8006356:	4301      	orrs	r1, r0
 8006358:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800635a:	055f      	lsls	r7, r3, #21
 800635c:	d528      	bpl.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai4AClockSelection)
 800635e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8006362:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8006366:	f000 855c 	beq.w	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800636a:	f200 8652 	bhi.w	8007012 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 800636e:	2900      	cmp	r1, #0
 8006370:	f000 858b 	beq.w	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006374:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8006378:	f040 8653 	bne.w	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800637c:	497a      	ldr	r1, [pc, #488]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800637e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006380:	f001 0103 	and.w	r1, r1, #3
 8006384:	2903      	cmp	r1, #3
 8006386:	f000 864c 	beq.w	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800638a:	2100      	movs	r1, #0
 800638c:	f104 0008 	add.w	r0, r4, #8
 8006390:	f7ff fea0 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 8006394:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006396:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800639a:	2d00      	cmp	r5, #0
 800639c:	f040 8553 	bne.w	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063a0:	4f71      	ldr	r7, [pc, #452]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063a2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 80063a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80063a8:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 80063ac:	4301      	orrs	r1, r0
 80063ae:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063b0:	0518      	lsls	r0, r3, #20
 80063b2:	d528      	bpl.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->Sai4BClockSelection)
 80063b4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80063b8:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 80063bc:	f000 8546 	beq.w	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
 80063c0:	f200 8614 	bhi.w	8006fec <HAL_RCCEx_PeriphCLKConfig+0xd58>
 80063c4:	2900      	cmp	r1, #0
 80063c6:	f000 84d6 	beq.w	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 80063ca:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80063ce:	f040 8615 	bne.w	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd68>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063d2:	4965      	ldr	r1, [pc, #404]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063d4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80063d6:	f001 0103 	and.w	r1, r1, #3
 80063da:	2903      	cmp	r1, #3
 80063dc:	f000 860e 	beq.w	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd68>
 80063e0:	2100      	movs	r1, #0
 80063e2:	f104 0008 	add.w	r0, r4, #8
 80063e6:	f7ff fe75 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 80063ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80063ec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80063f0:	2d00      	cmp	r5, #0
 80063f2:	f040 84c8 	bne.w	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063f6:	4f5c      	ldr	r7, [pc, #368]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063f8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80063fc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80063fe:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8006402:	4301      	orrs	r1, r0
 8006404:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006406:	0199      	lsls	r1, r3, #6
 8006408:	d518      	bpl.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    switch (PeriphClkInit->QspiClockSelection)
 800640a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800640c:	2920      	cmp	r1, #32
 800640e:	f000 8434 	beq.w	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 8006412:	f200 8615 	bhi.w	8007040 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8006416:	b139      	cbz	r1, 8006428 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8006418:	2910      	cmp	r1, #16
 800641a:	f040 8614 	bne.w	8007046 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800641e:	4852      	ldr	r0, [pc, #328]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006420:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006422:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006426:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006428:	2d00      	cmp	r5, #0
 800642a:	f040 83bf 	bne.w	8006bac <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800642e:	4f4e      	ldr	r7, [pc, #312]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006430:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8006432:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006434:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8006438:	4301      	orrs	r1, r0
 800643a:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800643c:	04df      	lsls	r7, r3, #19
 800643e:	d526      	bpl.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8006440:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8006442:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006446:	f000 84a1 	beq.w	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 800644a:	f200 85c3 	bhi.w	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 800644e:	2900      	cmp	r1, #0
 8006450:	f000 8486 	beq.w	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006454:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006458:	f040 85c4 	bne.w	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800645c:	4942      	ldr	r1, [pc, #264]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800645e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006460:	f001 0103 	and.w	r1, r1, #3
 8006464:	2903      	cmp	r1, #3
 8006466:	f000 85bd 	beq.w	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 800646a:	2100      	movs	r1, #0
 800646c:	f104 0008 	add.w	r0, r4, #8
 8006470:	f7ff fe30 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 8006474:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006476:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800647a:	2d00      	cmp	r5, #0
 800647c:	f040 8478 	bne.w	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006480:	4f39      	ldr	r7, [pc, #228]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006482:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8006484:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006486:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800648a:	4301      	orrs	r1, r0
 800648c:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800648e:	0498      	lsls	r0, r3, #18
 8006490:	d524      	bpl.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Spi45ClockSelection)
 8006492:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8006494:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8006498:	f000 8415 	beq.w	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800649c:	f200 8556 	bhi.w	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 80064a0:	b191      	cbz	r1, 80064c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80064a2:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80064a6:	f040 855b 	bne.w	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064aa:	492f      	ldr	r1, [pc, #188]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064ac:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80064ae:	f001 0103 	and.w	r1, r1, #3
 80064b2:	2903      	cmp	r1, #3
 80064b4:	f000 8554 	beq.w	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80064b8:	2101      	movs	r1, #1
 80064ba:	f104 0008 	add.w	r0, r4, #8
 80064be:	f7ff fe09 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 80064c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80064c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80064c8:	2d00      	cmp	r5, #0
 80064ca:	f040 838f 	bne.w	8006bec <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80064ce:	4f26      	ldr	r7, [pc, #152]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064d0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80064d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80064d4:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80064d8:	4301      	orrs	r1, r0
 80064da:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80064dc:	0459      	lsls	r1, r3, #17
 80064de:	d526      	bpl.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 80064e0:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80064e4:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80064e8:	f000 8426 	beq.w	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80064ec:	f200 854a 	bhi.w	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 80064f0:	b191      	cbz	r1, 8006518 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80064f2:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80064f6:	f040 854f 	bne.w	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd04>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064fa:	491b      	ldr	r1, [pc, #108]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064fc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80064fe:	f001 0103 	and.w	r1, r1, #3
 8006502:	2903      	cmp	r1, #3
 8006504:	f000 8548 	beq.w	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8006508:	2101      	movs	r1, #1
 800650a:	f104 0008 	add.w	r0, r4, #8
 800650e:	f7ff fde1 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 8006512:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006514:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006518:	2d00      	cmp	r5, #0
 800651a:	f040 835b 	bne.w	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800651e:	4f12      	ldr	r7, [pc, #72]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006520:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8006524:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006526:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800652a:	4301      	orrs	r1, r0
 800652c:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800652e:	041f      	lsls	r7, r3, #16
 8006530:	d50d      	bpl.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch (PeriphClkInit->FdcanClockSelection)
 8006532:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8006534:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8006538:	f000 8260 	beq.w	80069fc <HAL_RCCEx_PeriphCLKConfig+0x768>
 800653c:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006540:	f000 8591 	beq.w	8007066 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006544:	2900      	cmp	r1, #0
 8006546:	f000 825e 	beq.w	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 800654a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800654c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800654e:	01d8      	lsls	r0, r3, #7
 8006550:	d515      	bpl.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    switch (PeriphClkInit->FmcClockSelection)
 8006552:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006554:	2903      	cmp	r1, #3
 8006556:	f200 85b4 	bhi.w	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800655a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800655e:	000c      	.short	0x000c
 8006560:	03a10007 	.word	0x03a10007
 8006564:	000c      	.short	0x000c
 8006566:	bf00      	nop
 8006568:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656c:	4836      	ldr	r0, [pc, #216]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 800656e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006570:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006574:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006576:	2d00      	cmp	r5, #0
 8006578:	f000 831a 	beq.w	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      status = ret;
 800657c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800657e:	0259      	lsls	r1, r3, #9
 8006580:	f100 827a 	bmi.w	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006584:	07df      	lsls	r7, r3, #31
 8006586:	d52f      	bpl.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (PeriphClkInit->Usart16ClockSelection)
 8006588:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800658a:	2928      	cmp	r1, #40	@ 0x28
 800658c:	d82a      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800658e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006592:	0257      	.short	0x0257
 8006594:	00290029 	.word	0x00290029
 8006598:	00290029 	.word	0x00290029
 800659c:	00290029 	.word	0x00290029
 80065a0:	02480029 	.word	0x02480029
 80065a4:	00290029 	.word	0x00290029
 80065a8:	00290029 	.word	0x00290029
 80065ac:	00290029 	.word	0x00290029
 80065b0:	04b90029 	.word	0x04b90029
 80065b4:	00290029 	.word	0x00290029
 80065b8:	00290029 	.word	0x00290029
 80065bc:	00290029 	.word	0x00290029
 80065c0:	02570029 	.word	0x02570029
 80065c4:	00290029 	.word	0x00290029
 80065c8:	00290029 	.word	0x00290029
 80065cc:	00290029 	.word	0x00290029
 80065d0:	02570029 	.word	0x02570029
 80065d4:	00290029 	.word	0x00290029
 80065d8:	00290029 	.word	0x00290029
 80065dc:	00290029 	.word	0x00290029
 80065e0:	02570029 	.word	0x02570029
      status = ret;
 80065e4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80065e6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80065e8:	0798      	lsls	r0, r3, #30
 80065ea:	d51e      	bpl.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x396>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80065ec:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80065ee:	2905      	cmp	r1, #5
 80065f0:	f200 8550 	bhi.w	8007094 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80065f4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80065f8:	00060015 	.word	0x00060015
 80065fc:	00150471 	.word	0x00150471
 8006600:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006604:	4910      	ldr	r1, [pc, #64]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8006606:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006608:	f001 0103 	and.w	r1, r1, #3
 800660c:	2903      	cmp	r1, #3
 800660e:	f000 8541 	beq.w	8007094 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8006612:	2101      	movs	r1, #1
 8006614:	f104 0008 	add.w	r0, r4, #8
 8006618:	f7ff fd5c 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 800661c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800661e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006622:	2d00      	cmp	r5, #0
 8006624:	f000 82cc 	beq.w	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      status = ret;
 8006628:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800662a:	0759      	lsls	r1, r3, #29
 800662c:	d521      	bpl.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800662e:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8006632:	2905      	cmp	r1, #5
 8006634:	f200 852a 	bhi.w	800708c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8006638:	e8df f011 	tbh	[pc, r1, lsl #1]
 800663c:	00080017 	.word	0x00080017
 8006640:	0017043c 	.word	0x0017043c
 8006644:	00170017 	.word	0x00170017
 8006648:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800664c:	49ae      	ldr	r1, [pc, #696]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800664e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006650:	f001 0103 	and.w	r1, r1, #3
 8006654:	2903      	cmp	r1, #3
 8006656:	f000 8519 	beq.w	800708c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 800665a:	2101      	movs	r1, #1
 800665c:	f104 0008 	add.w	r0, r4, #8
 8006660:	f7ff fd38 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 8006664:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006666:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800666a:	2d00      	cmp	r5, #0
 800666c:	f000 82c2 	beq.w	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 8006670:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006672:	069f      	lsls	r7, r3, #26
 8006674:	d526      	bpl.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006676:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800667a:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800667e:	f000 82c6 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8006682:	f200 8455 	bhi.w	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006686:	b191      	cbz	r1, 80066ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006688:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800668c:	f040 845a 	bne.w	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006690:	499d      	ldr	r1, [pc, #628]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8006692:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006694:	f001 0103 	and.w	r1, r1, #3
 8006698:	2903      	cmp	r1, #3
 800669a:	f000 8453 	beq.w	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 800669e:	2100      	movs	r1, #0
 80066a0:	f104 0008 	add.w	r0, r4, #8
 80066a4:	f7ff fd16 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 80066a8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066aa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80066ae:	2d00      	cmp	r5, #0
 80066b0:	f040 828e 	bne.w	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066b4:	4f94      	ldr	r7, [pc, #592]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80066b6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80066ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066bc:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80066c0:	4301      	orrs	r1, r0
 80066c2:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066c4:	0658      	lsls	r0, r3, #25
 80066c6:	d526      	bpl.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066c8:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80066cc:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80066d0:	f000 82af 	beq.w	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 80066d4:	f200 8464 	bhi.w	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80066d8:	b191      	cbz	r1, 8006700 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 80066da:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80066de:	f040 8469 	bne.w	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066e2:	4989      	ldr	r1, [pc, #548]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80066e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80066e6:	f001 0103 	and.w	r1, r1, #3
 80066ea:	2903      	cmp	r1, #3
 80066ec:	f000 8462 	beq.w	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80066f0:	2100      	movs	r1, #0
 80066f2:	f104 0008 	add.w	r0, r4, #8
 80066f6:	f7ff fced 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 80066fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006700:	2d00      	cmp	r5, #0
 8006702:	f040 8269 	bne.w	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006706:	4f80      	ldr	r7, [pc, #512]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8006708:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800670c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800670e:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8006712:	4301      	orrs	r1, r0
 8006714:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006716:	0619      	lsls	r1, r3, #24
 8006718:	d526      	bpl.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800671a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800671e:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8006722:	f000 8298 	beq.w	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006726:	f200 841f 	bhi.w	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 800672a:	b191      	cbz	r1, 8006752 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800672c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006730:	f040 8424 	bne.w	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xce8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006734:	4974      	ldr	r1, [pc, #464]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8006736:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006738:	f001 0103 	and.w	r1, r1, #3
 800673c:	2903      	cmp	r1, #3
 800673e:	f000 841d 	beq.w	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006742:	2100      	movs	r1, #0
 8006744:	f104 0008 	add.w	r0, r4, #8
 8006748:	f7ff fcc4 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 800674c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800674e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006752:	2d00      	cmp	r5, #0
 8006754:	f040 8244 	bne.w	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006758:	4f6b      	ldr	r7, [pc, #428]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800675a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 800675e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006760:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8006764:	4301      	orrs	r1, r0
 8006766:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006768:	071f      	lsls	r7, r3, #28
 800676a:	d50b      	bpl.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800676c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8006770:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8006774:	f000 81d4 	beq.w	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006778:	4f63      	ldr	r7, [pc, #396]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800677a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800677c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8006780:	4301      	orrs	r1, r0
 8006782:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006784:	06d8      	lsls	r0, r3, #27
 8006786:	d50b      	bpl.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006788:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800678c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8006790:	f000 81db 	beq.w	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006794:	4f5c      	ldr	r7, [pc, #368]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8006796:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006798:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 800679c:	4301      	orrs	r1, r0
 800679e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067a0:	0319      	lsls	r1, r3, #12
 80067a2:	d524      	bpl.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 80067a4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 80067a8:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80067ac:	f000 82b1 	beq.w	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80067b0:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80067b4:	d010      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80067b6:	2900      	cmp	r1, #0
 80067b8:	f040 8130 	bne.w	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067bc:	4852      	ldr	r0, [pc, #328]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80067be:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80067c0:	f000 0003 	and.w	r0, r0, #3
 80067c4:	2803      	cmp	r0, #3
 80067c6:	f000 8129 	beq.w	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x788>
 80067ca:	f104 0008 	add.w	r0, r4, #8
 80067ce:	f7ff fc81 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 80067d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80067d8:	2d00      	cmp	r5, #0
 80067da:	f040 81ff 	bne.w	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067de:	4f4a      	ldr	r7, [pc, #296]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80067e0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 80067e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80067e6:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80067ea:	4301      	orrs	r1, r0
 80067ec:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067ee:	035f      	lsls	r7, r3, #13
 80067f0:	d50f      	bpl.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 80067f2:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80067f6:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80067fa:	f000 8277 	beq.w	8006cec <HAL_RCCEx_PeriphCLKConfig+0xa58>
 80067fe:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8006802:	f000 812d 	beq.w	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8006806:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800680a:	f000 8124 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 800680e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8006810:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006812:	03d8      	lsls	r0, r3, #15
 8006814:	d520      	bpl.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 8006816:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8006818:	2900      	cmp	r1, #0
 800681a:	f000 81aa 	beq.w	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800681e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8006822:	f040 80e8 	bne.w	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006826:	4938      	ldr	r1, [pc, #224]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8006828:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800682a:	f001 0103 	and.w	r1, r1, #3
 800682e:	2903      	cmp	r1, #3
 8006830:	f000 80e1 	beq.w	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8006834:	2102      	movs	r1, #2
 8006836:	f104 0008 	add.w	r0, r4, #8
 800683a:	f7ff fc4b 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 800683e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006840:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006844:	2d00      	cmp	r5, #0
 8006846:	f040 819c 	bne.w	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800684a:	4f2f      	ldr	r7, [pc, #188]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800684c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800684e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006850:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8006854:	4301      	orrs	r1, r0
 8006856:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006858:	0099      	lsls	r1, r3, #2
 800685a:	d50e      	bpl.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800685c:	492a      	ldr	r1, [pc, #168]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800685e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006860:	f001 0103 	and.w	r1, r1, #3
 8006864:	2903      	cmp	r1, #3
 8006866:	d007      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8006868:	2102      	movs	r1, #2
 800686a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800686e:	f7ff fca1 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006872:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006876:	b100      	cbz	r0, 800687a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 8006878:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800687a:	039f      	lsls	r7, r3, #14
 800687c:	f100 80ab 	bmi.w	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x742>
      status = HAL_ERROR;
 8006880:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006882:	02d8      	lsls	r0, r3, #11
 8006884:	d506      	bpl.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x600>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006886:	4820      	ldr	r0, [pc, #128]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8006888:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 800688a:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800688c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006890:	4331      	orrs	r1, r6
 8006892:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006894:	00d9      	lsls	r1, r3, #3
 8006896:	d507      	bpl.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006898:	481b      	ldr	r0, [pc, #108]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800689a:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 800689e:	6901      	ldr	r1, [r0, #16]
 80068a0:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80068a4:	4331      	orrs	r1, r6
 80068a6:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068a8:	029f      	lsls	r7, r3, #10
 80068aa:	d506      	bpl.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068ac:	4816      	ldr	r0, [pc, #88]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80068ae:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 80068b0:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80068b2:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80068b6:	4331      	orrs	r1, r6
 80068b8:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068ba:	005e      	lsls	r6, r3, #1
 80068bc:	d509      	bpl.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068be:	4912      	ldr	r1, [pc, #72]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80068c0:	6908      	ldr	r0, [r1, #16]
 80068c2:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80068c6:	6108      	str	r0, [r1, #16]
 80068c8:	6908      	ldr	r0, [r1, #16]
 80068ca:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 80068ce:	4330      	orrs	r0, r6
 80068d0:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da06      	bge.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80068d6:	480c      	ldr	r0, [pc, #48]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80068d8:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80068da:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80068dc:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80068e0:	4331      	orrs	r1, r6
 80068e2:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068e4:	0218      	lsls	r0, r3, #8
 80068e6:	d507      	bpl.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068e8:	4907      	ldr	r1, [pc, #28]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80068ea:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 80068ee:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80068f0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80068f4:	4303      	orrs	r3, r0
 80068f6:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80068f8:	07d1      	lsls	r1, r2, #31
 80068fa:	d511      	bpl.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068fc:	4b02      	ldr	r3, [pc, #8]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80068fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	2b03      	cmp	r3, #3
 8006906:	e001      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006908:	58024400 	.word	0x58024400
 800690c:	f000 835c 	beq.w	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8006910:	2100      	movs	r1, #0
 8006912:	f104 0008 	add.w	r0, r4, #8
 8006916:	f7ff fbdd 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800691a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800691c:	b100      	cbz	r0, 8006920 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800691e:	4605      	mov	r5, r0
 8006920:	0793      	lsls	r3, r2, #30
 8006922:	d50e      	bpl.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006924:	4baf      	ldr	r3, [pc, #700]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	f003 0303 	and.w	r3, r3, #3
 800692c:	2b03      	cmp	r3, #3
 800692e:	f000 834d 	beq.w	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8006932:	2101      	movs	r1, #1
 8006934:	f104 0008 	add.w	r0, r4, #8
 8006938:	f7ff fbcc 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800693c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800693e:	b100      	cbz	r0, 8006942 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006940:	4605      	mov	r5, r0
 8006942:	0757      	lsls	r7, r2, #29
 8006944:	d50e      	bpl.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006946:	4ba7      	ldr	r3, [pc, #668]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694a:	f003 0303 	and.w	r3, r3, #3
 800694e:	2b03      	cmp	r3, #3
 8006950:	f000 833e 	beq.w	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8006954:	2102      	movs	r1, #2
 8006956:	f104 0008 	add.w	r0, r4, #8
 800695a:	f7ff fbbb 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800695e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8006960:	b100      	cbz	r0, 8006964 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006962:	4605      	mov	r5, r0
 8006964:	0716      	lsls	r6, r2, #28
 8006966:	d50e      	bpl.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006968:	4b9e      	ldr	r3, [pc, #632]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696c:	f003 0303 	and.w	r3, r3, #3
 8006970:	2b03      	cmp	r3, #3
 8006972:	f000 8323 	beq.w	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xd28>
 8006976:	2100      	movs	r1, #0
 8006978:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800697c:	f7ff fc1a 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006980:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8006982:	b100      	cbz	r0, 8006986 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006984:	4605      	mov	r5, r0
 8006986:	06d0      	lsls	r0, r2, #27
 8006988:	d50f      	bpl.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x716>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800698a:	4b96      	ldr	r3, [pc, #600]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800698c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	2b03      	cmp	r3, #3
 8006994:	f000 8314 	beq.w	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 8006998:	2101      	movs	r1, #1
 800699a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800699e:	f7ff fc09 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f040 8359 	bne.w	800705a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069a8:	6862      	ldr	r2, [r4, #4]
 80069aa:	0693      	lsls	r3, r2, #26
 80069ac:	d50e      	bpl.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x738>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069ae:	4b8d      	ldr	r3, [pc, #564]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80069b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	f000 82b7 	beq.w	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80069bc:	2102      	movs	r1, #2
 80069be:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80069c2:	f7ff fbf7 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f040 82af 	bne.w	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc96>
  if (status == HAL_OK)
 80069cc:	1e28      	subs	r0, r5, #0
 80069ce:	bf18      	it	ne
 80069d0:	2001      	movne	r0, #1
}
 80069d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 80069d6:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80069da:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80069de:	f000 80d2 	beq.w	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80069e2:	f240 8110 	bls.w	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80069e6:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 80069ea:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80069ee:	f000 80cf 	beq.w	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80069f2:	2501      	movs	r5, #1
 80069f4:	e745      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 80069f6:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80069f8:	4635      	mov	r5, r6
 80069fa:	e72d      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069fc:	4879      	ldr	r0, [pc, #484]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80069fe:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006a00:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006a04:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006a06:	2d00      	cmp	r5, #0
 8006a08:	f040 80ce 	bne.w	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a0c:	4f75      	ldr	r7, [pc, #468]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006a0e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8006a10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a12:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8006a16:	4301      	orrs	r1, r0
 8006a18:	6539      	str	r1, [r7, #80]	@ 0x50
 8006a1a:	e598      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8006a1c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8006a1e:	4635      	mov	r5, r6
 8006a20:	e6e5      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a22:	4970      	ldr	r1, [pc, #448]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006a24:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006a26:	f001 0103 	and.w	r1, r1, #3
 8006a2a:	2903      	cmp	r1, #3
 8006a2c:	f43f adda 	beq.w	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8006a30:	2101      	movs	r1, #1
 8006a32:	f104 0008 	add.w	r0, r4, #8
 8006a36:	f7ff fb4d 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 8006a3a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	f040 80d5 	bne.w	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a46:	4f67      	ldr	r7, [pc, #412]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006a48:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8006a4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a4c:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8006a50:	4301      	orrs	r1, r0
 8006a52:	6579      	str	r1, [r7, #84]	@ 0x54
 8006a54:	e5c8      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x354>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a56:	4863      	ldr	r0, [pc, #396]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006a58:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006a5a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006a5e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006a60:	2d00      	cmp	r5, #0
 8006a62:	f040 809f 	bne.w	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a66:	4f5f      	ldr	r7, [pc, #380]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006a68:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8006a6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a6e:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006a72:	4301      	orrs	r1, r0
 8006a74:	6579      	str	r1, [r7, #84]	@ 0x54
 8006a76:	e6cc      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a78:	4f5b      	ldr	r7, [pc, #364]	@ (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a80:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8006a82:	f7fb fe1f 	bl	80026c4 <HAL_GetTick>
 8006a86:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a88:	e006      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x804>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a8a:	f7fb fe1b 	bl	80026c4 <HAL_GetTick>
 8006a8e:	eba0 0008 	sub.w	r0, r0, r8
 8006a92:	2864      	cmp	r0, #100	@ 0x64
 8006a94:	f200 82db 	bhi.w	800704e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	05da      	lsls	r2, r3, #23
 8006a9c:	d5f5      	bpl.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if (ret == HAL_OK)
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	f040 82d6 	bne.w	8007050 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006aa4:	4a4f      	ldr	r2, [pc, #316]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006aa6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8006aaa:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8006aac:	4059      	eors	r1, r3
 8006aae:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8006ab2:	d00b      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x838>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ab4:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ab6:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ab8:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8006abc:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8006ac0:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ac2:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8006ac4:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8006ac8:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8006aca:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ad0:	f000 82fb 	beq.w	80070ca <HAL_RCCEx_PeriphCLKConfig+0xe36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ad4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8006ad8:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8006adc:	f000 8309 	beq.w	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 8006ae0:	4940      	ldr	r1, [pc, #256]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006ae2:	690a      	ldr	r2, [r1, #16]
 8006ae4:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8006ae8:	610a      	str	r2, [r1, #16]
 8006aea:	483e      	ldr	r0, [pc, #248]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006aec:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8006af0:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8006af2:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006af4:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006af8:	6701      	str	r1, [r0, #112]	@ 0x70
 8006afa:	e543      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006afc:	4839      	ldr	r0, [pc, #228]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006afe:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006b00:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006b04:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006b06:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8006b08:	2d00      	cmp	r5, #0
 8006b0a:	f040 8177 	bne.w	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b0e:	4f35      	ldr	r7, [pc, #212]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b14:	f021 0107 	bic.w	r1, r1, #7
 8006b18:	4301      	orrs	r1, r0
 8006b1a:	6539      	str	r1, [r7, #80]	@ 0x50
 8006b1c:	f7ff bbf6 	b.w	800630c <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b20:	4930      	ldr	r1, [pc, #192]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006b22:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006b24:	f001 0103 	and.w	r1, r1, #3
 8006b28:	2903      	cmp	r1, #3
 8006b2a:	f000 82ba 	beq.w	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 8006b2e:	2102      	movs	r1, #2
 8006b30:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006b34:	f7ff fb3e 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	f000 82b5 	beq.w	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xe14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b3e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 8006b42:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b44:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006b48:	e616      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b4a:	4926      	ldr	r1, [pc, #152]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006b4c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006b4e:	f001 0103 	and.w	r1, r1, #3
 8006b52:	2903      	cmp	r1, #3
 8006b54:	f000 82a2 	beq.w	800709c <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8006b58:	2102      	movs	r1, #2
 8006b5a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006b5e:	f7ff fb29 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b62:	2800      	cmp	r0, #0
 8006b64:	f040 82a6 	bne.w	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xe20>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b68:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b6c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006b70:	e610      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x500>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b72:	481c      	ldr	r0, [pc, #112]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006b74:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006b76:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006b7a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	f43f ae64 	beq.w	800684a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 8006b82:	462e      	mov	r6, r5
 8006b84:	e668      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b86:	4f17      	ldr	r7, [pc, #92]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006b88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b8a:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8006b8e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006b90:	2d00      	cmp	r5, #0
 8006b92:	f47f ae76 	bne.w	8006882 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b96:	4d13      	ldr	r5, [pc, #76]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006b98:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8006b9a:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8006b9e:	4301      	orrs	r1, r0
 8006ba0:	6569      	str	r1, [r5, #84]	@ 0x54
 8006ba2:	e66d      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      status = ret;
 8006ba4:	462e      	mov	r6, r5
 8006ba6:	e634      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      status = ret;
 8006ba8:	462e      	mov	r6, r5
 8006baa:	e4d0      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8006bac:	462e      	mov	r6, r5
 8006bae:	e445      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006bb0:	4f0c      	ldr	r7, [pc, #48]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006bb2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8006bb4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006bb6:	f021 0103 	bic.w	r1, r1, #3
 8006bba:	4301      	orrs	r1, r0
 8006bbc:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8006bbe:	e4de      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bc0:	4f08      	ldr	r7, [pc, #32]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006bc2:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8006bc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bc6:	f021 0107 	bic.w	r1, r1, #7
 8006bca:	4301      	orrs	r1, r0
 8006bcc:	6579      	str	r1, [r7, #84]	@ 0x54
 8006bce:	e52c      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 8006bd0:	462e      	mov	r6, r5
 8006bd2:	e577      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x430>
      status = ret;
 8006bd4:	462e      	mov	r6, r5
 8006bd6:	e4aa      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x29a>
      status = ret;
 8006bd8:	462e      	mov	r6, r5
 8006bda:	e59c      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x482>
      status = ret;
 8006bdc:	462e      	mov	r6, r5
 8006bde:	e606      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x55a>
      status = ret;
 8006be0:	462e      	mov	r6, r5
 8006be2:	e5c1      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006be4:	58024400 	.word	0x58024400
 8006be8:	58024800 	.word	0x58024800
      status = ret;
 8006bec:	462e      	mov	r6, r5
 8006bee:	e475      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x248>
      status = ret;
 8006bf0:	462e      	mov	r6, r5
 8006bf2:	e4f9      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bf4:	4fc2      	ldr	r7, [pc, #776]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006bf6:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8006bfa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006bfc:	f021 0107 	bic.w	r1, r1, #7
 8006c00:	4301      	orrs	r1, r0
 8006c02:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c04:	e535      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->RngClockSelection)
 8006c06:	2900      	cmp	r1, #0
 8006c08:	f47f aef3 	bne.w	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8006c0c:	e7c0      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c0e:	49bc      	ldr	r1, [pc, #752]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006c10:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006c12:	f001 0103 	and.w	r1, r1, #3
 8006c16:	2903      	cmp	r1, #3
 8006c18:	f000 8194 	beq.w	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8006c1c:	2102      	movs	r1, #2
 8006c1e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006c22:	f7ff fac7 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006c26:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c28:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	d1cf      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8006c30:	e540      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c32:	49b3      	ldr	r1, [pc, #716]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006c34:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006c36:	f001 0103 	and.w	r1, r1, #3
 8006c3a:	2903      	cmp	r1, #3
 8006c3c:	f000 81ba 	beq.w	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006c40:	2102      	movs	r1, #2
 8006c42:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006c46:	f7ff fab5 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006c4a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c4c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	d1c1      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8006c54:	e557      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x472>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c56:	49aa      	ldr	r1, [pc, #680]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006c58:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006c5a:	f001 0103 	and.w	r1, r1, #3
 8006c5e:	2903      	cmp	r1, #3
 8006c60:	f000 818c 	beq.w	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006c64:	2102      	movs	r1, #2
 8006c66:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006c6a:	f7ff faa3 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006c6e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c70:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006c74:	2d00      	cmp	r5, #0
 8006c76:	d1b3      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8006c78:	e56e      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c7a:	49a1      	ldr	r1, [pc, #644]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006c7c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006c7e:	f001 0103 	and.w	r1, r1, #3
 8006c82:	2903      	cmp	r1, #3
 8006c84:	f000 81df 	beq.w	8007046 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 8006c88:	2102      	movs	r1, #2
 8006c8a:	f104 0008 	add.w	r0, r4, #8
 8006c8e:	f7ff fa21 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 8006c92:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c94:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006c98:	2d00      	cmp	r5, #0
 8006c9a:	d187      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x918>
 8006c9c:	f7ff bbc7 	b.w	800642e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ca0:	4997      	ldr	r1, [pc, #604]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006ca2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006ca4:	f001 0103 	and.w	r1, r1, #3
 8006ca8:	2903      	cmp	r1, #3
 8006caa:	f000 820a 	beq.w	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8006cae:	2102      	movs	r1, #2
 8006cb0:	f104 0008 	add.w	r0, r4, #8
 8006cb4:	f7ff fa0e 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 8006cb8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	f47f ac5c 	bne.w	800657c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8006cc4:	e774      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cc6:	498e      	ldr	r1, [pc, #568]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006cc8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006cca:	f001 0103 	and.w	r1, r1, #3
 8006cce:	2903      	cmp	r1, #3
 8006cd0:	f000 8146 	beq.w	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006cda:	f7ff fa6b 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006cde:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006ce0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006ce4:	2d00      	cmp	r5, #0
 8006ce6:	d181      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x958>
 8006ce8:	f7ff bbf1 	b.w	80064ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cec:	4984      	ldr	r1, [pc, #528]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006cee:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006cf0:	f001 0103 	and.w	r1, r1, #3
 8006cf4:	2903      	cmp	r1, #3
 8006cf6:	f43f ad8a 	beq.w	800680e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006d00:	f7ff fa58 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006d04:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d06:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006d0a:	2d00      	cmp	r5, #0
 8006d0c:	f47f af4a 	bne.w	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006d10:	e6a9      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d12:	497b      	ldr	r1, [pc, #492]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006d14:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006d16:	f001 0103 	and.w	r1, r1, #3
 8006d1a:	2903      	cmp	r1, #3
 8006d1c:	f43f ae7e 	beq.w	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x788>
 8006d20:	2102      	movs	r1, #2
 8006d22:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006d26:	f7ff fa45 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006d2a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d2c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006d30:	2d00      	cmp	r5, #0
 8006d32:	f47f af53 	bne.w	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x948>
 8006d36:	e552      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x54a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d38:	4971      	ldr	r1, [pc, #452]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006d3a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006d3c:	f001 0103 	and.w	r1, r1, #3
 8006d40:	2903      	cmp	r1, #3
 8006d42:	f000 8129 	beq.w	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8006d46:	2101      	movs	r1, #1
 8006d48:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006d4c:	f7ff fa32 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006d50:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d52:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	f47f af3c 	bne.w	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8006d5c:	f7ff bbdf 	b.w	800651e <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d60:	4867      	ldr	r0, [pc, #412]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006d62:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006d64:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006d68:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006d6a:	2d00      	cmp	r5, #0
 8006d6c:	f43f ab88 	beq.w	8006480 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 8006d70:	462e      	mov	r6, r5
 8006d72:	f7ff bb8c 	b.w	800648e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d76:	4862      	ldr	r0, [pc, #392]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006d78:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006d7a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006d7e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006d80:	2d00      	cmp	r5, #0
 8006d82:	f43f ab38 	beq.w	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x162>
      status = ret;
 8006d86:	462e      	mov	r6, r5
 8006d88:	f7ff bb3d 	b.w	8006406 <HAL_RCCEx_PeriphCLKConfig+0x172>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d8c:	495c      	ldr	r1, [pc, #368]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006d8e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006d90:	f001 0103 	and.w	r1, r1, #3
 8006d94:	2903      	cmp	r1, #3
 8006d96:	f000 8125 	beq.w	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006da0:	f7ff fa08 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006da4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006da6:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006daa:	f7ff bb66 	b.w	800647a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dae:	4954      	ldr	r1, [pc, #336]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006db0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006db2:	f001 0103 	and.w	r1, r1, #3
 8006db6:	2903      	cmp	r1, #3
 8006db8:	f000 813e 	beq.w	8007038 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006dc2:	f7ff f9f7 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006dc6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006dc8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006dcc:	2d00      	cmp	r5, #0
 8006dce:	f43f aabd 	beq.w	800634c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      status = ret;
 8006dd2:	462e      	mov	r6, r5
 8006dd4:	f7ff bac1 	b.w	800635a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dd8:	4949      	ldr	r1, [pc, #292]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006dda:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006ddc:	f001 0103 	and.w	r1, r1, #3
 8006de0:	2903      	cmp	r1, #3
 8006de2:	f43f aa91 	beq.w	8006308 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006de6:	2100      	movs	r1, #0
 8006de8:	f104 0008 	add.w	r0, r4, #8
 8006dec:	f7ff f972 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 8006df0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006df2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006df6:	2d00      	cmp	r5, #0
 8006df8:	f43f ae89 	beq.w	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x87a>
      status = ret;
 8006dfc:	462e      	mov	r6, r5
 8006dfe:	f7ff ba85 	b.w	800630c <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e02:	493f      	ldr	r1, [pc, #252]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006e04:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e06:	f001 0103 	and.w	r1, r1, #3
 8006e0a:	2903      	cmp	r1, #3
 8006e0c:	f43f aa7c 	beq.w	8006308 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006e10:	2100      	movs	r1, #0
 8006e12:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006e16:	f7ff f9cd 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006e1a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e1c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006e20:	e672      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x874>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e22:	4937      	ldr	r1, [pc, #220]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006e24:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e26:	f001 0103 	and.w	r1, r1, #3
 8006e2a:	2903      	cmp	r1, #3
 8006e2c:	f000 80f9 	beq.w	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006e30:	2100      	movs	r1, #0
 8006e32:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006e36:	f7ff f9bd 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006e3a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	f43f aaad 	beq.w	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      status = ret;
 8006e46:	462e      	mov	r6, r5
 8006e48:	f7ff bab2 	b.w	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e4c:	492c      	ldr	r1, [pc, #176]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006e4e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e50:	f001 0103 	and.w	r1, r1, #3
 8006e54:	2903      	cmp	r1, #3
 8006e56:	f000 80d1 	beq.w	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006e60:	f7ff f9a8 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006e64:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e66:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006e6a:	f7ff bac1 	b.w	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e6e:	4924      	ldr	r1, [pc, #144]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006e70:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e72:	f001 0103 	and.w	r1, r1, #3
 8006e76:	2903      	cmp	r1, #3
 8006e78:	f000 80c8 	beq.w	800700c <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8006e7c:	2102      	movs	r1, #2
 8006e7e:	3028      	adds	r0, #40	@ 0x28
 8006e80:	f7ff f998 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006e84:	4606      	mov	r6, r0
        break;
 8006e86:	f7ff ba28 	b.w	80062da <HAL_RCCEx_PeriphCLKConfig+0x46>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e8a:	481d      	ldr	r0, [pc, #116]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006e8c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006e8e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006e92:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8006e94:	f7ff ba81 	b.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x106>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e98:	4819      	ldr	r0, [pc, #100]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006e9a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006e9c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006ea0:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8006ea2:	f7ff ba50 	b.w	8006346 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea6:	4d16      	ldr	r5, [pc, #88]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006ea8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8006eaa:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8006eae:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006eb0:	f7ff ba17 	b.w	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006eb4:	4912      	ldr	r1, [pc, #72]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006eb6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006eb8:	f001 0103 	and.w	r1, r1, #3
 8006ebc:	2903      	cmp	r1, #3
 8006ebe:	f000 80e5 	beq.w	800708c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006ec8:	f7ff f974 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006ecc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ece:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006ed2:	2d00      	cmp	r5, #0
 8006ed4:	f47f abcc 	bne.w	8006670 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8006ed8:	e68c      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006eda:	4909      	ldr	r1, [pc, #36]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8006edc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006ede:	f001 0103 	and.w	r1, r1, #3
 8006ee2:	2903      	cmp	r1, #3
 8006ee4:	f000 80d6 	beq.w	8007094 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8006ee8:	2101      	movs	r1, #1
 8006eea:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006eee:	f7ff f961 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006ef2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ef4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	f47f ab95 	bne.w	8006628 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8006efe:	e65f      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 8006f00:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f04:	4983      	ldr	r1, [pc, #524]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8006f06:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006f08:	f001 0103 	and.w	r1, r1, #3
 8006f0c:	2903      	cmp	r1, #3
 8006f0e:	f43f ab69 	beq.w	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8006f12:	2101      	movs	r1, #1
 8006f14:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006f18:	f7ff f94c 	bl	80061b4 <RCCEx_PLL3_Config.part.0>
 8006f1c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f1e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006f22:	2d00      	cmp	r5, #0
 8006f24:	f47f ae64 	bne.w	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006f28:	e58d      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  return HAL_ERROR;
 8006f2a:	2001      	movs	r0, #1
}
 8006f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006f30:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8006f34:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006f38:	f43f abb9 	beq.w	80066ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006f3c:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8006f40:	f43f abb5 	beq.w	80066ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      status = ret;
 8006f44:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8006f46:	4635      	mov	r5, r6
 8006f48:	f7ff bbbc 	b.w	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f4c:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8006f50:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8006f54:	f43f aab8 	beq.w	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006f58:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8006f5c:	f43f aab4 	beq.w	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
      status = ret;
 8006f60:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8006f62:	4635      	mov	r5, r6
 8006f64:	f7ff baba 	b.w	80064dc <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006f68:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8006f6c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006f70:	f43f abef 	beq.w	8006752 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8006f74:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8006f78:	f43f abeb 	beq.w	8006752 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = ret;
 8006f7c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8006f7e:	4635      	mov	r5, r6
 8006f80:	f7ff bbf2 	b.w	8006768 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f84:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8006f88:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006f8c:	f43f aac4 	beq.w	8006518 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8006f90:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8006f94:	f43f aac0 	beq.w	8006518 <HAL_RCCEx_PeriphCLKConfig+0x284>
      status = ret;
 8006f98:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8006f9a:	4635      	mov	r5, r6
 8006f9c:	f7ff bac7 	b.w	800652e <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006fa0:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8006fa4:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8006fa8:	f43f abaa 	beq.w	8006700 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8006fac:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8006fb0:	f43f aba6 	beq.w	8006700 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status = ret;
 8006fb4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8006fb6:	4635      	mov	r5, r6
 8006fb8:	f7ff bbad 	b.w	8006716 <HAL_RCCEx_PeriphCLKConfig+0x482>
    return HAL_ERROR;
 8006fbc:	2501      	movs	r5, #1
 8006fbe:	e4e2      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006fc0:	0691      	lsls	r1, r2, #26
 8006fc2:	d5b2      	bpl.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    return HAL_ERROR;
 8006fc4:	2501      	movs	r5, #1
 8006fc6:	e4f2      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x71a>
    return HAL_ERROR;
 8006fc8:	2501      	movs	r5, #1
 8006fca:	e4a9      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8006fcc:	2501      	movs	r5, #1
 8006fce:	e4b8      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8006fd0:	2501      	movs	r5, #1
 8006fd2:	e4c7      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch (PeriphClkInit->Spi123ClockSelection)
 8006fd4:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8006fd8:	f43f aa4f 	beq.w	800647a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8006fdc:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8006fe0:	f43f aa4b 	beq.w	800647a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      status = ret;
 8006fe4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8006fe6:	4635      	mov	r5, r6
 8006fe8:	f7ff ba51 	b.w	800648e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Sai4BClockSelection)
 8006fec:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8006ff0:	f43f a9fe 	beq.w	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006ff4:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8006ff8:	f43f a9fa 	beq.w	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      status = ret;
 8006ffc:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8006ffe:	4635      	mov	r5, r6
 8007000:	f7ff ba01 	b.w	8006406 <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007004:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8007008:	f43f a96b 	beq.w	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_ERROR;
 800700c:	2601      	movs	r6, #1
 800700e:	f7ff b96f 	b.w	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007012:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8007016:	f43f a9c0 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800701a:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800701e:	f43f a9bc 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x106>
      status = ret;
 8007022:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007024:	4635      	mov	r5, r6
 8007026:	f7ff b9c3 	b.w	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai23ClockSelection)
 800702a:	29c0      	cmp	r1, #192	@ 0xc0
 800702c:	f43f a98b 	beq.w	8006346 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8007030:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007034:	f43f a987 	beq.w	8006346 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      status = ret;
 8007038:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800703a:	4635      	mov	r5, r6
 800703c:	f7ff b98d 	b.w	800635a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->QspiClockSelection)
 8007040:	2930      	cmp	r1, #48	@ 0x30
 8007042:	f43f a9f1 	beq.w	8006428 <HAL_RCCEx_PeriphCLKConfig+0x194>
      status = ret;
 8007046:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007048:	4635      	mov	r5, r6
 800704a:	f7ff b9f7 	b.w	800643c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = HAL_TIMEOUT;
 800704e:	2503      	movs	r5, #3
      status = ret;
 8007050:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007052:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007056:	f7ff ba95 	b.w	8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800705a:	6863      	ldr	r3, [r4, #4]
 800705c:	069a      	lsls	r2, r3, #26
 800705e:	f57f af64 	bpl.w	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007062:	4605      	mov	r5, r0
 8007064:	e4a3      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007066:	492b      	ldr	r1, [pc, #172]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8007068:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800706a:	f001 0103 	and.w	r1, r1, #3
 800706e:	2903      	cmp	r1, #3
 8007070:	f43f aa6b 	beq.w	800654a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8007074:	2101      	movs	r1, #1
 8007076:	f104 0008 	add.w	r0, r4, #8
 800707a:	f7ff f82b 	bl	80060d4 <RCCEx_PLL2_Config.part.0>
 800707e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007080:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007084:	2d00      	cmp	r5, #0
 8007086:	f47f ad8f 	bne.w	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800708a:	e4bf      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x778>
      status = ret;
 800708c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800708e:	4635      	mov	r5, r6
 8007090:	f7ff baef 	b.w	8006672 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 8007094:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007096:	4635      	mov	r5, r6
 8007098:	f7ff bac7 	b.w	800662a <HAL_RCCEx_PeriphCLKConfig+0x396>
        status = HAL_ERROR;
 800709c:	2601      	movs	r6, #1
 800709e:	f7ff bb79 	b.w	8006794 <HAL_RCCEx_PeriphCLKConfig+0x500>
        status = HAL_ERROR;
 80070a2:	2601      	movs	r6, #1
 80070a4:	f7ff bb68 	b.w	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80070a8:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070ac:	e9d4 3200 	ldrd	r3, r2, [r4]
 80070b0:	f7ff bb62 	b.w	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070b4:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 80070b8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 80070be:	f7ff bb69 	b.w	8006794 <HAL_RCCEx_PeriphCLKConfig+0x500>
      status = ret;
 80070c2:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80070c4:	4635      	mov	r5, r6
 80070c6:	f7ff ba5a 	b.w	800657e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        tickstart = HAL_GetTick();
 80070ca:	f7fb fafb 	bl	80026c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070ce:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8007114 <HAL_RCCEx_PeriphCLKConfig+0xe80>
        tickstart = HAL_GetTick();
 80070d2:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070d4:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070d8:	e004      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070da:	f7fb faf3 	bl	80026c4 <HAL_GetTick>
 80070de:	1bc0      	subs	r0, r0, r7
 80070e0:	4548      	cmp	r0, r9
 80070e2:	d810      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xe72>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070e4:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80070e8:	079b      	lsls	r3, r3, #30
 80070ea:	d5f6      	bpl.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xe46>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070ec:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80070f0:	e4f0      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80070f2:	4808      	ldr	r0, [pc, #32]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 80070f4:	4a08      	ldr	r2, [pc, #32]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0xe84>)
 80070f6:	6901      	ldr	r1, [r0, #16]
 80070f8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80070fc:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8007100:	430a      	orrs	r2, r1
 8007102:	6102      	str	r2, [r0, #16]
 8007104:	e4f1      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x856>
        status = ret;
 8007106:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007108:	e9d4 3200 	ldrd	r3, r2, [r4]
 800710c:	4635      	mov	r5, r6
 800710e:	f7ff ba39 	b.w	8006584 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8007112:	bf00      	nop
 8007114:	58024400 	.word	0x58024400
 8007118:	00ffffcf 	.word	0x00ffffcf

0800711c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800711c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800711e:	f7fe ff09 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8007122:	4b05      	ldr	r3, [pc, #20]	@ (8007138 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8007124:	4a05      	ldr	r2, [pc, #20]	@ (800713c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800712c:	5cd3      	ldrb	r3, [r2, r3]
 800712e:	f003 031f 	and.w	r3, r3, #31
}
 8007132:	40d8      	lsrs	r0, r3
 8007134:	bd08      	pop	{r3, pc}
 8007136:	bf00      	nop
 8007138:	58024400 	.word	0x58024400
 800713c:	0806fbc4 	.word	0x0806fbc4

08007140 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007140:	4a47      	ldr	r2, [pc, #284]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8007142:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007144:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007146:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007148:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 800714a:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800714e:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007152:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8007154:	d05b      	beq.n	800720e <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007156:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800715a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800715e:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007162:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007166:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800716a:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800716c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007170:	ee06 1a90 	vmov	s13, r1
 8007174:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8007178:	d003      	beq.n	8007182 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800717a:	2c02      	cmp	r4, #2
 800717c:	d06a      	beq.n	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 800717e:	2c00      	cmp	r4, #0
 8007180:	d04a      	beq.n	8007218 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007182:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8007264 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8007186:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800718a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800718c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800719c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80071a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a4:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071a8:	4a2d      	ldr	r2, [pc, #180]	@ (8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 80071aa:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80071ae:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80071b0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80071b4:	ee07 3a10 	vmov	s14, r3
 80071b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80071bc:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071be:	ee37 7a06 	vadd.f32	s14, s14, s12
 80071c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80071c6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80071ca:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80071ce:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80071d0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80071d4:	ee07 3a10 	vmov	s14, r3
 80071d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80071dc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80071e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80071e4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80071e8:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80071ec:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80071ee:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80071f2:	ee06 3a90 	vmov	s13, r3
 80071f6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80071fa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80071fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007202:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007206:	ee17 3a90 	vmov	r3, s15
 800720a:	6083      	str	r3, [r0, #8]
}
 800720c:	4770      	bx	lr
 800720e:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007210:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007214:	6083      	str	r3, [r0, #8]
}
 8007216:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007218:	6813      	ldr	r3, [r2, #0]
 800721a:	069b      	lsls	r3, r3, #26
 800721c:	d51d      	bpl.n	800725a <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800721e:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007220:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007224:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007226:	4910      	ldr	r1, [pc, #64]	@ (8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8007228:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800722c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007230:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007232:	ee06 3a10 	vmov	s12, r3
 8007236:	ee05 1a90 	vmov	s11, r1
 800723a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800723e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8007242:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007246:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800724a:	ee36 7a26 	vadd.f32	s14, s12, s13
 800724e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007252:	e7a9      	b.n	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007254:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800726c <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8007258:	e795      	b.n	8007186 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800725a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007270 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 800725e:	e792      	b.n	8007186 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8007260:	58024400 	.word	0x58024400
 8007264:	4a742400 	.word	0x4a742400
 8007268:	03d09000 	.word	0x03d09000
 800726c:	4bbebc20 	.word	0x4bbebc20
 8007270:	4c742400 	.word	0x4c742400

08007274 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007274:	4a47      	ldr	r2, [pc, #284]	@ (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8007276:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007278:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800727a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800727c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 800727e:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007282:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007286:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8007288:	d05b      	beq.n	8007342 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800728a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800728e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007292:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007296:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800729a:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800729e:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072a4:	ee06 1a90 	vmov	s13, r1
 80072a8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80072ac:	d003      	beq.n	80072b6 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80072ae:	2c02      	cmp	r4, #2
 80072b0:	d06a      	beq.n	8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 80072b2:	2c00      	cmp	r4, #0
 80072b4:	d04a      	beq.n	800734c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072b6:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80072ba:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80072be:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80072c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c4:	ee07 3a90 	vmov	s15, r3
 80072c8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80072cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072d0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80072d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072dc:	4a2d      	ldr	r2, [pc, #180]	@ (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 80072de:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80072e2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80072e4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80072e8:	ee07 3a10 	vmov	s14, r3
 80072ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80072f0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072f2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80072f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80072fa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80072fe:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007302:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007304:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007308:	ee07 3a10 	vmov	s14, r3
 800730c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007310:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007314:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007318:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800731c:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007320:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007322:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007326:	ee06 3a90 	vmov	s13, r3
 800732a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800732e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007332:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007336:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800733a:	ee17 3a90 	vmov	r3, s15
 800733e:	6083      	str	r3, [r0, #8]
}
 8007340:	4770      	bx	lr
 8007342:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007344:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007348:	6083      	str	r3, [r0, #8]
}
 800734a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800734c:	6813      	ldr	r3, [r2, #0]
 800734e:	069b      	lsls	r3, r3, #26
 8007350:	d51d      	bpl.n	800738e <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007352:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007354:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007358:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800735a:	4910      	ldr	r1, [pc, #64]	@ (800739c <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800735c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007360:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007364:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007366:	ee06 3a10 	vmov	s12, r3
 800736a:	ee05 1a90 	vmov	s11, r1
 800736e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007372:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8007376:	ee36 6a27 	vadd.f32	s12, s12, s15
 800737a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800737e:	ee36 7a26 	vadd.f32	s14, s12, s13
 8007382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007386:	e7a9      	b.n	80072dc <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007388:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 800738c:	e795      	b.n	80072ba <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800738e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8007392:	e792      	b.n	80072ba <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8007394:	58024400 	.word	0x58024400
 8007398:	4a742400 	.word	0x4a742400
 800739c:	03d09000 	.word	0x03d09000
 80073a0:	4bbebc20 	.word	0x4bbebc20
 80073a4:	4c742400 	.word	0x4c742400

080073a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073a8:	4a47      	ldr	r2, [pc, #284]	@ (80074c8 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 80073aa:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073ac:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80073ae:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80073b0:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 80073b2:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80073b6:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80073ba:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 80073bc:	d05b      	beq.n	8007476 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80073be:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80073c2:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073c6:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073ca:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80073ce:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80073d2:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073d8:	ee06 1a90 	vmov	s13, r1
 80073dc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80073e0:	d04e      	beq.n	8007480 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 80073e2:	2c02      	cmp	r4, #2
 80073e4:	d06d      	beq.n	80074c2 <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 80073e6:	2c00      	cmp	r4, #0
 80073e8:	d04d      	beq.n	8007486 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073ea:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80074cc <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80073ee:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80073f2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80073f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f8:	ee07 3a90 	vmov	s15, r3
 80073fc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007404:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007410:	4a2d      	ldr	r2, [pc, #180]	@ (80074c8 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 8007412:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007416:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007418:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800741c:	ee07 3a10 	vmov	s14, r3
 8007420:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8007424:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007426:	ee37 7a06 	vadd.f32	s14, s14, s12
 800742a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800742e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007432:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007436:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007438:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800743c:	ee07 3a10 	vmov	s14, r3
 8007440:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007444:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007448:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800744c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007450:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007454:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007456:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800745a:	ee06 3a90 	vmov	s13, r3
 800745e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007462:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007466:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800746a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800746e:	ee17 3a90 	vmov	r3, s15
 8007472:	6083      	str	r3, [r0, #8]
}
 8007474:	4770      	bx	lr
 8007476:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007478:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800747c:	6083      	str	r3, [r0, #8]
}
 800747e:	4770      	bx	lr
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007480:	eddf 7a13 	vldr	s15, [pc, #76]	@ 80074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 8007484:	e7b3      	b.n	80073ee <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007486:	6813      	ldr	r3, [r2, #0]
 8007488:	069b      	lsls	r3, r3, #26
 800748a:	d5ae      	bpl.n	80073ea <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800748c:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800748e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007492:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007494:	490f      	ldr	r1, [pc, #60]	@ (80074d4 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>)
 8007496:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800749a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800749e:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074a0:	ee06 3a10 	vmov	s12, r3
 80074a4:	ee05 1a90 	vmov	s11, r1
 80074a8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80074ac:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80074b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80074b4:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80074b8:	ee36 7a26 	vadd.f32	s14, s12, s13
 80074bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074c0:	e7a6      	b.n	8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074c2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80074d8 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 80074c6:	e792      	b.n	80073ee <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 80074c8:	58024400 	.word	0x58024400
 80074cc:	4c742400 	.word	0x4c742400
 80074d0:	4a742400 	.word	0x4a742400
 80074d4:	03d09000 	.word	0x03d09000
 80074d8:	4bbebc20 	.word	0x4bbebc20

080074dc <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80074dc:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80074e0:	430b      	orrs	r3, r1
{
 80074e2:	b500      	push	{lr}
 80074e4:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80074e6:	d04c      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80074e8:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 80074ec:	430b      	orrs	r3, r1
 80074ee:	d036      	beq.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80074f0:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80074f4:	430b      	orrs	r3, r1
 80074f6:	d06c      	beq.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80074f8:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 80074fc:	430b      	orrs	r3, r1
 80074fe:	d04b      	beq.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007500:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8007504:	430b      	orrs	r3, r1
 8007506:	f000 80b6 	beq.w	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800750a:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 800750e:	430b      	orrs	r3, r1
 8007510:	f000 80ec 	beq.w	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007514:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8007518:	430b      	orrs	r3, r1
 800751a:	d069      	beq.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800751c:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8007520:	430b      	orrs	r3, r1
 8007522:	f000 80d6 	beq.w	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007526:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 800752a:	430b      	orrs	r3, r1
 800752c:	f000 8109 	beq.w	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007530:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8007534:	4308      	orrs	r0, r1
 8007536:	d120      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007538:	4a95      	ldr	r2, [pc, #596]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800753a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800753c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8007540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007544:	f000 80aa 	beq.w	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8007548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800754c:	f000 8116 	beq.w	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007550:	b99b      	cbnz	r3, 800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007552:	6810      	ldr	r0, [r2, #0]
 8007554:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8007558:	d047      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 800755a:	488e      	ldr	r0, [pc, #568]	@ (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
  return frequency;
 800755c:	e045      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800755e:	4a8c      	ldr	r2, [pc, #560]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007560:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007562:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 8007566:	2b80      	cmp	r3, #128	@ 0x80
 8007568:	f000 8093 	beq.w	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 800756c:	f240 808b 	bls.w	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007570:	2bc0      	cmp	r3, #192	@ 0xc0
 8007572:	d039      	beq.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8007574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007578:	d05c      	beq.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
          frequency = 0;
 800757a:	2000      	movs	r0, #0
}
 800757c:	b005      	add	sp, #20
 800757e:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007582:	4b83      	ldr	r3, [pc, #524]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007586:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800758a:	2b04      	cmp	r3, #4
 800758c:	d8f5      	bhi.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800758e:	e8df f003 	tbb	[pc, r3]
 8007592:	3c68      	.short	0x3c68
 8007594:	2b46      	.short	0x2b46
 8007596:	50          	.byte	0x50
 8007597:	00          	.byte	0x00
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007598:	4a7d      	ldr	r2, [pc, #500]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800759a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800759c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 80075a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075a4:	d075      	beq.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80075a6:	d96e      	bls.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80075a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075ac:	d01c      	beq.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80075ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075b2:	d1e2      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075b4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075b6:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075bc:	0752      	lsls	r2, r2, #29
 80075be:	d541      	bpl.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d13f      	bne.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075c4:	4b72      	ldr	r3, [pc, #456]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075c6:	4874      	ldr	r0, [pc, #464]	@ (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80075ce:	40d8      	lsrs	r0, r3
 80075d0:	e00b      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80075d2:	4a6f      	ldr	r2, [pc, #444]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075d4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80075d6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 80075da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075de:	d058      	beq.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80075e0:	d951      	bls.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80075e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80075e6:	d15e      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 80075e8:	486c      	ldr	r0, [pc, #432]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 80075ea:	b005      	add	sp, #20
 80075ec:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80075f0:	4a67      	ldr	r2, [pc, #412]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075f2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80075f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075fc:	f000 80df 	beq.w	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 8007600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007604:	d0d6      	beq.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1b7      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800760a:	4b61      	ldr	r3, [pc, #388]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007612:	d0ea      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007614:	a801      	add	r0, sp, #4
 8007616:	f7ff fd93 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800761a:	9801      	ldr	r0, [sp, #4]
 800761c:	e7e5      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800761e:	4b5c      	ldr	r3, [pc, #368]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007626:	d0e0      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007628:	a801      	add	r0, sp, #4
 800762a:	f7ff fe23 	bl	8007274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800762e:	9801      	ldr	r0, [sp, #4]
 8007630:	e7db      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007632:	4a57      	ldr	r2, [pc, #348]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007634:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007636:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007638:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800763c:	0749      	lsls	r1, r1, #29
 800763e:	d501      	bpl.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8007640:	2b00      	cmp	r3, #0
 8007642:	d038      	beq.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007644:	4a52      	ldr	r2, [pc, #328]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007646:	6812      	ldr	r2, [r2, #0]
 8007648:	05d0      	lsls	r0, r2, #23
 800764a:	d502      	bpl.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800764c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007650:	d067      	beq.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007652:	4a4f      	ldr	r2, [pc, #316]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007654:	6812      	ldr	r2, [r2, #0]
 8007656:	0391      	lsls	r1, r2, #14
 8007658:	d58f      	bpl.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800765a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800765e:	d18c      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8007660:	e77b      	b.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007662:	4b4b      	ldr	r3, [pc, #300]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800766a:	d0be      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800766c:	a801      	add	r0, sp, #4
 800766e:	f7ff fe9b 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007672:	9802      	ldr	r0, [sp, #8]
 8007674:	e7b9      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007676:	4a46      	ldr	r2, [pc, #280]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007678:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800767a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 800767e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007682:	d006      	beq.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8007684:	d81d      	bhi.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007686:	b14b      	cbz	r3, 800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007688:	6810      	ldr	r0, [r2, #0]
 800768a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800768e:	d0ac      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8007690:	e7c0      	b.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007692:	6810      	ldr	r0, [r2, #0]
 8007694:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007698:	d0a7      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800769a:	e7c5      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800769c:	6810      	ldr	r0, [r2, #0]
 800769e:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80076a2:	d0a2      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80076a4:	e7e2      	b.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
    switch (saiclocksource)
 80076a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076aa:	d0c3      	beq.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80076ac:	e765      	b.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076ae:	6810      	ldr	r0, [r2, #0]
 80076b0:	f010 0004 	ands.w	r0, r0, #4
 80076b4:	d099      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076b6:	6813      	ldr	r3, [r2, #0]
 80076b8:	4837      	ldr	r0, [pc, #220]	@ (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80076ba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80076be:	40d8      	lsrs	r0, r3
 80076c0:	e793      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80076c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076c6:	d08f      	beq.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80076c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076cc:	f43f af72 	beq.w	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80076d0:	e753      	b.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80076d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 80076d6:	03d2      	lsls	r2, r2, #15
 80076d8:	d5c4      	bpl.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076da:	6818      	ldr	r0, [r3, #0]
 80076dc:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80076e0:	d083      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076e2:	a801      	add	r0, sp, #4
 80076e4:	f7ff fd2c 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80076e8:	9803      	ldr	r0, [sp, #12]
 80076ea:	e77e      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80076ec:	4a28      	ldr	r2, [pc, #160]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076ee:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80076f0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 80076f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076f8:	d0d9      	beq.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 80076fa:	d814      	bhi.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 80076fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007700:	d03c      	beq.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007706:	d04f      	beq.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8007708:	2b00      	cmp	r3, #0
 800770a:	f47f af36 	bne.w	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
}
 800770e:	b005      	add	sp, #20
 8007710:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8007714:	f7fe bc4e 	b.w	8005fb4 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007718:	6810      	ldr	r0, [r2, #0]
 800771a:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 800771e:	f43f af64 	beq.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8007722:	481f      	ldr	r0, [pc, #124]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007724:	e761      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8007726:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800772a:	d0f5      	beq.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 800772c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007730:	f47f af23 	bne.w	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007734:	4b16      	ldr	r3, [pc, #88]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007736:	6818      	ldr	r0, [r3, #0]
 8007738:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800773c:	f43f af55 	beq.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8007740:	e70b      	b.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007742:	4b13      	ldr	r3, [pc, #76]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007746:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800774a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800774e:	d04e      	beq.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8007750:	d83f      	bhi.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8007752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007756:	d043      	beq.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8007758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800775c:	d024      	beq.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800775e:	2b00      	cmp	r3, #0
 8007760:	f47f af0b 	bne.w	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007764:	f7fe fbe6 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8007768:	4b09      	ldr	r3, [pc, #36]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800776a:	4a0e      	ldr	r2, [pc, #56]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007772:	5cd3      	ldrb	r3, [r2, r3]
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	40d8      	lsrs	r0, r3
        break;
 800777a:	e736      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800777c:	6810      	ldr	r0, [r2, #0]
 800777e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007782:	f43f af32 	beq.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007786:	a801      	add	r0, sp, #4
 8007788:	f7ff fcda 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800778c:	9802      	ldr	r0, [sp, #8]
 800778e:	e72c      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8007790:	58024400 	.word	0x58024400
 8007794:	017d7840 	.word	0x017d7840
 8007798:	03d09000 	.word	0x03d09000
 800779c:	00bb8000 	.word	0x00bb8000
 80077a0:	003d0900 	.word	0x003d0900
 80077a4:	0806fbc4 	.word	0x0806fbc4
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80077b0:	f43f af1b 	beq.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077b4:	a801      	add	r0, sp, #4
 80077b6:	f7ff fd5d 	bl	8007274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077ba:	9802      	ldr	r0, [sp, #8]
 80077bc:	e715      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077be:	6810      	ldr	r0, [r2, #0]
 80077c0:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80077c4:	f43f af11 	beq.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077c8:	a801      	add	r0, sp, #4
 80077ca:	f7ff fd53 	bl	8007274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80077ce:	9803      	ldr	r0, [sp, #12]
 80077d0:	e70b      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80077d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077d6:	d016      	beq.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80077d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077dc:	d0aa      	beq.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80077de:	e6cc      	b.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80077e8:	f43f aeff 	beq.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80077ec:	e7cb      	b.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077ee:	4b09      	ldr	r3, [pc, #36]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	f010 0004 	ands.w	r0, r0, #4
 80077f6:	f43f aef8 	beq.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4806      	ldr	r0, [pc, #24]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80077fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007802:	40d8      	lsrs	r0, r3
 8007804:	e6f1      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007806:	4b03      	ldr	r3, [pc, #12]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 800780e:	f43f aeec 	beq.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8007812:	e786      	b.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 8007814:	58024400 	.word	0x58024400
 8007818:	03d09000 	.word	0x03d09000

0800781c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800781c:	b318      	cbz	r0, 8007866 <HAL_SDRAM_Init+0x4a>
{
 800781e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007820:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8007824:	4604      	mov	r4, r0
 8007826:	460d      	mov	r5, r1
 8007828:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800782c:	b1b3      	cbz	r3, 800785c <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800782e:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007830:	2302      	movs	r3, #2
 8007832:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007836:	f851 0b04 	ldr.w	r0, [r1], #4
 800783a:	f001 fbaf 	bl	8008f9c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800783e:	6862      	ldr	r2, [r4, #4]
 8007840:	4629      	mov	r1, r5
 8007842:	6820      	ldr	r0, [r4, #0]
 8007844:	f001 fbe0 	bl	8009008 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007848:	4a08      	ldr	r2, [pc, #32]	@ (800786c <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800784a:	2101      	movs	r1, #1

  return HAL_OK;
 800784c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800784e:	6813      	ldr	r3, [r2, #0]
 8007850:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007854:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007856:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
}
 800785a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800785c:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8007860:	f7fa fd2e 	bl	80022c0 <HAL_SDRAM_MspInit>
 8007864:	e7e3      	b.n	800782e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8007866:	2001      	movs	r0, #1
}
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	52004000 	.word	0x52004000

08007870 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007870:	2800      	cmp	r0, #0
 8007872:	f000 8095 	beq.w	80079a0 <HAL_TIM_Base_Init+0x130>
{
 8007876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007878:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800787c:	4604      	mov	r4, r0
 800787e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 8087 	beq.w	8007996 <HAL_TIM_Base_Init+0x126>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007888:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800788a:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800788c:	4945      	ldr	r1, [pc, #276]	@ (80079a4 <HAL_TIM_Base_Init+0x134>)
 800788e:	4d46      	ldr	r5, [pc, #280]	@ (80079a8 <HAL_TIM_Base_Init+0x138>)
 8007890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007894:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8007898:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800789c:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 80078a0:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078a2:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078a6:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078a8:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078ac:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078ae:	ea4f 1151 	mov.w	r1, r1, lsr #5

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078b2:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078b4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80078b8:	d01f      	beq.n	80078fa <HAL_TIM_Base_Init+0x8a>
 80078ba:	b9f1      	cbnz	r1, 80078fa <HAL_TIM_Base_Init+0x8a>
 80078bc:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 80079b8 <HAL_TIM_Base_Init+0x148>
 80078c0:	4563      	cmp	r3, ip
 80078c2:	d050      	beq.n	8007966 <HAL_TIM_Base_Init+0xf6>
 80078c4:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80078c8:	4563      	cmp	r3, ip
 80078ca:	d04c      	beq.n	8007966 <HAL_TIM_Base_Init+0xf6>
 80078cc:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80078d0:	4563      	cmp	r3, ip
 80078d2:	d012      	beq.n	80078fa <HAL_TIM_Base_Init+0x8a>
 80078d4:	f1be 0f00 	cmp.w	lr, #0
 80078d8:	d10f      	bne.n	80078fa <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078da:	4d34      	ldr	r5, [pc, #208]	@ (80079ac <HAL_TIM_Base_Init+0x13c>)
 80078dc:	4934      	ldr	r1, [pc, #208]	@ (80079b0 <HAL_TIM_Base_Init+0x140>)
 80078de:	428b      	cmp	r3, r1
 80078e0:	bf18      	it	ne
 80078e2:	42ab      	cmpne	r3, r5
 80078e4:	d043      	beq.n	800796e <HAL_TIM_Base_Init+0xfe>
 80078e6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80078ea:	428b      	cmp	r3, r1
 80078ec:	d03f      	beq.n	800796e <HAL_TIM_Base_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078f2:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80078f4:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078f6:	4310      	orrs	r0, r2

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078f8:	e014      	b.n	8007924 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 80078fa:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078fc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007900:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8007904:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007906:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007908:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 800790a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800790e:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007912:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007916:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007918:	b911      	cbnz	r1, 8007920 <HAL_TIM_Base_Init+0xb0>
 800791a:	f1be 0f00 	cmp.w	lr, #0
 800791e:	d02f      	beq.n	8007980 <HAL_TIM_Base_Init+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007920:	6962      	ldr	r2, [r4, #20]
 8007922:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007924:	6819      	ldr	r1, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007926:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007928:	f041 0104 	orr.w	r1, r1, #4
 800792c:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 800792e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007930:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8007932:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007934:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007938:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 800793c:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 8007940:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 8007944:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 8007948:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 800794c:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007950:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 8007954:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8007958:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 800795c:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007960:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 8007964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007966:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800796a:	68a1      	ldr	r1, [r4, #8]
 800796c:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800796e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007970:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007974:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007976:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8007978:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800797a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800797e:	4310      	orrs	r0, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007980:	490c      	ldr	r1, [pc, #48]	@ (80079b4 <HAL_TIM_Base_Init+0x144>)
 8007982:	4a0a      	ldr	r2, [pc, #40]	@ (80079ac <HAL_TIM_Base_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007984:	4293      	cmp	r3, r2
 8007986:	bf18      	it	ne
 8007988:	428b      	cmpne	r3, r1
 800798a:	d0c9      	beq.n	8007920 <HAL_TIM_Base_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800798c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007990:	4293      	cmp	r3, r2
 8007992:	d0c5      	beq.n	8007920 <HAL_TIM_Base_Init+0xb0>
 8007994:	e7c6      	b.n	8007924 <HAL_TIM_Base_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 8007996:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800799a:	f7fa fbc3 	bl	8002124 <HAL_TIM_Base_MspInit>
 800799e:	e773      	b.n	8007888 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 80079a0:	2001      	movs	r0, #1
}
 80079a2:	4770      	bx	lr
 80079a4:	40010000 	.word	0x40010000
 80079a8:	40010400 	.word	0x40010400
 80079ac:	40014000 	.word	0x40014000
 80079b0:	40014400 	.word	0x40014400
 80079b4:	40014800 	.word	0x40014800
 80079b8:	40000400 	.word	0x40000400

080079bc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80079bc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d139      	bne.n	8007a38 <HAL_TIM_Base_Start+0x7c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c4:	6802      	ldr	r2, [r0, #0]
 80079c6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a3c <HAL_TIM_Base_Start+0x80>)
 80079c8:	491d      	ldr	r1, [pc, #116]	@ (8007a40 <HAL_TIM_Base_Start+0x84>)
 80079ca:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80079ce:	bf18      	it	ne
 80079d0:	429a      	cmpne	r2, r3
{
 80079d2:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079d4:	bf0c      	ite	eq
 80079d6:	2301      	moveq	r3, #1
 80079d8:	2300      	movne	r3, #0
 80079da:	4d1a      	ldr	r5, [pc, #104]	@ (8007a44 <HAL_TIM_Base_Start+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 80079dc:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079de:	42aa      	cmp	r2, r5
 80079e0:	bf08      	it	eq
 80079e2:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80079e6:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ea:	4c17      	ldr	r4, [pc, #92]	@ (8007a48 <HAL_TIM_Base_Start+0x8c>)
 80079ec:	428a      	cmp	r2, r1
 80079ee:	bf08      	it	eq
 80079f0:	f043 0301 	orreq.w	r3, r3, #1
 80079f4:	4815      	ldr	r0, [pc, #84]	@ (8007a4c <HAL_TIM_Base_Start+0x90>)
 80079f6:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80079fa:	42a2      	cmp	r2, r4
 80079fc:	bf08      	it	eq
 80079fe:	f043 0301 	orreq.w	r3, r3, #1
 8007a02:	4282      	cmp	r2, r0
 8007a04:	bf08      	it	eq
 8007a06:	f043 0301 	orreq.w	r3, r3, #1
 8007a0a:	428a      	cmp	r2, r1
 8007a0c:	bf08      	it	eq
 8007a0e:	f043 0301 	orreq.w	r3, r3, #1
 8007a12:	b913      	cbnz	r3, 8007a1a <HAL_TIM_Base_Start+0x5e>
 8007a14:	4b0e      	ldr	r3, [pc, #56]	@ (8007a50 <HAL_TIM_Base_Start+0x94>)
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d107      	bne.n	8007a2a <HAL_TIM_Base_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a1a:	6891      	ldr	r1, [r2, #8]
 8007a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007a54 <HAL_TIM_Base_Start+0x98>)
 8007a1e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a20:	2b06      	cmp	r3, #6
 8007a22:	d006      	beq.n	8007a32 <HAL_TIM_Base_Start+0x76>
 8007a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a28:	d003      	beq.n	8007a32 <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007a32:	2000      	movs	r0, #0
}
 8007a34:	bc30      	pop	{r4, r5}
 8007a36:	4770      	bx	lr
    return HAL_ERROR;
 8007a38:	2001      	movs	r0, #1
}
 8007a3a:	4770      	bx	lr
 8007a3c:	40010000 	.word	0x40010000
 8007a40:	40000800 	.word	0x40000800
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000c00 	.word	0x40000c00
 8007a4c:	40010400 	.word	0x40010400
 8007a50:	40014000 	.word	0x40014000
 8007a54:	00010007 	.word	0x00010007

08007a58 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007a58:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8007a5c:	2a01      	cmp	r2, #1
 8007a5e:	d06d      	beq.n	8007b3c <HAL_TIM_ConfigClockSource+0xe4>
  tmpsmcr = htim->Instance->SMCR;
 8007a60:	6802      	ldr	r2, [r0, #0]
 8007a62:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8007a64:	2001      	movs	r0, #1
{
 8007a66:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8007a68:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8007a6a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007a6e:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a72:	4c59      	ldr	r4, [pc, #356]	@ (8007bd8 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr = htim->Instance->SMCR;
 8007a74:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a76:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8007a78:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007a7a:	680c      	ldr	r4, [r1, #0]
 8007a7c:	2c70      	cmp	r4, #112	@ 0x70
 8007a7e:	f000 8087 	beq.w	8007b90 <HAL_TIM_ConfigClockSource+0x138>
 8007a82:	d825      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x78>
 8007a84:	2c50      	cmp	r4, #80	@ 0x50
 8007a86:	d05b      	beq.n	8007b40 <HAL_TIM_ConfigClockSource+0xe8>
 8007a88:	d82b      	bhi.n	8007ae2 <HAL_TIM_ConfigClockSource+0x8a>
 8007a8a:	2c40      	cmp	r4, #64	@ 0x40
 8007a8c:	f040 8090 	bne.w	8007bb0 <HAL_TIM_ConfigClockSource+0x158>
                               sClockSourceConfig->ClockPolarity,
 8007a90:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007a92:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a94:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a96:	6a10      	ldr	r0, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a98:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a9c:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8007aa0:	430c      	orrs	r4, r1
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007aa2:	494e      	ldr	r1, [pc, #312]	@ (8007bdc <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aa4:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aa6:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aa8:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aac:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007ab0:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8007ab2:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007ab4:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ab6:	4001      	ands	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ab8:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007abc:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007abe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007ac0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8007ac2:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8007ac4:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8007acc:	bc30      	pop	{r4, r5}
 8007ace:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007ad0:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8007ad4:	d04c      	beq.n	8007b70 <HAL_TIM_ConfigClockSource+0x118>
 8007ad6:	d81f      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0xc0>
 8007ad8:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 8007adc:	bf18      	it	ne
 8007ade:	2001      	movne	r0, #1
 8007ae0:	e7ee      	b.n	8007ac0 <HAL_TIM_ConfigClockSource+0x68>
 8007ae2:	2c60      	cmp	r4, #96	@ 0x60
 8007ae4:	d1ec      	bne.n	8007ac0 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 8007ae6:	6a10      	ldr	r0, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8007ae8:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aea:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
                               sClockSourceConfig->ClockFilter);
 8007aee:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007af0:	493a      	ldr	r1, [pc, #232]	@ (8007bdc <HAL_TIM_ConfigClockSource+0x184>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8007af2:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007af6:	6a14      	ldr	r4, [r2, #32]
 8007af8:	f024 0410 	bic.w	r4, r4, #16
 8007afc:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007afe:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b00:	f424 4470 	bic.w	r4, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b04:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007b08:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 8007b0a:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007b0c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b0e:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b10:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8007b14:	6091      	str	r1, [r2, #8]
}
 8007b16:	e7d2      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8007b18:	4931      	ldr	r1, [pc, #196]	@ (8007be0 <HAL_TIM_ConfigClockSource+0x188>)
 8007b1a:	428c      	cmp	r4, r1
 8007b1c:	d006      	beq.n	8007b2c <HAL_TIM_ConfigClockSource+0xd4>
 8007b1e:	d94f      	bls.n	8007bc0 <HAL_TIM_ConfigClockSource+0x168>
 8007b20:	4930      	ldr	r1, [pc, #192]	@ (8007be4 <HAL_TIM_ConfigClockSource+0x18c>)
 8007b22:	428c      	cmp	r4, r1
 8007b24:	d002      	beq.n	8007b2c <HAL_TIM_ConfigClockSource+0xd4>
 8007b26:	3110      	adds	r1, #16
 8007b28:	428c      	cmp	r4, r1
 8007b2a:	d1c9      	bne.n	8007ac0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8007b2c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b2e:	492b      	ldr	r1, [pc, #172]	@ (8007bdc <HAL_TIM_ConfigClockSource+0x184>)
 8007b30:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b32:	4321      	orrs	r1, r4
 8007b34:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8007b38:	6091      	str	r1, [r2, #8]
}
 8007b3a:	e7c0      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8007b3c:	2002      	movs	r0, #2
}
 8007b3e:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8007b40:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007b42:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007b44:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b46:	6a10      	ldr	r0, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b48:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b4c:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8007b50:	430c      	orrs	r4, r1
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b52:	4922      	ldr	r1, [pc, #136]	@ (8007bdc <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b54:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b56:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b58:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b5c:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007b60:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8007b62:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007b64:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b66:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b68:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8007b6c:	6091      	str	r1, [r2, #8]
}
 8007b6e:	e7a6      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b70:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007b74:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b76:	4328      	orrs	r0, r5
 8007b78:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b7a:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b7e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8007b82:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b84:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b86:	6891      	ldr	r1, [r2, #8]
 8007b88:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8007b8c:	6091      	str	r1, [r2, #8]
      break;
 8007b8e:	e796      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b90:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007b94:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b96:	4328      	orrs	r0, r5
 8007b98:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b9a:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b9e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8007ba2:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8007ba4:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007ba6:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ba8:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007bac:	6091      	str	r1, [r2, #8]
      break;
 8007bae:	e786      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8007bb0:	d886      	bhi.n	8007ac0 <HAL_TIM_ConfigClockSource+0x68>
 8007bb2:	2c20      	cmp	r4, #32
 8007bb4:	d0ba      	beq.n	8007b2c <HAL_TIM_ConfigClockSource+0xd4>
 8007bb6:	d80a      	bhi.n	8007bce <HAL_TIM_ConfigClockSource+0x176>
 8007bb8:	f034 0110 	bics.w	r1, r4, #16
 8007bbc:	d180      	bne.n	8007ac0 <HAL_TIM_ConfigClockSource+0x68>
 8007bbe:	e7b5      	b.n	8007b2c <HAL_TIM_ConfigClockSource+0xd4>
 8007bc0:	f024 0110 	bic.w	r1, r4, #16
 8007bc4:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007bc8:	f47f af7a 	bne.w	8007ac0 <HAL_TIM_ConfigClockSource+0x68>
 8007bcc:	e7ae      	b.n	8007b2c <HAL_TIM_ConfigClockSource+0xd4>
 8007bce:	2c30      	cmp	r4, #48	@ 0x30
 8007bd0:	d0ac      	beq.n	8007b2c <HAL_TIM_ConfigClockSource+0xd4>
      status = HAL_ERROR;
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	e774      	b.n	8007ac0 <HAL_TIM_ConfigClockSource+0x68>
 8007bd6:	bf00      	nop
 8007bd8:	ffce0088 	.word	0xffce0088
 8007bdc:	ffcfff8f 	.word	0xffcfff8f
 8007be0:	00100020 	.word	0x00100020
 8007be4:	00100030 	.word	0x00100030

08007be8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007be8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d04b      	beq.n	8007c88 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bf0:	6803      	ldr	r3, [r0, #0]
 8007bf2:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf4:	2002      	movs	r0, #2
{
 8007bf6:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bf8:	4d24      	ldr	r5, [pc, #144]	@ (8007c8c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfa:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bfe:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8007c00:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007c02:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c04:	d029      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8007c06:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c0a:	42ab      	cmp	r3, r5
 8007c0c:	d025      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c0e:	4d20      	ldr	r5, [pc, #128]	@ (8007c90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c10:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c14:	42ab      	cmp	r3, r5
 8007c16:	bf18      	it	ne
 8007c18:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8007c1c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c20:	bf0c      	ite	eq
 8007c22:	f04f 0c01 	moveq.w	ip, #1
 8007c26:	f04f 0c00 	movne.w	ip, #0
 8007c2a:	42ab      	cmp	r3, r5
 8007c2c:	bf08      	it	eq
 8007c2e:	f04c 0c01 	orreq.w	ip, ip, #1
 8007c32:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c36:	42ab      	cmp	r3, r5
 8007c38:	bf08      	it	eq
 8007c3a:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c3e:	680d      	ldr	r5, [r1, #0]
 8007c40:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c42:	4d14      	ldr	r5, [pc, #80]	@ (8007c94 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8007c44:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c46:	42ab      	cmp	r3, r5
 8007c48:	bf14      	ite	ne
 8007c4a:	4660      	movne	r0, ip
 8007c4c:	f04c 0001 	orreq.w	r0, ip, #1
 8007c50:	b960      	cbnz	r0, 8007c6c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007c52:	4811      	ldr	r0, [pc, #68]	@ (8007c98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c54:	4283      	cmp	r3, r0
 8007c56:	d009      	beq.n	8007c6c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007c58:	e00d      	b.n	8007c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c5a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c5c:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c60:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c62:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c64:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c68:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8007c6a:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c6c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c6e:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c72:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c74:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007c76:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007c78:	2101      	movs	r1, #1

  return HAL_OK;
 8007c7a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8007c7c:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007c80:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8007c84:	bc30      	pop	{r4, r5}
 8007c86:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007c88:	2002      	movs	r0, #2
}
 8007c8a:	4770      	bx	lr
 8007c8c:	40010000 	.word	0x40010000
 8007c90:	40000400 	.word	0x40000400
 8007c94:	40001800 	.word	0x40001800
 8007c98:	40014000 	.word	0x40014000

08007c9c <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c9c:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d15d      	bne.n	8007d60 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	d060      	beq.n	8007d6a <HAL_UART_Receive_IT+0xce>
{
 8007ca8:	b430      	push	{r4, r5}
    if ((pData == NULL) || (Size == 0U))
 8007caa:	fab2 f482 	clz	r4, r2
 8007cae:	0964      	lsrs	r4, r4, #5
 8007cb0:	2a00      	cmp	r2, #0
 8007cb2:	d057      	beq.n	8007d64 <HAL_UART_Receive_IT+0xc8>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cb4:	6803      	ldr	r3, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb6:	66c4      	str	r4, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cb8:	4c57      	ldr	r4, [pc, #348]	@ (8007e18 <HAL_UART_Receive_IT+0x17c>)
 8007cba:	42a3      	cmp	r3, r4
 8007cbc:	d002      	beq.n	8007cc4 <HAL_UART_Receive_IT+0x28>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cbe:	685c      	ldr	r4, [r3, #4]
 8007cc0:	0224      	lsls	r4, r4, #8
 8007cc2:	d43c      	bmi.n	8007d3e <HAL_UART_Receive_IT+0xa2>
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr  = pData;
 8007cc4:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;
 8007cc6:	2400      	movs	r4, #0

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007cc8:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 8007cca:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  UART_MASK_COMPUTATION(huart);
 8007cce:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
  huart->RxXferCount = Size;
 8007cd2:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007cd6:	6744      	str	r4, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8007cd8:	d066      	beq.n	8007da8 <HAL_UART_Receive_IT+0x10c>
 8007cda:	2900      	cmp	r1, #0
 8007cdc:	d147      	bne.n	8007d6e <HAL_UART_Receive_IT+0xd2>
 8007cde:	6901      	ldr	r1, [r0, #16]
 8007ce0:	2900      	cmp	r1, #0
 8007ce2:	bf0c      	ite	eq
 8007ce4:	24ff      	moveq	r4, #255	@ 0xff
 8007ce6:	247f      	movne	r4, #127	@ 0x7f

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce8:	2100      	movs	r1, #0
  UART_MASK_COMPUTATION(huart);
 8007cea:	f8a0 4060 	strh.w	r4, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cee:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cf2:	2122      	movs	r1, #34	@ 0x22
 8007cf4:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	f103 0108 	add.w	r1, r3, #8
 8007cfc:	e851 1f00 	ldrex	r1, [r1]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d00:	f041 0101 	orr.w	r1, r1, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	f103 0508 	add.w	r5, r3, #8
 8007d08:	e845 1400 	strex	r4, r1, [r5]
 8007d0c:	2c00      	cmp	r4, #0
 8007d0e:	d1f3      	bne.n	8007cf8 <HAL_UART_Receive_IT+0x5c>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007d10:	6e41      	ldr	r1, [r0, #100]	@ 0x64
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d12:	6885      	ldr	r5, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007d14:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d18:	6904      	ldr	r4, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007d1a:	d04c      	beq.n	8007db6 <HAL_UART_Receive_IT+0x11a>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d1c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8007d20:	d02e      	beq.n	8007d80 <HAL_UART_Receive_IT+0xe4>
 8007d22:	4a3e      	ldr	r2, [pc, #248]	@ (8007e1c <HAL_UART_Receive_IT+0x180>)
 8007d24:	6742      	str	r2, [r0, #116]	@ 0x74
    {
      huart->RxISR = UART_RxISR_8BIT;
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d26:	b374      	cbz	r4, 8007d86 <HAL_UART_Receive_IT+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	e853 2f00 	ldrex	r2, [r3]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d2c:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	e843 2100 	strex	r1, r2, [r3]
 8007d34:	2900      	cmp	r1, #0
 8007d36:	d1f7      	bne.n	8007d28 <HAL_UART_Receive_IT+0x8c>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d38:	2000      	movs	r0, #0
}
 8007d3a:	bc30      	pop	{r4, r5}
 8007d3c:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	e853 4f00 	ldrex	r4, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d42:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	e843 4500 	strex	r5, r4, [r3]
 8007d4a:	2d00      	cmp	r5, #0
 8007d4c:	d0ba      	beq.n	8007cc4 <HAL_UART_Receive_IT+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	e853 4f00 	ldrex	r4, [r3]
 8007d52:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	e843 4500 	strex	r5, r4, [r3]
 8007d5a:	2d00      	cmp	r5, #0
 8007d5c:	d1ef      	bne.n	8007d3e <HAL_UART_Receive_IT+0xa2>
 8007d5e:	e7b1      	b.n	8007cc4 <HAL_UART_Receive_IT+0x28>
    return HAL_BUSY;
 8007d60:	2002      	movs	r0, #2
 8007d62:	4770      	bx	lr
      return HAL_ERROR;
 8007d64:	2001      	movs	r0, #1
}
 8007d66:	bc30      	pop	{r4, r5}
 8007d68:	4770      	bx	lr
      return HAL_ERROR;
 8007d6a:	2001      	movs	r0, #1
}
 8007d6c:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8007d6e:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8007d72:	d1b9      	bne.n	8007ce8 <HAL_UART_Receive_IT+0x4c>
 8007d74:	6901      	ldr	r1, [r0, #16]
 8007d76:	2900      	cmp	r1, #0
 8007d78:	bf0c      	ite	eq
 8007d7a:	247f      	moveq	r4, #127	@ 0x7f
 8007d7c:	243f      	movne	r4, #63	@ 0x3f
 8007d7e:	e7b3      	b.n	8007ce8 <HAL_UART_Receive_IT+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d80:	bb84      	cbnz	r4, 8007de4 <HAL_UART_Receive_IT+0x148>
 8007d82:	4a27      	ldr	r2, [pc, #156]	@ (8007e20 <HAL_UART_Receive_IT+0x184>)
 8007d84:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	e853 2f00 	ldrex	r2, [r3]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d8a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	e843 2100 	strex	r1, r2, [r3]
 8007d92:	2900      	cmp	r1, #0
 8007d94:	d0d0      	beq.n	8007d38 <HAL_UART_Receive_IT+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	e853 2f00 	ldrex	r2, [r3]
 8007d9a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	e843 2100 	strex	r1, r2, [r3]
 8007da2:	2900      	cmp	r1, #0
 8007da4:	d1ef      	bne.n	8007d86 <HAL_UART_Receive_IT+0xea>
 8007da6:	e7c7      	b.n	8007d38 <HAL_UART_Receive_IT+0x9c>
  UART_MASK_COMPUTATION(huart);
 8007da8:	6901      	ldr	r1, [r0, #16]
 8007daa:	f240 14ff 	movw	r4, #511	@ 0x1ff
 8007dae:	2900      	cmp	r1, #0
 8007db0:	bf18      	it	ne
 8007db2:	24ff      	movne	r4, #255	@ 0xff
 8007db4:	e798      	b.n	8007ce8 <HAL_UART_Receive_IT+0x4c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007db6:	f8b0 1068 	ldrh.w	r1, [r0, #104]	@ 0x68
 8007dba:	4291      	cmp	r1, r2
 8007dbc:	d8ae      	bhi.n	8007d1c <HAL_UART_Receive_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dbe:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8007dc2:	d012      	beq.n	8007dea <HAL_UART_Receive_IT+0x14e>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007dc4:	4a17      	ldr	r2, [pc, #92]	@ (8007e24 <HAL_UART_Receive_IT+0x188>)
 8007dc6:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007dc8:	b994      	cbnz	r4, 8007df0 <HAL_UART_Receive_IT+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	f103 0208 	add.w	r2, r3, #8
 8007dce:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007dd2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	f103 0008 	add.w	r0, r3, #8
 8007dda:	e840 2100 	strex	r1, r2, [r0]
 8007dde:	2900      	cmp	r1, #0
 8007de0:	d1f3      	bne.n	8007dca <HAL_UART_Receive_IT+0x12e>
 8007de2:	e7a9      	b.n	8007d38 <HAL_UART_Receive_IT+0x9c>
 8007de4:	4a0d      	ldr	r2, [pc, #52]	@ (8007e1c <HAL_UART_Receive_IT+0x180>)
 8007de6:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007de8:	e79e      	b.n	8007d28 <HAL_UART_Receive_IT+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dea:	b194      	cbz	r4, 8007e12 <HAL_UART_Receive_IT+0x176>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007dec:	4a0d      	ldr	r2, [pc, #52]	@ (8007e24 <HAL_UART_Receive_IT+0x188>)
 8007dee:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	e843 2100 	strex	r1, r2, [r3]
 8007dfc:	2900      	cmp	r1, #0
 8007dfe:	d0e4      	beq.n	8007dca <HAL_UART_Receive_IT+0x12e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	e853 2f00 	ldrex	r2, [r3]
 8007e04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	e843 2100 	strex	r1, r2, [r3]
 8007e0c:	2900      	cmp	r1, #0
 8007e0e:	d1ef      	bne.n	8007df0 <HAL_UART_Receive_IT+0x154>
 8007e10:	e7db      	b.n	8007dca <HAL_UART_Receive_IT+0x12e>
 8007e12:	4a05      	ldr	r2, [pc, #20]	@ (8007e28 <HAL_UART_Receive_IT+0x18c>)
 8007e14:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007e16:	e7d8      	b.n	8007dca <HAL_UART_Receive_IT+0x12e>
 8007e18:	58000c00 	.word	0x58000c00
 8007e1c:	080082d5 	.word	0x080082d5
 8007e20:	0800828d 	.word	0x0800828d
 8007e24:	08008319 	.word	0x08008319
 8007e28:	08008541 	.word	0x08008541

08007e2c <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop

08007e30 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop

08007e34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e34:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e36:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e3e:	f7ff fff7 	bl	8007e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e42:	bd08      	pop	{r3, pc}

08007e44 <HAL_UARTEx_RxEventCallback>:
}
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop

08007e48 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e48:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e4a:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e4e:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 8007e50:	ea12 0f0c 	tst.w	r2, ip
{
 8007e54:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e56:	681d      	ldr	r5, [r3, #0]
{
 8007e58:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e5a:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 8007e5c:	d145      	bne.n	8007eea <HAL_UART_IRQHandler+0xa2>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e5e:	0696      	lsls	r6, r2, #26
 8007e60:	d507      	bpl.n	8007e72 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e62:	f005 0c20 	and.w	ip, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e66:	f001 5680 	and.w	r6, r1, #268435456	@ 0x10000000
 8007e6a:	ea5c 0c06 	orrs.w	ip, ip, r6
 8007e6e:	f040 812a 	bne.w	80080c6 <HAL_UART_IRQHandler+0x27e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e72:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8007e74:	2801      	cmp	r0, #1
 8007e76:	f000 80cd 	beq.w	8008014 <HAL_UART_IRQHandler+0x1cc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e7a:	02d0      	lsls	r0, r2, #11
 8007e7c:	d41d      	bmi.n	8007eba <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e7e:	0610      	lsls	r0, r2, #24
 8007e80:	d506      	bpl.n	8007e90 <HAL_UART_IRQHandler+0x48>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e82:	f401 0100 	and.w	r1, r1, #8388608	@ 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e86:	f005 0080 	and.w	r0, r5, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e8a:	4308      	orrs	r0, r1
 8007e8c:	f040 8122 	bne.w	80080d4 <HAL_UART_IRQHandler+0x28c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e90:	0651      	lsls	r1, r2, #25
 8007e92:	d51c      	bpl.n	8007ece <HAL_UART_IRQHandler+0x86>
 8007e94:	066e      	lsls	r6, r5, #25
 8007e96:	d51a      	bpl.n	8007ece <HAL_UART_IRQHandler+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea0:	e843 2100 	strex	r1, r2, [r3]
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	d1f7      	bne.n	8007e98 <HAL_UART_IRQHandler+0x50>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ea8:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007eaa:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007eac:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8007eae:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->TxISR = NULL;
 8007eb2:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 8007eb4:	f7ff ffba 	bl	8007e2c <HAL_UART_TxCpltCallback>
}
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007eba:	024e      	lsls	r6, r1, #9
 8007ebc:	d5df      	bpl.n	8007e7e <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ebe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8007ec2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ec4:	621a      	str	r2, [r3, #32]
}
 8007ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8007eca:	f000 bfbf 	b.w	8008e4c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ece:	0210      	lsls	r0, r2, #8
 8007ed0:	d502      	bpl.n	8007ed8 <HAL_UART_IRQHandler+0x90>
 8007ed2:	0069      	lsls	r1, r5, #1
 8007ed4:	f100 813d 	bmi.w	8008152 <HAL_UART_IRQHandler+0x30a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ed8:	01d3      	lsls	r3, r2, #7
 8007eda:	d5ed      	bpl.n	8007eb8 <HAL_UART_IRQHandler+0x70>
 8007edc:	2d00      	cmp	r5, #0
 8007ede:	daeb      	bge.n	8007eb8 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ee0:	4620      	mov	r0, r4
}
 8007ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ee6:	f000 bfb3 	b.w	8008e50 <HAL_UARTEx_RxFifoFullCallback>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007eea:	48b9      	ldr	r0, [pc, #740]	@ (80081d0 <HAL_UART_IRQHandler+0x388>)
 8007eec:	4008      	ands	r0, r1
 8007eee:	f040 8125 	bne.w	800813c <HAL_UART_IRQHandler+0x2f4>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ef2:	4eb8      	ldr	r6, [pc, #736]	@ (80081d4 <HAL_UART_IRQHandler+0x38c>)
 8007ef4:	4235      	tst	r5, r6
 8007ef6:	d0bc      	beq.n	8007e72 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ef8:	07d6      	lsls	r6, r2, #31
 8007efa:	d51a      	bpl.n	8007f32 <HAL_UART_IRQHandler+0xea>
 8007efc:	05ee      	lsls	r6, r5, #23
 8007efe:	f140 8103 	bpl.w	8008108 <HAL_UART_IRQHandler+0x2c0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f02:	2601      	movs	r6, #1
 8007f04:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f06:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8007f0a:	f046 0601 	orr.w	r6, r6, #1
 8007f0e:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f12:	0796      	lsls	r6, r2, #30
 8007f14:	f140 80fb 	bpl.w	800810e <HAL_UART_IRQHandler+0x2c6>
 8007f18:	07ce      	lsls	r6, r1, #31
 8007f1a:	d50a      	bpl.n	8007f32 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f1c:	2602      	movs	r6, #2
 8007f1e:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f20:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8007f24:	f046 0604 	orr.w	r6, r6, #4
 8007f28:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f2c:	0756      	lsls	r6, r2, #29
 8007f2e:	f100 80f4 	bmi.w	800811a <HAL_UART_IRQHandler+0x2d2>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f32:	0716      	lsls	r6, r2, #28
 8007f34:	d50b      	bpl.n	8007f4e <HAL_UART_IRQHandler+0x106>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f36:	f005 0620 	and.w	r6, r5, #32
 8007f3a:	4306      	orrs	r6, r0
 8007f3c:	d007      	beq.n	8007f4e <HAL_UART_IRQHandler+0x106>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f3e:	2008      	movs	r0, #8
 8007f40:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f42:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007f46:	f040 0008 	orr.w	r0, r0, #8
 8007f4a:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f4e:	0510      	lsls	r0, r2, #20
 8007f50:	d50a      	bpl.n	8007f68 <HAL_UART_IRQHandler+0x120>
 8007f52:	016e      	lsls	r6, r5, #5
 8007f54:	d508      	bpl.n	8007f68 <HAL_UART_IRQHandler+0x120>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f56:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007f5a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f5c:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007f60:	f040 0020 	orr.w	r0, r0, #32
 8007f64:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f68:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d0a3      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x70>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f70:	0690      	lsls	r0, r2, #26
 8007f72:	d506      	bpl.n	8007f82 <HAL_UART_IRQHandler+0x13a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f74:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f78:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8007f7c:	430d      	orrs	r5, r1
 8007f7e:	f040 80d5 	bne.w	800812c <HAL_UART_IRQHandler+0x2e4>
      errorcode = huart->ErrorCode;
 8007f82:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f86:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f88:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f8c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007f90:	ea52 0501 	orrs.w	r5, r2, r1
 8007f94:	f000 80e2 	beq.w	800815c <HAL_UART_IRQHandler+0x314>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f9c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	e843 2100 	strex	r1, r2, [r3]
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	d1f7      	bne.n	8007f98 <HAL_UART_IRQHandler+0x150>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fa8:	488b      	ldr	r0, [pc, #556]	@ (80081d8 <HAL_UART_IRQHandler+0x390>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	f103 0208 	add.w	r2, r3, #8
 8007fae:	e852 2f00 	ldrex	r2, [r2]
 8007fb2:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	f103 0508 	add.w	r5, r3, #8
 8007fb8:	e845 2100 	strex	r1, r2, [r5]
 8007fbc:	2900      	cmp	r1, #0
 8007fbe:	d1f4      	bne.n	8007faa <HAL_UART_IRQHandler+0x162>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007fc2:	2a01      	cmp	r2, #1
 8007fc4:	f000 808e 	beq.w	80080e4 <HAL_UART_IRQHandler+0x29c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007fca:	2120      	movs	r1, #32
 8007fcc:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd0:	66e2      	str	r2, [r4, #108]	@ 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd2:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8007fd4:	6762      	str	r2, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd6:	064a      	lsls	r2, r1, #25
 8007fd8:	f140 80b7 	bpl.w	800814a <HAL_UART_IRQHandler+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	f103 0208 	add.w	r2, r3, #8
 8007fe0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe8:	f103 0008 	add.w	r0, r3, #8
 8007fec:	e840 2100 	strex	r1, r2, [r0]
 8007ff0:	2900      	cmp	r1, #0
 8007ff2:	d1f3      	bne.n	8007fdc <HAL_UART_IRQHandler+0x194>
          if (huart->hdmarx != NULL)
 8007ff4:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	f000 80a6 	beq.w	800814a <HAL_UART_IRQHandler+0x302>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ffe:	4b77      	ldr	r3, [pc, #476]	@ (80081dc <HAL_UART_IRQHandler+0x394>)
 8008000:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008002:	f7fc fd6f 	bl	8004ae4 <HAL_DMA_Abort_IT>
 8008006:	2800      	cmp	r0, #0
 8008008:	f43f af56 	beq.w	8007eb8 <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800800c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008010:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008012:	e05c      	b.n	80080ce <HAL_UART_IRQHandler+0x286>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008014:	06d6      	lsls	r6, r2, #27
 8008016:	f57f af30 	bpl.w	8007e7a <HAL_UART_IRQHandler+0x32>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800801a:	06e8      	lsls	r0, r5, #27
 800801c:	f57f af2d 	bpl.w	8007e7a <HAL_UART_IRQHandler+0x32>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008020:	2210      	movs	r2, #16
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008022:	f8b4 505c 	ldrh.w	r5, [r4, #92]	@ 0x5c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008026:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	0656      	lsls	r6, r2, #25
 800802c:	f140 809c 	bpl.w	8008168 <HAL_UART_IRQHandler+0x320>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008030:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008034:	6801      	ldr	r1, [r0, #0]
 8008036:	6849      	ldr	r1, [r1, #4]
 8008038:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800803a:	2900      	cmp	r1, #0
 800803c:	f000 80d0 	beq.w	80081e0 <HAL_UART_IRQHandler+0x398>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008040:	42a9      	cmp	r1, r5
 8008042:	f080 80cd 	bcs.w	80081e0 <HAL_UART_IRQHandler+0x398>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008046:	69c2      	ldr	r2, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 8008048:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800804c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8008050:	d02f      	beq.n	80080b2 <HAL_UART_IRQHandler+0x26a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008056:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	e843 2100 	strex	r1, r2, [r3]
 800805e:	2900      	cmp	r1, #0
 8008060:	d1f7      	bne.n	8008052 <HAL_UART_IRQHandler+0x20a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	f103 0208 	add.w	r2, r3, #8
 8008066:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800806a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	f103 0508 	add.w	r5, r3, #8
 8008072:	e845 2100 	strex	r1, r2, [r5]
 8008076:	2900      	cmp	r1, #0
 8008078:	d1f3      	bne.n	8008062 <HAL_UART_IRQHandler+0x21a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	f103 0208 	add.w	r2, r3, #8
 800807e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	f103 0508 	add.w	r5, r3, #8
 800808a:	e845 2100 	strex	r1, r2, [r5]
 800808e:	2900      	cmp	r1, #0
 8008090:	d1f3      	bne.n	800807a <HAL_UART_IRQHandler+0x232>
          huart->RxState = HAL_UART_STATE_READY;
 8008092:	2220      	movs	r2, #32
 8008094:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008098:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800809e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	e843 2100 	strex	r1, r2, [r3]
 80080a6:	2900      	cmp	r1, #0
 80080a8:	d1f7      	bne.n	800809a <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080aa:	f7fc fb65 	bl	8004778 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080ae:	f8b4 505c 	ldrh.w	r5, [r4, #92]	@ 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080b2:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080b4:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080b6:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080b8:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 80080bc:	1a69      	subs	r1, r5, r1
 80080be:	b289      	uxth	r1, r1
 80080c0:	f7ff fec0 	bl	8007e44 <HAL_UARTEx_RxEventCallback>
}
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80080c6:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f43f aef5 	beq.w	8007eb8 <HAL_UART_IRQHandler+0x70>
}
 80080ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080d2:	4718      	bx	r3
    if (huart->TxISR != NULL)
 80080d4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f43f aeee 	beq.w	8007eb8 <HAL_UART_IRQHandler+0x70>
      huart->TxISR(huart);
 80080dc:	4620      	mov	r0, r4
}
 80080de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80080e2:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080e8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	e843 2100 	strex	r1, r2, [r3]
 80080f0:	2900      	cmp	r1, #0
 80080f2:	f43f af69 	beq.w	8007fc8 <HAL_UART_IRQHandler+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	e853 2f00 	ldrex	r2, [r3]
 80080fa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	e843 2100 	strex	r1, r2, [r3]
 8008102:	2900      	cmp	r1, #0
 8008104:	d1ee      	bne.n	80080e4 <HAL_UART_IRQHandler+0x29c>
 8008106:	e75f      	b.n	8007fc8 <HAL_UART_IRQHandler+0x180>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008108:	0796      	lsls	r6, r2, #30
 800810a:	f53f af12 	bmi.w	8007f32 <HAL_UART_IRQHandler+0xea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800810e:	0756      	lsls	r6, r2, #29
 8008110:	f57f af0f 	bpl.w	8007f32 <HAL_UART_IRQHandler+0xea>
 8008114:	07ce      	lsls	r6, r1, #31
 8008116:	f57f af0c 	bpl.w	8007f32 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800811a:	2604      	movs	r6, #4
 800811c:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800811e:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8008122:	f046 0602 	orr.w	r6, r6, #2
 8008126:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 800812a:	e702      	b.n	8007f32 <HAL_UART_IRQHandler+0xea>
        if (huart->RxISR != NULL)
 800812c:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800812e:	2a00      	cmp	r2, #0
 8008130:	f43f af27 	beq.w	8007f82 <HAL_UART_IRQHandler+0x13a>
          huart->RxISR(huart);
 8008134:	4620      	mov	r0, r4
 8008136:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	e722      	b.n	8007f82 <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800813c:	07d6      	lsls	r6, r2, #31
 800813e:	f57f aee8 	bpl.w	8007f12 <HAL_UART_IRQHandler+0xca>
 8008142:	05ee      	lsls	r6, r5, #23
 8008144:	f57f aee5 	bpl.w	8007f12 <HAL_UART_IRQHandler+0xca>
 8008148:	e6db      	b.n	8007f02 <HAL_UART_IRQHandler+0xba>
            HAL_UART_ErrorCallback(huart);
 800814a:	4620      	mov	r0, r4
 800814c:	f7ff fe70 	bl	8007e30 <HAL_UART_ErrorCallback>
}
 8008150:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008152:	4620      	mov	r0, r4
}
 8008154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008158:	f000 be7c 	b.w	8008e54 <HAL_UARTEx_TxFifoEmptyCallback>
        HAL_UART_ErrorCallback(huart);
 800815c:	4620      	mov	r0, r4
 800815e:	f7ff fe67 	bl	8007e30 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008162:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 8008166:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008168:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 800816c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008170:	1a6d      	subs	r5, r5, r1
      if ((huart->RxXferCount > 0U)
 8008172:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008174:	b2a9      	uxth	r1, r5
          && (nb_rx_data > 0U))
 8008176:	2900      	cmp	r1, #0
 8008178:	f43f ae9e 	beq.w	8007eb8 <HAL_UART_IRQHandler+0x70>
 800817c:	2a00      	cmp	r2, #0
 800817e:	f43f ae9b 	beq.w	8007eb8 <HAL_UART_IRQHandler+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008186:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	e843 2000 	strex	r0, r2, [r3]
 800818e:	2800      	cmp	r0, #0
 8008190:	d1f7      	bne.n	8008182 <HAL_UART_IRQHandler+0x33a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008192:	4d11      	ldr	r5, [pc, #68]	@ (80081d8 <HAL_UART_IRQHandler+0x390>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008194:	f103 0208 	add.w	r2, r3, #8
 8008198:	e852 2f00 	ldrex	r2, [r2]
 800819c:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819e:	f103 0608 	add.w	r6, r3, #8
 80081a2:	e846 2000 	strex	r0, r2, [r6]
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d1f4      	bne.n	8008194 <HAL_UART_IRQHandler+0x34c>
        huart->RxState = HAL_UART_STATE_READY;
 80081aa:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 80081ac:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80081ae:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b2:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081bc:	e843 2000 	strex	r0, r2, [r3]
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d1f7      	bne.n	80081b4 <HAL_UART_IRQHandler+0x36c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081c4:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081c6:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081c8:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081ca:	f7ff fe3b 	bl	8007e44 <HAL_UARTEx_RxEventCallback>
}
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	10000001 	.word	0x10000001
 80081d4:	04000120 	.word	0x04000120
 80081d8:	effffffe 	.word	0xeffffffe
 80081dc:	08007e35 	.word	0x08007e35
        if (nb_remaining_rx_data == huart->RxXferSize)
 80081e0:	42a9      	cmp	r1, r5
 80081e2:	f47f ae69 	bne.w	8007eb8 <HAL_UART_IRQHandler+0x70>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80081e6:	69c3      	ldr	r3, [r0, #28]
 80081e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081ec:	d0ea      	beq.n	80081c4 <HAL_UART_IRQHandler+0x37c>
}
 80081ee:	bd70      	pop	{r4, r5, r6, pc}

080081f0 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 80081f0:	6803      	ldr	r3, [r0, #0]
 80081f2:	b510      	push	{r4, lr}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081f8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fc:	e843 2100 	strex	r1, r2, [r3]
 8008200:	2900      	cmp	r1, #0
 8008202:	d1f7      	bne.n	80081f4 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	f103 0208 	add.w	r2, r3, #8
 8008208:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	f103 0408 	add.w	r4, r3, #8
 8008214:	e844 2100 	strex	r1, r2, [r4]
 8008218:	2900      	cmp	r1, #0
 800821a:	d1f3      	bne.n	8008204 <UART_RxISR_16BIT.part.0+0x14>
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800821c:	4a1a      	ldr	r2, [pc, #104]	@ (8008288 <UART_RxISR_16BIT.part.0+0x98>)
      huart->RxState = HAL_UART_STATE_READY;
 800821e:	2420      	movs	r4, #32
      huart->RxISR = NULL;
 8008220:	6741      	str	r1, [r0, #116]	@ 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008222:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
 8008224:	f8c0 408c 	str.w	r4, [r0, #140]	@ 0x8c
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008228:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800822a:	d002      	beq.n	8008232 <UART_RxISR_16BIT.part.0+0x42>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	0211      	lsls	r1, r2, #8
 8008230:	d416      	bmi.n	8008260 <UART_RxISR_16BIT.part.0+0x70>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008232:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8008234:	2a01      	cmp	r2, #1
 8008236:	d124      	bne.n	8008282 <UART_RxISR_16BIT.part.0+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008238:	2200      	movs	r2, #0
 800823a:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823c:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008240:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008244:	e843 2100 	strex	r1, r2, [r3]
 8008248:	2900      	cmp	r1, #0
 800824a:	d1f7      	bne.n	800823c <UART_RxISR_16BIT.part.0+0x4c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800824c:	69da      	ldr	r2, [r3, #28]
 800824e:	06d2      	lsls	r2, r2, #27
 8008250:	d501      	bpl.n	8008256 <UART_RxISR_16BIT.part.0+0x66>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008252:	2210      	movs	r2, #16
 8008254:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008256:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800825a:	f7ff fdf3 	bl	8007e44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800825e:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008264:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008268:	e843 2100 	strex	r1, r2, [r3]
 800826c:	2900      	cmp	r1, #0
 800826e:	d0e0      	beq.n	8008232 <UART_RxISR_16BIT.part.0+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	e853 2f00 	ldrex	r2, [r3]
 8008274:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008278:	e843 2100 	strex	r1, r2, [r3]
 800827c:	2900      	cmp	r1, #0
 800827e:	d1ef      	bne.n	8008260 <UART_RxISR_16BIT.part.0+0x70>
 8008280:	e7d7      	b.n	8008232 <UART_RxISR_16BIT.part.0+0x42>
        HAL_UART_RxCpltCallback(huart);
 8008282:	f7f8 ff17 	bl	80010b4 <HAL_UART_RxCpltCallback>
}
 8008286:	bd10      	pop	{r4, pc}
 8008288:	58000c00 	.word	0x58000c00

0800828c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800828c:	b410      	push	{r4}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800828e:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 8008292:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008296:	2c22      	cmp	r4, #34	@ 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008298:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800829a:	d006      	beq.n	80082aa <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800829c:	6993      	ldr	r3, [r2, #24]
 800829e:	f043 0308 	orr.w	r3, r3, #8
 80082a2:	6193      	str	r3, [r2, #24]
  }
}
 80082a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a8:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80082ac:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 80082ae:	4011      	ands	r1, r2
 80082b0:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 80082b4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr += 2U;
 80082b8:	6584      	str	r4, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80082ba:	3a01      	subs	r2, #1
 80082bc:	b292      	uxth	r2, r2
 80082be:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 80082c2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1eb      	bne.n	80082a4 <UART_RxISR_16BIT+0x18>
}
 80082cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082d0:	f7ff bf8e 	b.w	80081f0 <UART_RxISR_16BIT.part.0>

080082d4 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082d4:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 80082d8:	f8b0 c060 	ldrh.w	ip, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082dc:	2922      	cmp	r1, #34	@ 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082de:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082e0:	d004      	beq.n	80082ec <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082e2:	6993      	ldr	r3, [r2, #24]
 80082e4:	f043 0308 	orr.w	r3, r3, #8
 80082e8:	6193      	str	r3, [r2, #24]
}
 80082ea:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80082ee:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80082f0:	ea02 020c 	and.w	r2, r2, ip
 80082f4:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 80082f6:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr++;
 80082fa:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80082fc:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 80082fe:	3101      	adds	r1, #1
    huart->RxXferCount--;
 8008300:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8008302:	6581      	str	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8008304:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8008308:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800830c:	b29b      	uxth	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1eb      	bne.n	80082ea <UART_RxISR_8BIT+0x16>
 8008312:	f7ff bf6d 	b.w	80081f0 <UART_RxISR_16BIT.part.0>
 8008316:	bf00      	nop

08008318 <UART_RxISR_8BIT_FIFOEN>:
{
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008318:	6803      	ldr	r3, [r0, #0]
{
 800831a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800831e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008320:	6819      	ldr	r1, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008322:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008324:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 8008328:	f8b0 9060 	ldrh.w	r9, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800832c:	2a22      	cmp	r2, #34	@ 0x22
 800832e:	d005      	beq.n	800833c <UART_RxISR_8BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008330:	699a      	ldr	r2, [r3, #24]
 8008332:	f042 0208 	orr.w	r2, r2, #8
 8008336:	619a      	str	r2, [r3, #24]
  }
}
 8008338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800833c:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8008340:	4604      	mov	r4, r0
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008342:	f401 7a80 	and.w	sl, r1, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008346:	f007 0701 	and.w	r7, r7, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 80d8 	beq.w	8008500 <UART_RxISR_8BIT_FIFOEN+0x1e8>
 8008350:	2f00      	cmp	r7, #0
 8008352:	f000 80a3 	beq.w	800849c <UART_RxISR_8BIT_FIFOEN+0x184>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008356:	2600      	movs	r6, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008358:	2704      	movs	r7, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800835a:	f04f 0802 	mov.w	r8, #2
 800835e:	e004      	b.n	800836a <UART_RxISR_8BIT_FIFOEN+0x52>
      if (huart->RxXferCount == 0U)
 8008360:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008364:	b29b      	uxth	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d03e      	beq.n	80083e8 <UART_RxISR_8BIT_FIFOEN+0xd0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800836a:	06ab      	lsls	r3, r5, #26
 800836c:	d573      	bpl.n	8008456 <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800836e:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008370:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008374:	ea03 0309 	and.w	r3, r3, r9
 8008378:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 800837a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800837e:	6823      	ldr	r3, [r4, #0]
      huart->RxXferCount--;
 8008380:	3a01      	subs	r2, #1
      huart->pRxBuffPtr++;
 8008382:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8008384:	b292      	uxth	r2, r2
      huart->pRxBuffPtr++;
 8008386:	3101      	adds	r1, #1
      huart->RxXferCount--;
 8008388:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800838c:	69dd      	ldr	r5, [r3, #28]
      huart->pRxBuffPtr++;
 800838e:	65a1      	str	r1, [r4, #88]	@ 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008390:	0768      	lsls	r0, r5, #29
 8008392:	d0e5      	beq.n	8008360 <UART_RxISR_8BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008394:	07e9      	lsls	r1, r5, #31
 8008396:	d50a      	bpl.n	80083ae <UART_RxISR_8BIT_FIFOEN+0x96>
 8008398:	f1ba 0f00 	cmp.w	sl, #0
 800839c:	d007      	beq.n	80083ae <UART_RxISR_8BIT_FIFOEN+0x96>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800839e:	2201      	movs	r2, #1
 80083a0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083a2:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80083a6:	f042 0201 	orr.w	r2, r2, #1
 80083aa:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083ae:	07aa      	lsls	r2, r5, #30
 80083b0:	d507      	bpl.n	80083c2 <UART_RxISR_8BIT_FIFOEN+0xaa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083b2:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083b6:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80083ba:	f042 0204 	orr.w	r2, r2, #4
 80083be:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083c2:	0768      	lsls	r0, r5, #29
 80083c4:	d506      	bpl.n	80083d4 <UART_RxISR_8BIT_FIFOEN+0xbc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083c6:	621f      	str	r7, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80083cc:	f043 0302 	orr.w	r3, r3, #2
 80083d0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0c1      	beq.n	8008360 <UART_RxISR_8BIT_FIFOEN+0x48>
          HAL_UART_ErrorCallback(huart);
 80083dc:	4620      	mov	r0, r4
 80083de:	f7ff fd27 	bl	8007e30 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e2:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 80083e6:	e7bb      	b.n	8008360 <UART_RxISR_8BIT_FIFOEN+0x48>
 80083e8:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	e843 2100 	strex	r1, r2, [r3]
 80083f6:	2900      	cmp	r1, #0
 80083f8:	d1f7      	bne.n	80083ea <UART_RxISR_8BIT_FIFOEN+0xd2>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083fa:	484e      	ldr	r0, [pc, #312]	@ (8008534 <UART_RxISR_8BIT_FIFOEN+0x21c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	f103 0208 	add.w	r2, r3, #8
 8008400:	e852 2f00 	ldrex	r2, [r2]
 8008404:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	f103 0508 	add.w	r5, r3, #8
 800840a:	e845 2100 	strex	r1, r2, [r5]
 800840e:	2900      	cmp	r1, #0
 8008410:	d1f4      	bne.n	80083fc <UART_RxISR_8BIT_FIFOEN+0xe4>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008412:	4a49      	ldr	r2, [pc, #292]	@ (8008538 <UART_RxISR_8BIT_FIFOEN+0x220>)
        huart->RxState = HAL_UART_STATE_READY;
 8008414:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 8008416:	6761      	str	r1, [r4, #116]	@ 0x74
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008418:	4293      	cmp	r3, r2
        huart->RxState = HAL_UART_STATE_READY;
 800841a:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800841e:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008420:	d002      	beq.n	8008428 <UART_RxISR_8BIT_FIFOEN+0x110>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	0211      	lsls	r1, r2, #8
 8008426:	d46f      	bmi.n	8008508 <UART_RxISR_8BIT_FIFOEN+0x1f0>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008428:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800842a:	2a01      	cmp	r2, #1
 800842c:	d17d      	bne.n	800852a <UART_RxISR_8BIT_FIFOEN+0x212>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800842e:	2200      	movs	r2, #0
 8008430:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008432:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008436:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	e843 2100 	strex	r1, r2, [r3]
 800843e:	2900      	cmp	r1, #0
 8008440:	d1f7      	bne.n	8008432 <UART_RxISR_8BIT_FIFOEN+0x11a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008442:	69da      	ldr	r2, [r3, #28]
 8008444:	06d2      	lsls	r2, r2, #27
 8008446:	d501      	bpl.n	800844c <UART_RxISR_8BIT_FIFOEN+0x134>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008448:	2210      	movs	r2, #16
 800844a:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800844c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008450:	4620      	mov	r0, r4
 8008452:	f7ff fcf7 	bl	8007e44 <HAL_UARTEx_RxEventCallback>
    rxdatacount = huart->RxXferCount;
 8008456:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800845a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800845c:	2b00      	cmp	r3, #0
 800845e:	f43f af6b 	beq.w	8008338 <UART_RxISR_8BIT_FIFOEN+0x20>
 8008462:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8008466:	429a      	cmp	r2, r3
 8008468:	f67f af66 	bls.w	8008338 <UART_RxISR_8BIT_FIFOEN+0x20>
 800846c:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846e:	f103 0208 	add.w	r2, r3, #8
 8008472:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008476:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	f103 0008 	add.w	r0, r3, #8
 800847e:	e840 2100 	strex	r1, r2, [r0]
 8008482:	2900      	cmp	r1, #0
 8008484:	d1f3      	bne.n	800846e <UART_RxISR_8BIT_FIFOEN+0x156>
      huart->RxISR = UART_RxISR_8BIT;
 8008486:	4a2d      	ldr	r2, [pc, #180]	@ (800853c <UART_RxISR_8BIT_FIFOEN+0x224>)
 8008488:	6762      	str	r2, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800848e:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	e843 2100 	strex	r1, r2, [r3]
 8008496:	2900      	cmp	r1, #0
 8008498:	d1f7      	bne.n	800848a <UART_RxISR_8BIT_FIFOEN+0x172>
 800849a:	e74d      	b.n	8008338 <UART_RxISR_8BIT_FIFOEN+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800849c:	2601      	movs	r6, #1
 800849e:	e004      	b.n	80084aa <UART_RxISR_8BIT_FIFOEN+0x192>
      if (huart->RxXferCount == 0U)
 80084a0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d09e      	beq.n	80083e8 <UART_RxISR_8BIT_FIFOEN+0xd0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084aa:	06a8      	lsls	r0, r5, #26
 80084ac:	d5d3      	bpl.n	8008456 <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084ae:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084b0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084b4:	ea03 0309 	and.w	r3, r3, r9
 80084b8:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 80084ba:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
      huart->pRxBuffPtr++;
 80084be:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80084c0:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 80084c2:	3201      	adds	r2, #1
      huart->RxXferCount--;
 80084c4:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 80084c6:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80084c8:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80084d0:	0769      	lsls	r1, r5, #29
 80084d2:	d0e5      	beq.n	80084a0 <UART_RxISR_8BIT_FIFOEN+0x188>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084d4:	07ea      	lsls	r2, r5, #31
 80084d6:	d509      	bpl.n	80084ec <UART_RxISR_8BIT_FIFOEN+0x1d4>
 80084d8:	f1ba 0f00 	cmp.w	sl, #0
 80084dc:	d006      	beq.n	80084ec <UART_RxISR_8BIT_FIFOEN+0x1d4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084de:	621e      	str	r6, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80084e4:	f043 0301 	orr.w	r3, r3, #1
 80084e8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d0d5      	beq.n	80084a0 <UART_RxISR_8BIT_FIFOEN+0x188>
          HAL_UART_ErrorCallback(huart);
 80084f4:	4620      	mov	r0, r4
 80084f6:	f7ff fc9b 	bl	8007e30 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084fa:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
 80084fe:	e7cf      	b.n	80084a0 <UART_RxISR_8BIT_FIFOEN+0x188>
    rxdatacount = huart->RxXferCount;
 8008500:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
}
 8008504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800850c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008510:	e843 2100 	strex	r1, r2, [r3]
 8008514:	2900      	cmp	r1, #0
 8008516:	d087      	beq.n	8008428 <UART_RxISR_8BIT_FIFOEN+0x110>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	e853 2f00 	ldrex	r2, [r3]
 800851c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008520:	e843 2100 	strex	r1, r2, [r3]
 8008524:	2900      	cmp	r1, #0
 8008526:	d1ef      	bne.n	8008508 <UART_RxISR_8BIT_FIFOEN+0x1f0>
 8008528:	e77e      	b.n	8008428 <UART_RxISR_8BIT_FIFOEN+0x110>
          HAL_UART_RxCpltCallback(huart);
 800852a:	4620      	mov	r0, r4
 800852c:	f7f8 fdc2 	bl	80010b4 <HAL_UART_RxCpltCallback>
 8008530:	e791      	b.n	8008456 <UART_RxISR_8BIT_FIFOEN+0x13e>
 8008532:	bf00      	nop
 8008534:	effffffe 	.word	0xeffffffe
 8008538:	58000c00 	.word	0x58000c00
 800853c:	080082d5 	.word	0x080082d5

08008540 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008540:	6803      	ldr	r3, [r0, #0]
{
 8008542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008546:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008548:	6819      	ldr	r1, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800854a:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800854c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 8008550:	f8b0 9060 	ldrh.w	r9, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008554:	2a22      	cmp	r2, #34	@ 0x22
 8008556:	d005      	beq.n	8008564 <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008558:	699a      	ldr	r2, [r3, #24]
 800855a:	f042 0208 	orr.w	r2, r2, #8
 800855e:	619a      	str	r2, [r3, #24]
  }
}
 8008560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008564:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8008568:	4604      	mov	r4, r0
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800856a:	f401 7a80 	and.w	sl, r1, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800856e:	f007 0701 	and.w	r7, r7, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 80d4 	beq.w	8008720 <UART_RxISR_16BIT_FIFOEN+0x1e0>
 8008578:	2f00      	cmp	r7, #0
 800857a:	f000 80a1 	beq.w	80086c0 <UART_RxISR_16BIT_FIFOEN+0x180>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800857e:	2600      	movs	r6, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008580:	2704      	movs	r7, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008582:	f04f 0802 	mov.w	r8, #2
 8008586:	e004      	b.n	8008592 <UART_RxISR_16BIT_FIFOEN+0x52>
      if (huart->RxXferCount == 0U)
 8008588:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800858c:	b29b      	uxth	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d03c      	beq.n	800860c <UART_RxISR_16BIT_FIFOEN+0xcc>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008592:	06ab      	lsls	r3, r5, #26
 8008594:	d571      	bpl.n	800867a <UART_RxISR_16BIT_FIFOEN+0x13a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008596:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8008598:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800859a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800859c:	ea09 0202 	and.w	r2, r9, r2
 80085a0:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 80085a4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      huart->pRxBuffPtr += 2U;
 80085a8:	65a1      	str	r1, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80085aa:	3a01      	subs	r2, #1
 80085ac:	b292      	uxth	r2, r2
 80085ae:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80085b2:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80085b4:	0768      	lsls	r0, r5, #29
 80085b6:	d0e7      	beq.n	8008588 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085b8:	07e9      	lsls	r1, r5, #31
 80085ba:	d50a      	bpl.n	80085d2 <UART_RxISR_16BIT_FIFOEN+0x92>
 80085bc:	f1ba 0f00 	cmp.w	sl, #0
 80085c0:	d007      	beq.n	80085d2 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085c2:	2201      	movs	r2, #1
 80085c4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085c6:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80085ca:	f042 0201 	orr.w	r2, r2, #1
 80085ce:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085d2:	07aa      	lsls	r2, r5, #30
 80085d4:	d507      	bpl.n	80085e6 <UART_RxISR_16BIT_FIFOEN+0xa6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085d6:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085da:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80085de:	f042 0204 	orr.w	r2, r2, #4
 80085e2:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085e6:	0768      	lsls	r0, r5, #29
 80085e8:	d506      	bpl.n	80085f8 <UART_RxISR_16BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085ea:	621f      	str	r7, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80085f0:	f043 0302 	orr.w	r3, r3, #2
 80085f4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0c3      	beq.n	8008588 <UART_RxISR_16BIT_FIFOEN+0x48>
          HAL_UART_ErrorCallback(huart);
 8008600:	4620      	mov	r0, r4
 8008602:	f7ff fc15 	bl	8007e30 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008606:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 800860a:	e7bd      	b.n	8008588 <UART_RxISR_16BIT_FIFOEN+0x48>
 800860c:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008612:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008616:	e843 2100 	strex	r1, r2, [r3]
 800861a:	2900      	cmp	r1, #0
 800861c:	d1f7      	bne.n	800860e <UART_RxISR_16BIT_FIFOEN+0xce>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800861e:	484d      	ldr	r0, [pc, #308]	@ (8008754 <UART_RxISR_16BIT_FIFOEN+0x214>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008620:	f103 0208 	add.w	r2, r3, #8
 8008624:	e852 2f00 	ldrex	r2, [r2]
 8008628:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	f103 0508 	add.w	r5, r3, #8
 800862e:	e845 2100 	strex	r1, r2, [r5]
 8008632:	2900      	cmp	r1, #0
 8008634:	d1f4      	bne.n	8008620 <UART_RxISR_16BIT_FIFOEN+0xe0>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008636:	4a48      	ldr	r2, [pc, #288]	@ (8008758 <UART_RxISR_16BIT_FIFOEN+0x218>)
        huart->RxState = HAL_UART_STATE_READY;
 8008638:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 800863a:	6761      	str	r1, [r4, #116]	@ 0x74
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800863c:	4293      	cmp	r3, r2
        huart->RxState = HAL_UART_STATE_READY;
 800863e:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008642:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008644:	d002      	beq.n	800864c <UART_RxISR_16BIT_FIFOEN+0x10c>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	0211      	lsls	r1, r2, #8
 800864a:	d46d      	bmi.n	8008728 <UART_RxISR_16BIT_FIFOEN+0x1e8>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800864c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800864e:	2a01      	cmp	r2, #1
 8008650:	d17b      	bne.n	800874a <UART_RxISR_16BIT_FIFOEN+0x20a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008652:	2200      	movs	r2, #0
 8008654:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008656:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800865a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	e843 2100 	strex	r1, r2, [r3]
 8008662:	2900      	cmp	r1, #0
 8008664:	d1f7      	bne.n	8008656 <UART_RxISR_16BIT_FIFOEN+0x116>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008666:	69da      	ldr	r2, [r3, #28]
 8008668:	06d2      	lsls	r2, r2, #27
 800866a:	d501      	bpl.n	8008670 <UART_RxISR_16BIT_FIFOEN+0x130>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800866c:	2210      	movs	r2, #16
 800866e:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008670:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008674:	4620      	mov	r0, r4
 8008676:	f7ff fbe5 	bl	8007e44 <HAL_UARTEx_RxEventCallback>
    rxdatacount = huart->RxXferCount;
 800867a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800867e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008680:	2b00      	cmp	r3, #0
 8008682:	f43f af6d 	beq.w	8008560 <UART_RxISR_16BIT_FIFOEN+0x20>
 8008686:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800868a:	429a      	cmp	r2, r3
 800868c:	f67f af68 	bls.w	8008560 <UART_RxISR_16BIT_FIFOEN+0x20>
 8008690:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	f103 0208 	add.w	r2, r3, #8
 8008696:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800869a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	f103 0008 	add.w	r0, r3, #8
 80086a2:	e840 2100 	strex	r1, r2, [r0]
 80086a6:	2900      	cmp	r1, #0
 80086a8:	d1f3      	bne.n	8008692 <UART_RxISR_16BIT_FIFOEN+0x152>
      huart->RxISR = UART_RxISR_16BIT;
 80086aa:	4a2c      	ldr	r2, [pc, #176]	@ (800875c <UART_RxISR_16BIT_FIFOEN+0x21c>)
 80086ac:	6762      	str	r2, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ae:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086b2:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	e843 2100 	strex	r1, r2, [r3]
 80086ba:	2900      	cmp	r1, #0
 80086bc:	d1f7      	bne.n	80086ae <UART_RxISR_16BIT_FIFOEN+0x16e>
 80086be:	e74f      	b.n	8008560 <UART_RxISR_16BIT_FIFOEN+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086c0:	2601      	movs	r6, #1
 80086c2:	e004      	b.n	80086ce <UART_RxISR_16BIT_FIFOEN+0x18e>
      if (huart->RxXferCount == 0U)
 80086c4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d09e      	beq.n	800860c <UART_RxISR_16BIT_FIFOEN+0xcc>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086ce:	06a8      	lsls	r0, r5, #26
 80086d0:	d5d3      	bpl.n	800867a <UART_RxISR_16BIT_FIFOEN+0x13a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086d2:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 80086d4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086d6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80086d8:	ea09 0101 	and.w	r1, r9, r1
 80086dc:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 80086e0:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80086e2:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 80086e6:	3a01      	subs	r2, #1
 80086e8:	b292      	uxth	r2, r2
 80086ea:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80086ee:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086f0:	0769      	lsls	r1, r5, #29
 80086f2:	d0e7      	beq.n	80086c4 <UART_RxISR_16BIT_FIFOEN+0x184>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086f4:	07ea      	lsls	r2, r5, #31
 80086f6:	d509      	bpl.n	800870c <UART_RxISR_16BIT_FIFOEN+0x1cc>
 80086f8:	f1ba 0f00 	cmp.w	sl, #0
 80086fc:	d006      	beq.n	800870c <UART_RxISR_16BIT_FIFOEN+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086fe:	621e      	str	r6, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008700:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008704:	f043 0301 	orr.w	r3, r3, #1
 8008708:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800870c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0d7      	beq.n	80086c4 <UART_RxISR_16BIT_FIFOEN+0x184>
          HAL_UART_ErrorCallback(huart);
 8008714:	4620      	mov	r0, r4
 8008716:	f7ff fb8b 	bl	8007e30 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800871a:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
 800871e:	e7d1      	b.n	80086c4 <UART_RxISR_16BIT_FIFOEN+0x184>
    rxdatacount = huart->RxXferCount;
 8008720:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
}
 8008724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800872c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	e843 2100 	strex	r1, r2, [r3]
 8008734:	2900      	cmp	r1, #0
 8008736:	d089      	beq.n	800864c <UART_RxISR_16BIT_FIFOEN+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	e853 2f00 	ldrex	r2, [r3]
 800873c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	e843 2100 	strex	r1, r2, [r3]
 8008744:	2900      	cmp	r1, #0
 8008746:	d1ef      	bne.n	8008728 <UART_RxISR_16BIT_FIFOEN+0x1e8>
 8008748:	e780      	b.n	800864c <UART_RxISR_16BIT_FIFOEN+0x10c>
          HAL_UART_RxCpltCallback(huart);
 800874a:	4620      	mov	r0, r4
 800874c:	f7f8 fcb2 	bl	80010b4 <HAL_UART_RxCpltCallback>
 8008750:	e793      	b.n	800867a <UART_RxISR_16BIT_FIFOEN+0x13a>
 8008752:	bf00      	nop
 8008754:	effffffe 	.word	0xeffffffe
 8008758:	58000c00 	.word	0x58000c00
 800875c:	0800828d 	.word	0x0800828d

08008760 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008760:	6901      	ldr	r1, [r0, #16]
 8008762:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008764:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008766:	430a      	orrs	r2, r1
{
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800876c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800876e:	69c0      	ldr	r0, [r0, #28]
{
 8008770:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008772:	6961      	ldr	r1, [r4, #20]
 8008774:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008776:	49a0      	ldr	r1, [pc, #640]	@ (80089f8 <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008778:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800877a:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800877c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800877e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008780:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008782:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800878a:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800878c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800878e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008790:	4a9a      	ldr	r2, [pc, #616]	@ (80089fc <UART_SetConfig+0x29c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	f000 8119 	beq.w	80089ca <UART_SetConfig+0x26a>
    tmpreg |= huart->Init.OneBitSampling;
 8008798:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800879a:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800879c:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800879e:	4a98      	ldr	r2, [pc, #608]	@ (8008a00 <UART_SetConfig+0x2a0>)
 80087a0:	4032      	ands	r2, r6
 80087a2:	4311      	orrs	r1, r2
 80087a4:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a8:	f022 020f 	bic.w	r2, r2, #15
 80087ac:	432a      	orrs	r2, r5
 80087ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087b0:	4a94      	ldr	r2, [pc, #592]	@ (8008a04 <UART_SetConfig+0x2a4>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d028      	beq.n	8008808 <UART_SetConfig+0xa8>
 80087b6:	4a94      	ldr	r2, [pc, #592]	@ (8008a08 <UART_SetConfig+0x2a8>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d01a      	beq.n	80087f2 <UART_SetConfig+0x92>
 80087bc:	4a93      	ldr	r2, [pc, #588]	@ (8008a0c <UART_SetConfig+0x2ac>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d017      	beq.n	80087f2 <UART_SetConfig+0x92>
 80087c2:	4a93      	ldr	r2, [pc, #588]	@ (8008a10 <UART_SetConfig+0x2b0>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d014      	beq.n	80087f2 <UART_SetConfig+0x92>
 80087c8:	4a92      	ldr	r2, [pc, #584]	@ (8008a14 <UART_SetConfig+0x2b4>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d011      	beq.n	80087f2 <UART_SetConfig+0x92>
 80087ce:	4a92      	ldr	r2, [pc, #584]	@ (8008a18 <UART_SetConfig+0x2b8>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d019      	beq.n	8008808 <UART_SetConfig+0xa8>
 80087d4:	4a91      	ldr	r2, [pc, #580]	@ (8008a1c <UART_SetConfig+0x2bc>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00b      	beq.n	80087f2 <UART_SetConfig+0x92>
 80087da:	4a91      	ldr	r2, [pc, #580]	@ (8008a20 <UART_SetConfig+0x2c0>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d008      	beq.n	80087f2 <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 80087e0:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80087e2:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80087e4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 80087e8:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80087ea:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80087ec:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80087ee:	b006      	add	sp, #24
 80087f0:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087f2:	4b8c      	ldr	r3, [pc, #560]	@ (8008a24 <UART_SetConfig+0x2c4>)
 80087f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b05      	cmp	r3, #5
 80087fc:	d8f0      	bhi.n	80087e0 <UART_SetConfig+0x80>
 80087fe:	e8df f003 	tbb	[pc, r3]
 8008802:	7e9e      	.short	0x7e9e
 8008804:	785f9189 	.word	0x785f9189
 8008808:	4b86      	ldr	r3, [pc, #536]	@ (8008a24 <UART_SetConfig+0x2c4>)
 800880a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800880c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008810:	2b28      	cmp	r3, #40	@ 0x28
 8008812:	d8e5      	bhi.n	80087e0 <UART_SetConfig+0x80>
 8008814:	a201      	add	r2, pc, #4	@ (adr r2, 800881c <UART_SetConfig+0xbc>)
 8008816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881a:	bf00      	nop
 800881c:	08008999 	.word	0x08008999
 8008820:	080087e1 	.word	0x080087e1
 8008824:	080087e1 	.word	0x080087e1
 8008828:	080087e1 	.word	0x080087e1
 800882c:	080087e1 	.word	0x080087e1
 8008830:	080087e1 	.word	0x080087e1
 8008834:	080087e1 	.word	0x080087e1
 8008838:	080087e1 	.word	0x080087e1
 800883c:	080088ff 	.word	0x080088ff
 8008840:	080087e1 	.word	0x080087e1
 8008844:	080087e1 	.word	0x080087e1
 8008848:	080087e1 	.word	0x080087e1
 800884c:	080087e1 	.word	0x080087e1
 8008850:	080087e1 	.word	0x080087e1
 8008854:	080087e1 	.word	0x080087e1
 8008858:	080087e1 	.word	0x080087e1
 800885c:	08008915 	.word	0x08008915
 8008860:	080087e1 	.word	0x080087e1
 8008864:	080087e1 	.word	0x080087e1
 8008868:	080087e1 	.word	0x080087e1
 800886c:	080087e1 	.word	0x080087e1
 8008870:	080087e1 	.word	0x080087e1
 8008874:	080087e1 	.word	0x080087e1
 8008878:	080087e1 	.word	0x080087e1
 800887c:	08008925 	.word	0x08008925
 8008880:	080087e1 	.word	0x080087e1
 8008884:	080087e1 	.word	0x080087e1
 8008888:	080087e1 	.word	0x080087e1
 800888c:	080087e1 	.word	0x080087e1
 8008890:	080087e1 	.word	0x080087e1
 8008894:	080087e1 	.word	0x080087e1
 8008898:	080087e1 	.word	0x080087e1
 800889c:	080088c1 	.word	0x080088c1
 80088a0:	080087e1 	.word	0x080087e1
 80088a4:	080087e1 	.word	0x080087e1
 80088a8:	080087e1 	.word	0x080087e1
 80088ac:	080087e1 	.word	0x080087e1
 80088b0:	080087e1 	.word	0x080087e1
 80088b4:	080087e1 	.word	0x080087e1
 80088b8:	080087e1 	.word	0x080087e1
 80088bc:	080088f3 	.word	0x080088f3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088c0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 80088c4:	4858      	ldr	r0, [pc, #352]	@ (8008a28 <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088c6:	d047      	beq.n	8008958 <UART_SetConfig+0x1f8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088c8:	4a58      	ldr	r2, [pc, #352]	@ (8008a2c <UART_SetConfig+0x2cc>)
 80088ca:	6863      	ldr	r3, [r4, #4]
 80088cc:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088d0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088d4:	fbb0 f0f1 	udiv	r0, r0, r1
 80088d8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80088dc:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088e0:	f1a0 0310 	sub.w	r3, r0, #16
 80088e4:	4293      	cmp	r3, r2
 80088e6:	f63f af7b 	bhi.w	80087e0 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 80088ee:	2000      	movs	r0, #0
 80088f0:	e777      	b.n	80087e2 <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088f2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80088f6:	d02f      	beq.n	8008958 <UART_SetConfig+0x1f8>
        pclk = (uint32_t) LSE_VALUE;
 80088f8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80088fc:	e7e4      	b.n	80088c8 <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088fe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008902:	d022      	beq.n	800894a <UART_SetConfig+0x1ea>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008904:	4668      	mov	r0, sp
 8008906:	f7fe fc1b 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800890a:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800890c:	2800      	cmp	r0, #0
 800890e:	d0ee      	beq.n	80088ee <UART_SetConfig+0x18e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008910:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008912:	e7d9      	b.n	80088c8 <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008914:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008918:	d04f      	beq.n	80089ba <UART_SetConfig+0x25a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800891a:	a803      	add	r0, sp, #12
 800891c:	f7fe fcaa 	bl	8007274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008920:	9804      	ldr	r0, [sp, #16]
        break;
 8008922:	e7f3      	b.n	800890c <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008924:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008928:	d03c      	beq.n	80089a4 <UART_SetConfig+0x244>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800892a:	4b3e      	ldr	r3, [pc, #248]	@ (8008a24 <UART_SetConfig+0x2c4>)
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	0691      	lsls	r1, r2, #26
 8008930:	d52d      	bpl.n	800898e <UART_SetConfig+0x22e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	483e      	ldr	r0, [pc, #248]	@ (8008a30 <UART_SetConfig+0x2d0>)
 8008936:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800893a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800893c:	e7c4      	b.n	80088c8 <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800893e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008942:	d026      	beq.n	8008992 <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008944:	f7fd fb36 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
        break;
 8008948:	e7e0      	b.n	800890c <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800894a:	4668      	mov	r0, sp
 800894c:	f7fe fbf8 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008950:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8008952:	2800      	cmp	r0, #0
 8008954:	d0cb      	beq.n	80088ee <UART_SetConfig+0x18e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008956:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008958:	4b34      	ldr	r3, [pc, #208]	@ (8008a2c <UART_SetConfig+0x2cc>)
 800895a:	6862      	ldr	r2, [r4, #4]
 800895c:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8008960:	0853      	lsrs	r3, r2, #1
 8008962:	fbb0 f0f1 	udiv	r0, r0, r1
 8008966:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800896a:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800896e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008972:	f1a3 0210 	sub.w	r2, r3, #16
 8008976:	428a      	cmp	r2, r1
 8008978:	f63f af32 	bhi.w	80087e0 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800897c:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008980:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8008984:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008986:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8008988:	4313      	orrs	r3, r2
 800898a:	60cb      	str	r3, [r1, #12]
 800898c:	e7af      	b.n	80088ee <UART_SetConfig+0x18e>
          pclk = (uint32_t) HSI_VALUE;
 800898e:	4828      	ldr	r0, [pc, #160]	@ (8008a30 <UART_SetConfig+0x2d0>)
 8008990:	e79a      	b.n	80088c8 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008992:	f7fd fb0f 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
        break;
 8008996:	e7dc      	b.n	8008952 <UART_SetConfig+0x1f2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008998:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800899c:	d012      	beq.n	80089c4 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 800899e:	f7fd fb51 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
        break;
 80089a2:	e7b3      	b.n	800890c <UART_SetConfig+0x1ac>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089a4:	4b1f      	ldr	r3, [pc, #124]	@ (8008a24 <UART_SetConfig+0x2c4>)
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	0690      	lsls	r0, r2, #26
 80089aa:	f140 808b 	bpl.w	8008ac4 <UART_SetConfig+0x364>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	481f      	ldr	r0, [pc, #124]	@ (8008a30 <UART_SetConfig+0x2d0>)
 80089b2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089b6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80089b8:	e7ce      	b.n	8008958 <UART_SetConfig+0x1f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ba:	a803      	add	r0, sp, #12
 80089bc:	f7fe fc5a 	bl	8007274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089c0:	9804      	ldr	r0, [sp, #16]
        break;
 80089c2:	e7c6      	b.n	8008952 <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 80089c4:	f7fd fb3e 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
        break;
 80089c8:	e7c3      	b.n	8008952 <UART_SetConfig+0x1f2>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089ca:	6898      	ldr	r0, [r3, #8]
 80089cc:	4a0c      	ldr	r2, [pc, #48]	@ (8008a00 <UART_SetConfig+0x2a0>)
 80089ce:	4002      	ands	r2, r0
 80089d0:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089d2:	4914      	ldr	r1, [pc, #80]	@ (8008a24 <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089d4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d8:	f022 020f 	bic.w	r2, r2, #15
 80089dc:	432a      	orrs	r2, r5
 80089de:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089e0:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	2b05      	cmp	r3, #5
 80089e8:	f63f aefa 	bhi.w	80087e0 <UART_SetConfig+0x80>
 80089ec:	e8df f003 	tbb	[pc, r3]
 80089f0:	224e575c 	.word	0x224e575c
 80089f4:	5f62      	.short	0x5f62
 80089f6:	bf00      	nop
 80089f8:	cfff69f3 	.word	0xcfff69f3
 80089fc:	58000c00 	.word	0x58000c00
 8008a00:	11fff4ff 	.word	0x11fff4ff
 8008a04:	40011000 	.word	0x40011000
 8008a08:	40004400 	.word	0x40004400
 8008a0c:	40004800 	.word	0x40004800
 8008a10:	40004c00 	.word	0x40004c00
 8008a14:	40005000 	.word	0x40005000
 8008a18:	40011400 	.word	0x40011400
 8008a1c:	40007800 	.word	0x40007800
 8008a20:	40007c00 	.word	0x40007c00
 8008a24:	58024400 	.word	0x58024400
 8008a28:	003d0900 	.word	0x003d0900
 8008a2c:	0806fbdc 	.word	0x0806fbdc
 8008a30:	03d09000 	.word	0x03d09000
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a34:	4b24      	ldr	r3, [pc, #144]	@ (8008ac8 <UART_SetConfig+0x368>)
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	0692      	lsls	r2, r2, #26
 8008a3a:	d43d      	bmi.n	8008ab8 <UART_SetConfig+0x358>
          pclk = (uint32_t) HSI_VALUE;
 8008a3c:	4823      	ldr	r0, [pc, #140]	@ (8008acc <UART_SetConfig+0x36c>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a3e:	4b24      	ldr	r3, [pc, #144]	@ (8008ad0 <UART_SetConfig+0x370>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a40:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a42:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a46:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a4a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a4e:	4299      	cmp	r1, r3
 8008a50:	f63f aec6 	bhi.w	80087e0 <UART_SetConfig+0x80>
 8008a54:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8008a58:	f63f aec2 	bhi.w	80087e0 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4619      	mov	r1, r3
 8008a60:	f7f7 fcee 	bl	8000440 <__aeabi_uldivmod>
 8008a64:	4632      	mov	r2, r6
 8008a66:	0209      	lsls	r1, r1, #8
 8008a68:	0203      	lsls	r3, r0, #8
 8008a6a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008a6e:	0870      	lsrs	r0, r6, #1
 8008a70:	1818      	adds	r0, r3, r0
 8008a72:	f04f 0300 	mov.w	r3, #0
 8008a76:	f141 0100 	adc.w	r1, r1, #0
 8008a7a:	f7f7 fce1 	bl	8000440 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a7e:	4b15      	ldr	r3, [pc, #84]	@ (8008ad4 <UART_SetConfig+0x374>)
 8008a80:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8008a84:	429a      	cmp	r2, r3
 8008a86:	f63f aeab 	bhi.w	80087e0 <UART_SetConfig+0x80>
 8008a8a:	e72e      	b.n	80088ea <UART_SetConfig+0x18a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a8c:	a803      	add	r0, sp, #12
 8008a8e:	f7fe fbf1 	bl	8007274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a92:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8008a94:	2800      	cmp	r0, #0
 8008a96:	f43f af2a 	beq.w	80088ee <UART_SetConfig+0x18e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a9a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008a9c:	e7cf      	b.n	8008a3e <UART_SetConfig+0x2de>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a9e:	4668      	mov	r0, sp
 8008aa0:	f7fe fb4e 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008aa4:	9801      	ldr	r0, [sp, #4]
        break;
 8008aa6:	e7f5      	b.n	8008a94 <UART_SetConfig+0x334>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008aa8:	f7fe fb38 	bl	800711c <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8008aac:	e7f2      	b.n	8008a94 <UART_SetConfig+0x334>
        pclk = (uint32_t) LSE_VALUE;
 8008aae:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008ab2:	e7c4      	b.n	8008a3e <UART_SetConfig+0x2de>
        pclk = (uint32_t) CSI_VALUE;
 8008ab4:	4808      	ldr	r0, [pc, #32]	@ (8008ad8 <UART_SetConfig+0x378>)
 8008ab6:	e7c2      	b.n	8008a3e <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4804      	ldr	r0, [pc, #16]	@ (8008acc <UART_SetConfig+0x36c>)
 8008abc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008ac0:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8008ac2:	e7bc      	b.n	8008a3e <UART_SetConfig+0x2de>
          pclk = (uint32_t) HSI_VALUE;
 8008ac4:	4801      	ldr	r0, [pc, #4]	@ (8008acc <UART_SetConfig+0x36c>)
 8008ac6:	e747      	b.n	8008958 <UART_SetConfig+0x1f8>
 8008ac8:	58024400 	.word	0x58024400
 8008acc:	03d09000 	.word	0x03d09000
 8008ad0:	0806fbdc 	.word	0x0806fbdc
 8008ad4:	000ffcff 	.word	0x000ffcff
 8008ad8:	003d0900 	.word	0x003d0900

08008adc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008adc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008ade:	071a      	lsls	r2, r3, #28
{
 8008ae0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ae2:	d506      	bpl.n	8008af2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ae4:	6801      	ldr	r1, [r0, #0]
 8008ae6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8008ae8:	684a      	ldr	r2, [r1, #4]
 8008aea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008aee:	4322      	orrs	r2, r4
 8008af0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008af2:	07dc      	lsls	r4, r3, #31
 8008af4:	d506      	bpl.n	8008b04 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008af6:	6801      	ldr	r1, [r0, #0]
 8008af8:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8008afa:	684a      	ldr	r2, [r1, #4]
 8008afc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008b00:	4322      	orrs	r2, r4
 8008b02:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b04:	0799      	lsls	r1, r3, #30
 8008b06:	d506      	bpl.n	8008b16 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b08:	6801      	ldr	r1, [r0, #0]
 8008b0a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8008b0c:	684a      	ldr	r2, [r1, #4]
 8008b0e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008b12:	4322      	orrs	r2, r4
 8008b14:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b16:	075a      	lsls	r2, r3, #29
 8008b18:	d506      	bpl.n	8008b28 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b1a:	6801      	ldr	r1, [r0, #0]
 8008b1c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008b1e:	684a      	ldr	r2, [r1, #4]
 8008b20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008b24:	4322      	orrs	r2, r4
 8008b26:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b28:	06dc      	lsls	r4, r3, #27
 8008b2a:	d506      	bpl.n	8008b3a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b2c:	6801      	ldr	r1, [r0, #0]
 8008b2e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8008b30:	688a      	ldr	r2, [r1, #8]
 8008b32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008b36:	4322      	orrs	r2, r4
 8008b38:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b3a:	0699      	lsls	r1, r3, #26
 8008b3c:	d506      	bpl.n	8008b4c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b3e:	6801      	ldr	r1, [r0, #0]
 8008b40:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8008b42:	688a      	ldr	r2, [r1, #8]
 8008b44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b48:	4322      	orrs	r2, r4
 8008b4a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b4c:	065a      	lsls	r2, r3, #25
 8008b4e:	d50a      	bpl.n	8008b66 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b50:	6801      	ldr	r1, [r0, #0]
 8008b52:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8008b54:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b56:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b5a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8008b5e:	ea42 0204 	orr.w	r2, r2, r4
 8008b62:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b64:	d00b      	beq.n	8008b7e <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b66:	061b      	lsls	r3, r3, #24
 8008b68:	d506      	bpl.n	8008b78 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b6a:	6802      	ldr	r2, [r0, #0]
 8008b6c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008b6e:	6853      	ldr	r3, [r2, #4]
 8008b70:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8008b74:	430b      	orrs	r3, r1
 8008b76:	6053      	str	r3, [r2, #4]
}
 8008b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b7c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b7e:	684a      	ldr	r2, [r1, #4]
 8008b80:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8008b82:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8008b86:	4322      	orrs	r2, r4
 8008b88:	604a      	str	r2, [r1, #4]
 8008b8a:	e7ec      	b.n	8008b66 <UART_AdvFeatureConfig+0x8a>

08008b8c <UART_CheckIdleState>:
{
 8008b8c:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b8e:	2300      	movs	r3, #0
{
 8008b90:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b92:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8008b96:	f7f9 fd95 	bl	80026c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b9a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8008b9c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b9e:	6813      	ldr	r3, [r2, #0]
 8008ba0:	071b      	lsls	r3, r3, #28
 8008ba2:	d40f      	bmi.n	8008bc4 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ba4:	6813      	ldr	r3, [r2, #0]
 8008ba6:	0759      	lsls	r1, r3, #29
 8008ba8:	d431      	bmi.n	8008c0e <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008baa:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008bac:	2220      	movs	r2, #32
  return HAL_OK;
 8008bae:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8008bb0:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008bb4:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bba:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bc4:	69d3      	ldr	r3, [r2, #28]
 8008bc6:	0298      	lsls	r0, r3, #10
 8008bc8:	d4ec      	bmi.n	8008ba4 <UART_CheckIdleState+0x18>
 8008bca:	e00c      	b.n	8008be6 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bcc:	6819      	ldr	r1, [r3, #0]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	0749      	lsls	r1, r1, #29
 8008bd2:	d505      	bpl.n	8008be0 <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008bd4:	69d9      	ldr	r1, [r3, #28]
 8008bd6:	0708      	lsls	r0, r1, #28
 8008bd8:	d44a      	bmi.n	8008c70 <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bda:	69d9      	ldr	r1, [r3, #28]
 8008bdc:	0509      	lsls	r1, r1, #20
 8008bde:	d475      	bmi.n	8008ccc <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	0298      	lsls	r0, r3, #10
 8008be4:	d4de      	bmi.n	8008ba4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008be6:	f7f9 fd6d 	bl	80026c4 <HAL_GetTick>
 8008bea:	1b43      	subs	r3, r0, r5
 8008bec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bf0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bf2:	d3eb      	bcc.n	8008bcc <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008bf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	e843 2100 	strex	r1, r2, [r3]
 8008c00:	2900      	cmp	r1, #0
 8008c02:	d1f7      	bne.n	8008bf4 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8008c04:	2320      	movs	r3, #32
 8008c06:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8008c0a:	2003      	movs	r0, #3
 8008c0c:	e7d6      	b.n	8008bbc <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c0e:	69d3      	ldr	r3, [r2, #28]
 8008c10:	025b      	lsls	r3, r3, #9
 8008c12:	d4ca      	bmi.n	8008baa <UART_CheckIdleState+0x1e>
 8008c14:	e00d      	b.n	8008c32 <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	0750      	lsls	r0, r2, #29
 8008c1a:	d507      	bpl.n	8008c2c <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c1c:	69da      	ldr	r2, [r3, #28]
 8008c1e:	0711      	lsls	r1, r2, #28
 8008c20:	f100 8082 	bmi.w	8008d28 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c24:	69da      	ldr	r2, [r3, #28]
 8008c26:	0512      	lsls	r2, r2, #20
 8008c28:	f100 80ac 	bmi.w	8008d84 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	025b      	lsls	r3, r3, #9
 8008c30:	d4bb      	bmi.n	8008baa <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c32:	f7f9 fd47 	bl	80026c4 <HAL_GetTick>
 8008c36:	1b43      	subs	r3, r0, r5
 8008c38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	d3ea      	bcc.n	8008c16 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c44:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	e843 2100 	strex	r1, r2, [r3]
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	d1f7      	bne.n	8008c40 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	f103 0208 	add.w	r2, r3, #8
 8008c54:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c58:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	f103 0008 	add.w	r0, r3, #8
 8008c60:	e840 2100 	strex	r1, r2, [r0]
 8008c64:	2900      	cmp	r1, #0
 8008c66:	d1f3      	bne.n	8008c50 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8008c68:	2320      	movs	r3, #32
 8008c6a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8008c6e:	e7cc      	b.n	8008c0a <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c70:	2208      	movs	r2, #8
 8008c72:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c78:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	e843 2100 	strex	r1, r2, [r3]
 8008c80:	2900      	cmp	r1, #0
 8008c82:	d1f7      	bne.n	8008c74 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c84:	4856      	ldr	r0, [pc, #344]	@ (8008de0 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c86:	f103 0208 	add.w	r2, r3, #8
 8008c8a:	e852 2f00 	ldrex	r2, [r2]
 8008c8e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	f103 0508 	add.w	r5, r3, #8
 8008c94:	e845 2100 	strex	r1, r2, [r5]
 8008c98:	2900      	cmp	r1, #0
 8008c9a:	d1f4      	bne.n	8008c86 <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c9c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008c9e:	2a01      	cmp	r2, #1
 8008ca0:	d00b      	beq.n	8008cba <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008ca4:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ca6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8008ca8:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8008cac:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cae:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8008cb0:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008cb4:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8008cb8:	e79c      	b.n	8008bf4 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cba:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cbe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc2:	e843 2100 	strex	r1, r2, [r3]
 8008cc6:	2900      	cmp	r1, #0
 8008cc8:	d1f7      	bne.n	8008cba <UART_CheckIdleState+0x12e>
 8008cca:	e7ea      	b.n	8008ca2 <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ccc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cd0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cd6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	e843 2100 	strex	r1, r2, [r3]
 8008cde:	2900      	cmp	r1, #0
 8008ce0:	d1f7      	bne.n	8008cd2 <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ce2:	483f      	ldr	r0, [pc, #252]	@ (8008de0 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce4:	f103 0208 	add.w	r2, r3, #8
 8008ce8:	e852 2f00 	ldrex	r2, [r2]
 8008cec:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	f103 0508 	add.w	r5, r3, #8
 8008cf2:	e845 2100 	strex	r1, r2, [r5]
 8008cf6:	2900      	cmp	r1, #0
 8008cf8:	d1f4      	bne.n	8008ce4 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cfa:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008cfc:	2a01      	cmp	r2, #1
 8008cfe:	d00a      	beq.n	8008d16 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d00:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008d02:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8008d04:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008d06:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8008d0a:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d0e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d10:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8008d14:	e76e      	b.n	8008bf4 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d1a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	e843 2100 	strex	r1, r2, [r3]
 8008d22:	2900      	cmp	r1, #0
 8008d24:	d1f7      	bne.n	8008d16 <UART_CheckIdleState+0x18a>
 8008d26:	e7eb      	b.n	8008d00 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d28:	2208      	movs	r2, #8
 8008d2a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d30:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	e843 2100 	strex	r1, r2, [r3]
 8008d38:	2900      	cmp	r1, #0
 8008d3a:	d1f7      	bne.n	8008d2c <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d3c:	4828      	ldr	r0, [pc, #160]	@ (8008de0 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3e:	f103 0208 	add.w	r2, r3, #8
 8008d42:	e852 2f00 	ldrex	r2, [r2]
 8008d46:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d48:	f103 0508 	add.w	r5, r3, #8
 8008d4c:	e845 2100 	strex	r1, r2, [r5]
 8008d50:	2900      	cmp	r1, #0
 8008d52:	d1f4      	bne.n	8008d3e <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d54:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008d56:	2a01      	cmp	r2, #1
 8008d58:	d00b      	beq.n	8008d72 <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d5a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008d5c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d5e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8008d60:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8008d64:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d66:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8008d68:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d6c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8008d70:	e766      	b.n	8008c40 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d76:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7a:	e843 2100 	strex	r1, r2, [r3]
 8008d7e:	2900      	cmp	r1, #0
 8008d80:	d1f7      	bne.n	8008d72 <UART_CheckIdleState+0x1e6>
 8008d82:	e7ea      	b.n	8008d5a <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d88:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d8e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	e843 2100 	strex	r1, r2, [r3]
 8008d96:	2900      	cmp	r1, #0
 8008d98:	d1f7      	bne.n	8008d8a <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d9a:	4811      	ldr	r0, [pc, #68]	@ (8008de0 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	f103 0208 	add.w	r2, r3, #8
 8008da0:	e852 2f00 	ldrex	r2, [r2]
 8008da4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da6:	f103 0508 	add.w	r5, r3, #8
 8008daa:	e845 2100 	strex	r1, r2, [r5]
 8008dae:	2900      	cmp	r1, #0
 8008db0:	d1f4      	bne.n	8008d9c <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008db4:	2a01      	cmp	r2, #1
 8008db6:	d00a      	beq.n	8008dce <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008dba:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8008dbc:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008dbe:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8008dc2:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dc8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8008dcc:	e738      	b.n	8008c40 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dce:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	e843 2100 	strex	r1, r2, [r3]
 8008dda:	2900      	cmp	r1, #0
 8008ddc:	d1f7      	bne.n	8008dce <UART_CheckIdleState+0x242>
 8008dde:	e7eb      	b.n	8008db8 <UART_CheckIdleState+0x22c>
 8008de0:	effffffe 	.word	0xeffffffe

08008de4 <HAL_UART_Init>:
  if (huart == NULL)
 8008de4:	b380      	cbz	r0, 8008e48 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008de6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8008dea:	b510      	push	{r4, lr}
 8008dec:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008dee:	b333      	cbz	r3, 8008e3e <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8008df0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008df2:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008df4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8008df6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8008dfa:	6813      	ldr	r3, [r2, #0]
 8008dfc:	f023 0301 	bic.w	r3, r3, #1
 8008e00:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e02:	b9c1      	cbnz	r1, 8008e36 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e04:	4620      	mov	r0, r4
 8008e06:	f7ff fcab 	bl	8008760 <UART_SetConfig>
 8008e0a:	2801      	cmp	r0, #1
 8008e0c:	d011      	beq.n	8008e32 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e0e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8008e10:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e20:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	f042 0201 	orr.w	r2, r2, #1
}
 8008e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8008e2c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8008e2e:	f7ff bead 	b.w	8008b8c <UART_CheckIdleState>
}
 8008e32:	2001      	movs	r0, #1
 8008e34:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8008e36:	4620      	mov	r0, r4
 8008e38:	f7ff fe50 	bl	8008adc <UART_AdvFeatureConfig>
 8008e3c:	e7e2      	b.n	8008e04 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8008e3e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8008e42:	f7f9 f989 	bl	8002158 <HAL_UART_MspInit>
 8008e46:	e7d3      	b.n	8008df0 <HAL_UART_Init+0xc>
}
 8008e48:	2001      	movs	r0, #1
 8008e4a:	4770      	bx	lr

08008e4c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop

08008e50 <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop

08008e54 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop

08008e58 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e58:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8008e5c:	2a01      	cmp	r2, #1
 8008e5e:	d017      	beq.n	8008e90 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e60:	6802      	ldr	r2, [r0, #0]
 8008e62:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8008e64:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e66:	2100      	movs	r1, #0
{
 8008e68:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8008e6a:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8008e6e:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e70:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008e72:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e74:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8008e78:	f024 0401 	bic.w	r4, r4, #1
 8008e7c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e7e:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e80:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8008e82:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008e84:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008e88:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8008e8c:	bc30      	pop	{r4, r5}
 8008e8e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008e90:	2002      	movs	r0, #2
}
 8008e92:	4770      	bx	lr

08008e94 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e94:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8008e98:	2a01      	cmp	r2, #1
 8008e9a:	d037      	beq.n	8008f0c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e9c:	6802      	ldr	r2, [r0, #0]
 8008e9e:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8008ea0:	2024      	movs	r0, #36	@ 0x24
{
 8008ea2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8008ea4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ea8:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eaa:	6810      	ldr	r0, [r2, #0]
 8008eac:	f020 0001 	bic.w	r0, r0, #1
 8008eb0:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008eb2:	6890      	ldr	r0, [r2, #8]
 8008eb4:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8008eb8:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008eba:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ebc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ebe:	b310      	cbz	r0, 8008f06 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ec0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ec2:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ec4:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ec8:	4911      	ldr	r1, [pc, #68]	@ (8008f10 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eca:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ece:	4d11      	ldr	r5, [pc, #68]	@ (8008f14 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ed0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ed4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ed8:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008edc:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ede:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ee2:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ee4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ee8:	fbb1 f1f5 	udiv	r1, r1, r5
 8008eec:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8008ef0:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ef8:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8008efa:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008efc:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008f00:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8008f04:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8008f06:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008f08:	4608      	mov	r0, r1
 8008f0a:	e7ef      	b.n	8008eec <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8008f0c:	2002      	movs	r0, #2
}
 8008f0e:	4770      	bx	lr
 8008f10:	0806fbfc 	.word	0x0806fbfc
 8008f14:	0806fbf4 	.word	0x0806fbf4

08008f18 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8008f18:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8008f1c:	2a01      	cmp	r2, #1
 8008f1e:	d037      	beq.n	8008f90 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f20:	6802      	ldr	r2, [r0, #0]
 8008f22:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8008f24:	2024      	movs	r0, #36	@ 0x24
{
 8008f26:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8008f28:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f2c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008f2e:	6810      	ldr	r0, [r2, #0]
 8008f30:	f020 0001 	bic.w	r0, r0, #1
 8008f34:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f36:	6890      	ldr	r0, [r2, #8]
 8008f38:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8008f3c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f3e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f40:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f42:	b310      	cbz	r0, 8008f8a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f44:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f46:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f48:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f4c:	4911      	ldr	r1, [pc, #68]	@ (8008f94 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f4e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f52:	4d11      	ldr	r5, [pc, #68]	@ (8008f98 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f54:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f58:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f5c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f60:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f62:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f66:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f68:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f6c:	fbb1 f1f5 	udiv	r1, r1, r5
 8008f70:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8008f74:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8008f76:	2100      	movs	r1, #0
 8008f78:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f7c:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8008f7e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008f80:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008f84:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8008f88:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8008f8a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	e7ef      	b.n	8008f70 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8008f90:	2002      	movs	r0, #2
}
 8008f92:	4770      	bx	lr
 8008f94:	0806fbfc 	.word	0x0806fbfc
 8008f98:	0806fbf4 	.word	0x0806fbf4

08008f9c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8008f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008fa0:	e9d1 3e07 	ldrd	r3, lr, [r1, #28]
 8008fa4:	e9d1 8200 	ldrd	r8, r2, [r1]
 8008fa8:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
 8008faa:	ea43 030e 	orr.w	r3, r3, lr
 8008fae:	e9d1 c602 	ldrd	ip, r6, [r1, #8]
 8008fb2:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 8008fb6:	6989      	ldr	r1, [r1, #24]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008fb8:	f1b8 0f00 	cmp.w	r8, #0
 8008fbc:	d10f      	bne.n	8008fde <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008fbe:	433b      	orrs	r3, r7
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	6802      	ldr	r2, [r0, #0]
 8008fc4:	ea43 030c 	orr.w	r3, r3, ip
 8008fc8:	f36f 020e 	bfc	r2, #0, #15
 8008fcc:	4333      	orrs	r3, r6
 8008fce:	432b      	orrs	r3, r5
 8008fd0:	4323      	orrs	r3, r4
 8008fd2:	430b      	orrs	r3, r1
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8008fd8:	2000      	movs	r0, #0
 8008fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008fde:	ea42 020c 	orr.w	r2, r2, ip
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008fe2:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008fe4:	4332      	orrs	r2, r6
 8008fe6:	432a      	orrs	r2, r5
 8008fe8:	4322      	orrs	r2, r4
 8008fea:	430a      	orrs	r2, r1
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008fec:	6801      	ldr	r1, [r0, #0]
 8008fee:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8008ff2:	430b      	orrs	r3, r1
 8008ff4:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008ff6:	6843      	ldr	r3, [r0, #4]
 8008ff8:	f36f 030e 	bfc	r3, #0, #15
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	6043      	str	r3, [r0, #4]
}
 8009000:	2000      	movs	r0, #0
 8009002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009006:	bf00      	nop

08009008 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009008:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800900a:	68cc      	ldr	r4, [r1, #12]
 800900c:	694b      	ldr	r3, [r1, #20]
 800900e:	3c01      	subs	r4, #1
 8009010:	688d      	ldr	r5, [r1, #8]
 8009012:	698f      	ldr	r7, [r1, #24]
 8009014:	3b01      	subs	r3, #1
 8009016:	ea4f 3e04 	mov.w	lr, r4, lsl #12
 800901a:	684c      	ldr	r4, [r1, #4]
 800901c:	680e      	ldr	r6, [r1, #0]
 800901e:	3d01      	subs	r5, #1
 8009020:	3c01      	subs	r4, #1
 8009022:	051b      	lsls	r3, r3, #20
 8009024:	022d      	lsls	r5, r5, #8
 8009026:	3e01      	subs	r6, #1
 8009028:	ea4f 1c04 	mov.w	ip, r4, lsl #4
 800902c:	690c      	ldr	r4, [r1, #16]
 800902e:	1e79      	subs	r1, r7, #1
 8009030:	3c01      	subs	r4, #1
 8009032:	0609      	lsls	r1, r1, #24
 8009034:	0424      	lsls	r4, r4, #16
  if (Bank == FMC_SDRAM_BANK1)
 8009036:	b972      	cbnz	r2, 8009056 <FMC_SDRAM_Timing_Init+0x4e>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009038:	ea4e 0303 	orr.w	r3, lr, r3
 800903c:	6882      	ldr	r2, [r0, #8]
 800903e:	4333      	orrs	r3, r6
 8009040:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8009044:	ea43 030c 	orr.w	r3, r3, ip
 8009048:	432b      	orrs	r3, r5
 800904a:	4323      	orrs	r3, r4
 800904c:	430b      	orrs	r3, r1
 800904e:	4313      	orrs	r3, r2
 8009050:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8009052:	2000      	movs	r0, #0
 8009054:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009056:	ea4e 0e03 	orr.w	lr, lr, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800905a:	ea4c 0305 	orr.w	r3, ip, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800905e:	4a08      	ldr	r2, [pc, #32]	@ (8009080 <FMC_SDRAM_Timing_Init+0x78>)
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009060:	4333      	orrs	r3, r6
 8009062:	4323      	orrs	r3, r4
 8009064:	430b      	orrs	r3, r1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009066:	6881      	ldr	r1, [r0, #8]
 8009068:	400a      	ands	r2, r1
 800906a:	ea4e 0202 	orr.w	r2, lr, r2
 800906e:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009070:	68c2      	ldr	r2, [r0, #12]
 8009072:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8009076:	4313      	orrs	r3, r2
 8009078:	60c3      	str	r3, [r0, #12]
}
 800907a:	2000      	movs	r0, #0
 800907c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800907e:	bf00      	nop
 8009080:	ff0f0fff 	.word	0xff0f0fff

08009084 <arm_fill_f32>:
 8009084:	b410      	push	{r4}
 8009086:	088c      	lsrs	r4, r1, #2
 8009088:	d010      	beq.n	80090ac <arm_fill_f32+0x28>
 800908a:	f100 0310 	add.w	r3, r0, #16
 800908e:	4622      	mov	r2, r4
 8009090:	3a01      	subs	r2, #1
 8009092:	ed03 0a04 	vstr	s0, [r3, #-16]
 8009096:	ed03 0a03 	vstr	s0, [r3, #-12]
 800909a:	f103 0310 	add.w	r3, r3, #16
 800909e:	ed03 0a06 	vstr	s0, [r3, #-24]	@ 0xffffffe8
 80090a2:	ed03 0a05 	vstr	s0, [r3, #-20]	@ 0xffffffec
 80090a6:	d1f3      	bne.n	8009090 <arm_fill_f32+0xc>
 80090a8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80090ac:	f011 0103 	ands.w	r1, r1, #3
 80090b0:	d003      	beq.n	80090ba <arm_fill_f32+0x36>
 80090b2:	3901      	subs	r1, #1
 80090b4:	eca0 0a01 	vstmia	r0!, {s0}
 80090b8:	d1fb      	bne.n	80090b2 <arm_fill_f32+0x2e>
 80090ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <arm_copy_f32>:
 80090c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c4:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80090c8:	d01e      	beq.n	8009108 <arm_copy_f32+0x48>
 80090ca:	f100 0410 	add.w	r4, r0, #16
 80090ce:	f101 0310 	add.w	r3, r1, #16
 80090d2:	4645      	mov	r5, r8
 80090d4:	f854 cc10 	ldr.w	ip, [r4, #-16]
 80090d8:	3d01      	subs	r5, #1
 80090da:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 80090de:	f103 0310 	add.w	r3, r3, #16
 80090e2:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80090e6:	f104 0410 	add.w	r4, r4, #16
 80090ea:	f854 6c14 	ldr.w	r6, [r4, #-20]
 80090ee:	f843 cc20 	str.w	ip, [r3, #-32]
 80090f2:	f843 ec1c 	str.w	lr, [r3, #-28]
 80090f6:	f843 7c18 	str.w	r7, [r3, #-24]
 80090fa:	f843 6c14 	str.w	r6, [r3, #-20]
 80090fe:	d1e9      	bne.n	80090d4 <arm_copy_f32+0x14>
 8009100:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8009104:	4440      	add	r0, r8
 8009106:	4441      	add	r1, r8
 8009108:	f012 0203 	ands.w	r2, r2, #3
 800910c:	d005      	beq.n	800911a <arm_copy_f32+0x5a>
 800910e:	f850 3b04 	ldr.w	r3, [r0], #4
 8009112:	3a01      	subs	r2, #1
 8009114:	f841 3b04 	str.w	r3, [r1], #4
 8009118:	d1f9      	bne.n	800910e <arm_copy_f32+0x4e>
 800911a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800911e:	bf00      	nop

08009120 <arm_rfft_fast_init_f32>:
 8009120:	084b      	lsrs	r3, r1, #1
 8009122:	2b80      	cmp	r3, #128	@ 0x80
 8009124:	b430      	push	{r4, r5}
 8009126:	8201      	strh	r1, [r0, #16]
 8009128:	8003      	strh	r3, [r0, #0]
 800912a:	d06f      	beq.n	800920c <arm_rfft_fast_init_f32+0xec>
 800912c:	d916      	bls.n	800915c <arm_rfft_fast_init_f32+0x3c>
 800912e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009132:	d05e      	beq.n	80091f2 <arm_rfft_fast_init_f32+0xd2>
 8009134:	d935      	bls.n	80091a2 <arm_rfft_fast_init_f32+0x82>
 8009136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800913a:	d025      	beq.n	8009188 <arm_rfft_fast_init_f32+0x68>
 800913c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009140:	d112      	bne.n	8009168 <arm_rfft_fast_init_f32+0x48>
 8009142:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 8009146:	4c37      	ldr	r4, [pc, #220]	@ (8009224 <arm_rfft_fast_init_f32+0x104>)
 8009148:	4937      	ldr	r1, [pc, #220]	@ (8009228 <arm_rfft_fast_init_f32+0x108>)
 800914a:	2300      	movs	r3, #0
 800914c:	4a37      	ldr	r2, [pc, #220]	@ (800922c <arm_rfft_fast_init_f32+0x10c>)
 800914e:	8185      	strh	r5, [r0, #12]
 8009150:	6084      	str	r4, [r0, #8]
 8009152:	6041      	str	r1, [r0, #4]
 8009154:	6142      	str	r2, [r0, #20]
 8009156:	b258      	sxtb	r0, r3
 8009158:	bc30      	pop	{r4, r5}
 800915a:	4770      	bx	lr
 800915c:	2b20      	cmp	r3, #32
 800915e:	d030      	beq.n	80091c2 <arm_rfft_fast_init_f32+0xa2>
 8009160:	2b40      	cmp	r3, #64	@ 0x40
 8009162:	d005      	beq.n	8009170 <arm_rfft_fast_init_f32+0x50>
 8009164:	2b10      	cmp	r3, #16
 8009166:	d038      	beq.n	80091da <arm_rfft_fast_init_f32+0xba>
 8009168:	23ff      	movs	r3, #255	@ 0xff
 800916a:	bc30      	pop	{r4, r5}
 800916c:	b258      	sxtb	r0, r3
 800916e:	4770      	bx	lr
 8009170:	2538      	movs	r5, #56	@ 0x38
 8009172:	4c2f      	ldr	r4, [pc, #188]	@ (8009230 <arm_rfft_fast_init_f32+0x110>)
 8009174:	492f      	ldr	r1, [pc, #188]	@ (8009234 <arm_rfft_fast_init_f32+0x114>)
 8009176:	2300      	movs	r3, #0
 8009178:	4a2f      	ldr	r2, [pc, #188]	@ (8009238 <arm_rfft_fast_init_f32+0x118>)
 800917a:	8185      	strh	r5, [r0, #12]
 800917c:	6084      	str	r4, [r0, #8]
 800917e:	6041      	str	r1, [r0, #4]
 8009180:	6142      	str	r2, [r0, #20]
 8009182:	b258      	sxtb	r0, r3
 8009184:	bc30      	pop	{r4, r5}
 8009186:	4770      	bx	lr
 8009188:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800918c:	4c2b      	ldr	r4, [pc, #172]	@ (800923c <arm_rfft_fast_init_f32+0x11c>)
 800918e:	492c      	ldr	r1, [pc, #176]	@ (8009240 <arm_rfft_fast_init_f32+0x120>)
 8009190:	2300      	movs	r3, #0
 8009192:	4a2c      	ldr	r2, [pc, #176]	@ (8009244 <arm_rfft_fast_init_f32+0x124>)
 8009194:	8185      	strh	r5, [r0, #12]
 8009196:	6084      	str	r4, [r0, #8]
 8009198:	6041      	str	r1, [r0, #4]
 800919a:	6142      	str	r2, [r0, #20]
 800919c:	b258      	sxtb	r0, r3
 800919e:	bc30      	pop	{r4, r5}
 80091a0:	4770      	bx	lr
 80091a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091a6:	d1df      	bne.n	8009168 <arm_rfft_fast_init_f32+0x48>
 80091a8:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 80091ac:	4c26      	ldr	r4, [pc, #152]	@ (8009248 <arm_rfft_fast_init_f32+0x128>)
 80091ae:	4927      	ldr	r1, [pc, #156]	@ (800924c <arm_rfft_fast_init_f32+0x12c>)
 80091b0:	2300      	movs	r3, #0
 80091b2:	4a27      	ldr	r2, [pc, #156]	@ (8009250 <arm_rfft_fast_init_f32+0x130>)
 80091b4:	8185      	strh	r5, [r0, #12]
 80091b6:	6084      	str	r4, [r0, #8]
 80091b8:	6041      	str	r1, [r0, #4]
 80091ba:	6142      	str	r2, [r0, #20]
 80091bc:	b258      	sxtb	r0, r3
 80091be:	bc30      	pop	{r4, r5}
 80091c0:	4770      	bx	lr
 80091c2:	2530      	movs	r5, #48	@ 0x30
 80091c4:	4c23      	ldr	r4, [pc, #140]	@ (8009254 <arm_rfft_fast_init_f32+0x134>)
 80091c6:	4924      	ldr	r1, [pc, #144]	@ (8009258 <arm_rfft_fast_init_f32+0x138>)
 80091c8:	2300      	movs	r3, #0
 80091ca:	4a24      	ldr	r2, [pc, #144]	@ (800925c <arm_rfft_fast_init_f32+0x13c>)
 80091cc:	8185      	strh	r5, [r0, #12]
 80091ce:	6084      	str	r4, [r0, #8]
 80091d0:	6041      	str	r1, [r0, #4]
 80091d2:	6142      	str	r2, [r0, #20]
 80091d4:	b258      	sxtb	r0, r3
 80091d6:	bc30      	pop	{r4, r5}
 80091d8:	4770      	bx	lr
 80091da:	2514      	movs	r5, #20
 80091dc:	4c20      	ldr	r4, [pc, #128]	@ (8009260 <arm_rfft_fast_init_f32+0x140>)
 80091de:	4921      	ldr	r1, [pc, #132]	@ (8009264 <arm_rfft_fast_init_f32+0x144>)
 80091e0:	2300      	movs	r3, #0
 80091e2:	4a21      	ldr	r2, [pc, #132]	@ (8009268 <arm_rfft_fast_init_f32+0x148>)
 80091e4:	8185      	strh	r5, [r0, #12]
 80091e6:	6084      	str	r4, [r0, #8]
 80091e8:	6041      	str	r1, [r0, #4]
 80091ea:	6142      	str	r2, [r0, #20]
 80091ec:	b258      	sxtb	r0, r3
 80091ee:	bc30      	pop	{r4, r5}
 80091f0:	4770      	bx	lr
 80091f2:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 80091f6:	4c1d      	ldr	r4, [pc, #116]	@ (800926c <arm_rfft_fast_init_f32+0x14c>)
 80091f8:	491d      	ldr	r1, [pc, #116]	@ (8009270 <arm_rfft_fast_init_f32+0x150>)
 80091fa:	2300      	movs	r3, #0
 80091fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009274 <arm_rfft_fast_init_f32+0x154>)
 80091fe:	8185      	strh	r5, [r0, #12]
 8009200:	6084      	str	r4, [r0, #8]
 8009202:	6041      	str	r1, [r0, #4]
 8009204:	6142      	str	r2, [r0, #20]
 8009206:	b258      	sxtb	r0, r3
 8009208:	bc30      	pop	{r4, r5}
 800920a:	4770      	bx	lr
 800920c:	25d0      	movs	r5, #208	@ 0xd0
 800920e:	4c1a      	ldr	r4, [pc, #104]	@ (8009278 <arm_rfft_fast_init_f32+0x158>)
 8009210:	491a      	ldr	r1, [pc, #104]	@ (800927c <arm_rfft_fast_init_f32+0x15c>)
 8009212:	2300      	movs	r3, #0
 8009214:	4a1a      	ldr	r2, [pc, #104]	@ (8009280 <arm_rfft_fast_init_f32+0x160>)
 8009216:	8185      	strh	r5, [r0, #12]
 8009218:	6084      	str	r4, [r0, #8]
 800921a:	6041      	str	r1, [r0, #4]
 800921c:	6142      	str	r2, [r0, #20]
 800921e:	b258      	sxtb	r0, r3
 8009220:	bc30      	pop	{r4, r5}
 8009222:	4770      	bx	lr
 8009224:	0807ea0c 	.word	0x0807ea0c
 8009228:	0806fc04 	.word	0x0806fc04
 800922c:	08075d74 	.word	0x08075d74
 8009230:	08073d04 	.word	0x08073d04
 8009234:	080807cc 	.word	0x080807cc
 8009238:	08082cbc 	.word	0x08082cbc
 800923c:	0807c6f4 	.word	0x0807c6f4
 8009240:	0807a5f4 	.word	0x0807a5f4
 8009244:	08073d74 	.word	0x08073d74
 8009248:	0808294c 	.word	0x0808294c
 800924c:	08079d74 	.word	0x08079d74
 8009250:	080809cc 	.word	0x080809cc
 8009254:	0807d5ac 	.word	0x0807d5ac
 8009258:	0807c5f4 	.word	0x0807c5f4
 800925c:	08073c04 	.word	0x08073c04
 8009260:	0807d504 	.word	0x0807d504
 8009264:	0807a574 	.word	0x0807a574
 8009268:	0807d52c 	.word	0x0807d52c
 800926c:	080811cc 	.word	0x080811cc
 8009270:	0807da0c 	.word	0x0807da0c
 8009274:	0808154c 	.word	0x0808154c
 8009278:	08082ebc 	.word	0x08082ebc
 800927c:	0807d60c 	.word	0x0807d60c
 8009280:	0808254c 	.word	0x0808254c

08009284 <arm_rfft_fast_f32>:
 8009284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009288:	8a05      	ldrh	r5, [r0, #16]
 800928a:	4606      	mov	r6, r0
 800928c:	4690      	mov	r8, r2
 800928e:	460c      	mov	r4, r1
 8009290:	086d      	lsrs	r5, r5, #1
 8009292:	8005      	strh	r5, [r0, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d15e      	bne.n	8009356 <arm_rfft_fast_f32+0xd2>
 8009298:	461a      	mov	r2, r3
 800929a:	2301      	movs	r3, #1
 800929c:	f000 fbe0 	bl	8009a60 <arm_cfft_f32>
 80092a0:	edd4 7a00 	vldr	s15, [r4]
 80092a4:	ed94 7a01 	vldr	s14, [r4, #4]
 80092a8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80092ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80092b0:	8837      	ldrh	r7, [r6, #0]
 80092b2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80092b6:	6975      	ldr	r5, [r6, #20]
 80092b8:	3f01      	subs	r7, #1
 80092ba:	eef0 3a46 	vmov.f32	s7, s12
 80092be:	3510      	adds	r5, #16
 80092c0:	f108 0610 	add.w	r6, r8, #16
 80092c4:	ee77 6a87 	vadd.f32	s13, s15, s14
 80092c8:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 80092cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092d0:	f104 0310 	add.w	r3, r4, #16
 80092d4:	3808      	subs	r0, #8
 80092d6:	ee26 7a86 	vmul.f32	s14, s13, s12
 80092da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80092de:	ed88 7a00 	vstr	s14, [r8]
 80092e2:	edc8 7a01 	vstr	s15, [r8, #4]
 80092e6:	edd0 6a02 	vldr	s13, [r0, #8]
 80092ea:	3f01      	subs	r7, #1
 80092ec:	ed13 5a02 	vldr	s10, [r3, #-8]
 80092f0:	f1a0 0008 	sub.w	r0, r0, #8
 80092f4:	ed13 7a01 	vldr	s14, [r3, #-4]
 80092f8:	f105 0508 	add.w	r5, r5, #8
 80092fc:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8009300:	ed15 6a04 	vldr	s12, [r5, #-16]
 8009304:	edd0 5a05 	vldr	s11, [r0, #20]
 8009308:	ee36 5a85 	vadd.f32	s10, s13, s10
 800930c:	ed55 6a03 	vldr	s13, [r5, #-12]
 8009310:	f103 0308 	add.w	r3, r3, #8
 8009314:	ee35 4a87 	vadd.f32	s8, s11, s14
 8009318:	f106 0608 	add.w	r6, r6, #8
 800931c:	ee66 4a27 	vmul.f32	s9, s12, s15
 8009320:	ee77 5a65 	vsub.f32	s11, s14, s11
 8009324:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8009328:	ee34 5a85 	vadd.f32	s10, s9, s10
 800932c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009330:	ee66 6a84 	vmul.f32	s13, s13, s8
 8009334:	ee77 7a25 	vadd.f32	s15, s14, s11
 8009338:	ee76 6a85 	vadd.f32	s13, s13, s10
 800933c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009340:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8009344:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8009348:	ed46 6a04 	vstr	s13, [r6, #-16]
 800934c:	ed46 7a03 	vstr	s15, [r6, #-12]
 8009350:	d1c9      	bne.n	80092e6 <arm_rfft_fast_f32+0x62>
 8009352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009356:	edd1 7a00 	vldr	s15, [r1]
 800935a:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800935e:	edd1 6a01 	vldr	s13, [r1, #4]
 8009362:	1e68      	subs	r0, r5, #1
 8009364:	6975      	ldr	r5, [r6, #20]
 8009366:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800936a:	00c1      	lsls	r1, r0, #3
 800936c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009370:	ee27 7a23 	vmul.f32	s14, s14, s7
 8009374:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8009378:	ed82 7a00 	vstr	s14, [r2]
 800937c:	edc2 7a01 	vstr	s15, [r2, #4]
 8009380:	b3e0      	cbz	r0, 80093fc <arm_rfft_fast_f32+0x178>
 8009382:	3908      	subs	r1, #8
 8009384:	f104 0210 	add.w	r2, r4, #16
 8009388:	3510      	adds	r5, #16
 800938a:	440c      	add	r4, r1
 800938c:	f108 0110 	add.w	r1, r8, #16
 8009390:	ed94 7a02 	vldr	s14, [r4, #8]
 8009394:	3801      	subs	r0, #1
 8009396:	ed52 6a02 	vldr	s13, [r2, #-8]
 800939a:	f1a4 0408 	sub.w	r4, r4, #8
 800939e:	ed15 6a02 	vldr	s12, [r5, #-8]
 80093a2:	f102 0208 	add.w	r2, r2, #8
 80093a6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80093aa:	ed94 4a05 	vldr	s8, [r4, #20]
 80093ae:	ed12 5a03 	vldr	s10, [r2, #-12]
 80093b2:	ee77 6a26 	vadd.f32	s13, s14, s13
 80093b6:	ed55 5a01 	vldr	s11, [r5, #-4]
 80093ba:	f101 0108 	add.w	r1, r1, #8
 80093be:	ee26 3a27 	vmul.f32	s6, s12, s15
 80093c2:	f105 0508 	add.w	r5, r5, #8
 80093c6:	ee74 4a05 	vadd.f32	s9, s8, s10
 80093ca:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80093ce:	ee35 5a44 	vsub.f32	s10, s10, s8
 80093d2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80093d6:	ee26 6a24 	vmul.f32	s12, s12, s9
 80093da:	ee77 7a05 	vadd.f32	s15, s14, s10
 80093de:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80093e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80093e6:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80093ea:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80093ee:	ee27 7a23 	vmul.f32	s14, s14, s7
 80093f2:	ed41 7a03 	vstr	s15, [r1, #-12]
 80093f6:	ed01 7a04 	vstr	s14, [r1, #-16]
 80093fa:	d1c9      	bne.n	8009390 <arm_rfft_fast_f32+0x10c>
 80093fc:	4630      	mov	r0, r6
 80093fe:	4641      	mov	r1, r8
 8009400:	461a      	mov	r2, r3
 8009402:	2301      	movs	r3, #1
 8009404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009408:	f000 bb2a 	b.w	8009a60 <arm_cfft_f32>

0800940c <arm_cfft_radix8by2_f32>:
 800940c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009410:	ed2d 8b06 	vpush	{d8-d10}
 8009414:	f8b0 e000 	ldrh.w	lr, [r0]
 8009418:	4607      	mov	r7, r0
 800941a:	6842      	ldr	r2, [r0, #4]
 800941c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8009420:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8009424:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8009428:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800942c:	f000 80af 	beq.w	800958e <arm_cfft_radix8by2_f32+0x182>
 8009430:	3310      	adds	r3, #16
 8009432:	3210      	adds	r2, #16
 8009434:	f101 0610 	add.w	r6, r1, #16
 8009438:	f108 0510 	add.w	r5, r8, #16
 800943c:	18cc      	adds	r4, r1, r3
 800943e:	4443      	add	r3, r8
 8009440:	ed55 6a04 	vldr	s13, [r5, #-16]
 8009444:	f1be 0e01 	subs.w	lr, lr, #1
 8009448:	ed56 4a04 	vldr	s9, [r6, #-16]
 800944c:	f104 0410 	add.w	r4, r4, #16
 8009450:	ed55 7a02 	vldr	s15, [r5, #-8]
 8009454:	f106 0610 	add.w	r6, r6, #16
 8009458:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800945c:	ed53 0a04 	vldr	s1, [r3, #-16]
 8009460:	ed13 5a03 	vldr	s10, [r3, #-12]
 8009464:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009468:	ed13 3a02 	vldr	s6, [r3, #-8]
 800946c:	f102 0210 	add.w	r2, r2, #16
 8009470:	ed15 7a03 	vldr	s14, [r5, #-12]
 8009474:	f103 0310 	add.w	r3, r3, #16
 8009478:	ed55 2a01 	vldr	s5, [r5, #-4]
 800947c:	f105 0510 	add.w	r5, r5, #16
 8009480:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 8009484:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 8009488:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800948c:	ee33 8a83 	vadd.f32	s16, s7, s6
 8009490:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 8009494:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 8009498:	ee34 0a06 	vadd.f32	s0, s8, s12
 800949c:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 80094a0:	ee76 aa87 	vadd.f32	s21, s13, s14
 80094a4:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 80094a8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80094ac:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 80094b0:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80094b4:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 80094b8:	ee71 8a05 	vadd.f32	s17, s2, s10
 80094bc:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80094c0:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 80094c4:	ee72 9a22 	vadd.f32	s19, s4, s5
 80094c8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80094cc:	ee35 5a41 	vsub.f32	s10, s10, s2
 80094d0:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 80094d4:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 80094d8:	ee36 6a44 	vsub.f32	s12, s12, s8
 80094dc:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 80094e0:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80094e4:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 80094e8:	ee72 7a62 	vsub.f32	s15, s4, s5
 80094ec:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 80094f0:	ee73 2a63 	vsub.f32	s5, s6, s7
 80094f4:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 80094f8:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 80094fc:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8009500:	ee24 3a84 	vmul.f32	s6, s9, s8
 8009504:	ee27 2a26 	vmul.f32	s4, s14, s13
 8009508:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800950c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8009510:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009514:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009518:	ee65 6a26 	vmul.f32	s13, s10, s13
 800951c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8009520:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009524:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009528:	ee33 4a02 	vadd.f32	s8, s6, s4
 800952c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8009530:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 8009534:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 8009538:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 800953c:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8009540:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 8009544:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8009548:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800954c:	ee27 4a87 	vmul.f32	s8, s15, s14
 8009550:	ee61 5a87 	vmul.f32	s11, s3, s14
 8009554:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009558:	ee22 5a87 	vmul.f32	s10, s5, s14
 800955c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009560:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009564:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8009568:	ee74 4a84 	vadd.f32	s9, s9, s8
 800956c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009570:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009574:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009578:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 800957c:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 8009580:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 8009584:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 8009588:	f47f af5a 	bne.w	8009440 <arm_cfft_radix8by2_f32+0x34>
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	fa1f f48c 	uxth.w	r4, ip
 8009592:	4608      	mov	r0, r1
 8009594:	2302      	movs	r3, #2
 8009596:	4621      	mov	r1, r4
 8009598:	f000 fcac 	bl	8009ef4 <arm_radix8_butterfly_f32>
 800959c:	4640      	mov	r0, r8
 800959e:	4621      	mov	r1, r4
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	2302      	movs	r3, #2
 80095a4:	ecbd 8b06 	vpop	{d8-d10}
 80095a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095ac:	f000 bca2 	b.w	8009ef4 <arm_radix8_butterfly_f32>

080095b0 <arm_cfft_radix8by4_f32>:
 80095b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	ed2d 8b06 	vpush	{d8-d10}
 80095b8:	8804      	ldrh	r4, [r0, #0]
 80095ba:	b08f      	sub	sp, #60	@ 0x3c
 80095bc:	ed91 6a00 	vldr	s12, [r1]
 80095c0:	460a      	mov	r2, r1
 80095c2:	0864      	lsrs	r4, r4, #1
 80095c4:	ed91 7a01 	vldr	s14, [r1, #4]
 80095c8:	9101      	str	r1, [sp, #4]
 80095ca:	00a3      	lsls	r3, r4, #2
 80095cc:	9104      	str	r1, [sp, #16]
 80095ce:	0864      	lsrs	r4, r4, #1
 80095d0:	6841      	ldr	r1, [r0, #4]
 80095d2:	900c      	str	r0, [sp, #48]	@ 0x30
 80095d4:	4625      	mov	r5, r4
 80095d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095d8:	f101 0408 	add.w	r4, r1, #8
 80095dc:	f101 0610 	add.w	r6, r1, #16
 80095e0:	9406      	str	r4, [sp, #24]
 80095e2:	18d4      	adds	r4, r2, r3
 80095e4:	1eaa      	subs	r2, r5, #2
 80095e6:	f101 0518 	add.w	r5, r1, #24
 80095ea:	18e0      	adds	r0, r4, r3
 80095ec:	ed94 4a00 	vldr	s8, [r4]
 80095f0:	edd4 3a01 	vldr	s7, [r4, #4]
 80095f4:	46a6      	mov	lr, r4
 80095f6:	edd0 6a00 	vldr	s13, [r0]
 80095fa:	18c7      	adds	r7, r0, r3
 80095fc:	edd0 7a01 	vldr	s15, [r0, #4]
 8009600:	46a0      	mov	r8, r4
 8009602:	ee76 5a26 	vadd.f32	s11, s12, s13
 8009606:	edd7 4a00 	vldr	s9, [r7]
 800960a:	9402      	str	r4, [sp, #8]
 800960c:	4604      	mov	r4, r0
 800960e:	9507      	str	r5, [sp, #28]
 8009610:	4605      	mov	r5, r0
 8009612:	ee75 2a84 	vadd.f32	s5, s11, s8
 8009616:	900a      	str	r0, [sp, #40]	@ 0x28
 8009618:	9801      	ldr	r0, [sp, #4]
 800961a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800961e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009622:	ed97 5a01 	vldr	s10, [r7, #4]
 8009626:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800962a:	46bc      	mov	ip, r7
 800962c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009630:	9605      	str	r6, [sp, #20]
 8009632:	ee36 7a63 	vsub.f32	s14, s12, s7
 8009636:	9703      	str	r7, [sp, #12]
 8009638:	ee12 9a90 	vmov	r9, s5
 800963c:	ee33 3aa6 	vadd.f32	s6, s7, s13
 8009640:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8009644:	1f3e      	subs	r6, r7, #4
 8009646:	f840 9b08 	str.w	r9, [r0], #8
 800964a:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800964e:	edde 2a01 	vldr	s5, [lr, #4]
 8009652:	ee77 3ac4 	vsub.f32	s7, s15, s8
 8009656:	ee77 7a84 	vadd.f32	s15, s15, s8
 800965a:	ed9c 4a01 	vldr	s8, [ip, #4]
 800965e:	ee36 6a22 	vadd.f32	s12, s12, s5
 8009662:	9001      	str	r0, [sp, #4]
 8009664:	ee37 7a45 	vsub.f32	s14, s14, s10
 8009668:	9804      	ldr	r0, [sp, #16]
 800966a:	ee75 6a26 	vadd.f32	s13, s10, s13
 800966e:	f1ae 0704 	sub.w	r7, lr, #4
 8009672:	ee36 6a04 	vadd.f32	s12, s12, s8
 8009676:	ee33 4a45 	vsub.f32	s8, s6, s10
 800967a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800967e:	ee33 5aa4 	vadd.f32	s10, s7, s9
 8009682:	ed80 6a01 	vstr	s12, [r0, #4]
 8009686:	ee14 9a10 	vmov	r9, s8
 800968a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800968e:	f848 9b08 	str.w	r9, [r8], #8
 8009692:	ed8e 5a01 	vstr	s10, [lr, #4]
 8009696:	ee15 ea90 	vmov	lr, s11
 800969a:	f844 eb08 	str.w	lr, [r4], #8
 800969e:	ee16 ea90 	vmov	lr, s13
 80096a2:	9408      	str	r4, [sp, #32]
 80096a4:	462c      	mov	r4, r5
 80096a6:	ed85 7a01 	vstr	s14, [r5, #4]
 80096aa:	9d03      	ldr	r5, [sp, #12]
 80096ac:	f84c eb08 	str.w	lr, [ip], #8
 80096b0:	edc5 7a01 	vstr	s15, [r5, #4]
 80096b4:	0855      	lsrs	r5, r2, #1
 80096b6:	9509      	str	r5, [sp, #36]	@ 0x24
 80096b8:	f000 8130 	beq.w	800991c <arm_cfft_radix8by4_f32+0x36c>
 80096bc:	9804      	ldr	r0, [sp, #16]
 80096be:	3b08      	subs	r3, #8
 80096c0:	46ab      	mov	fp, r5
 80096c2:	f1a4 020c 	sub.w	r2, r4, #12
 80096c6:	f100 0510 	add.w	r5, r0, #16
 80096ca:	f101 0920 	add.w	r9, r1, #32
 80096ce:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 80096d2:	f8dd a014 	ldr.w	sl, [sp, #20]
 80096d6:	4433      	add	r3, r6
 80096d8:	3410      	adds	r4, #16
 80096da:	4660      	mov	r0, ip
 80096dc:	4641      	mov	r1, r8
 80096de:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 80096e2:	ed54 6a02 	vldr	s13, [r4, #-8]
 80096e6:	f1bb 0b01 	subs.w	fp, fp, #1
 80096ea:	ed55 5a02 	vldr	s11, [r5, #-8]
 80096ee:	f10a 0a08 	add.w	sl, sl, #8
 80096f2:	edd1 7a00 	vldr	s15, [r1]
 80096f6:	f105 0508 	add.w	r5, r5, #8
 80096fa:	ee75 3aa6 	vadd.f32	s7, s11, s13
 80096fe:	edd0 2a00 	vldr	s5, [r0]
 8009702:	ed14 7a01 	vldr	s14, [r4, #-4]
 8009706:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800970a:	ed55 6a03 	vldr	s13, [r5, #-12]
 800970e:	f1a2 0208 	sub.w	r2, r2, #8
 8009712:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8009716:	ed90 2a01 	vldr	s4, [r0, #4]
 800971a:	ee36 5a87 	vadd.f32	s10, s13, s14
 800971e:	ed91 6a01 	vldr	s12, [r1, #4]
 8009722:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009726:	f109 0910 	add.w	r9, r9, #16
 800972a:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800972e:	f104 0408 	add.w	r4, r4, #8
 8009732:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8009736:	f10e 0e18 	add.w	lr, lr, #24
 800973a:	ee37 3a67 	vsub.f32	s6, s14, s15
 800973e:	f1a3 0308 	sub.w	r3, r3, #8
 8009742:	ed45 6a04 	vstr	s13, [r5, #-16]
 8009746:	ee37 7a27 	vadd.f32	s14, s14, s15
 800974a:	edd1 6a01 	vldr	s13, [r1, #4]
 800974e:	ee76 1a25 	vadd.f32	s3, s12, s11
 8009752:	edd0 4a01 	vldr	s9, [r0, #4]
 8009756:	ee33 3a22 	vadd.f32	s6, s6, s5
 800975a:	ee75 6a26 	vadd.f32	s13, s10, s13
 800975e:	ee35 5a46 	vsub.f32	s10, s10, s12
 8009762:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8009766:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800976a:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800976e:	ee35 5a42 	vsub.f32	s10, s10, s4
 8009772:	ed45 6a03 	vstr	s13, [r5, #-12]
 8009776:	ee32 2a06 	vadd.f32	s4, s4, s12
 800977a:	edd6 7a00 	vldr	s15, [r6]
 800977e:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8009782:	ed97 1a00 	vldr	s2, [r7]
 8009786:	ee77 2a62 	vsub.f32	s5, s14, s5
 800978a:	ed92 8a04 	vldr	s16, [r2, #16]
 800978e:	ee71 8a27 	vadd.f32	s17, s2, s15
 8009792:	ed93 aa04 	vldr	s20, [r3, #16]
 8009796:	ed16 7a01 	vldr	s14, [r6, #-4]
 800979a:	ee71 7a67 	vsub.f32	s15, s2, s15
 800979e:	ed57 0a01 	vldr	s1, [r7, #-4]
 80097a2:	ee38 1a4a 	vsub.f32	s2, s16, s20
 80097a6:	ee38 6a88 	vadd.f32	s12, s17, s16
 80097aa:	edd3 9a03 	vldr	s19, [r3, #12]
 80097ae:	ee30 0a87 	vadd.f32	s0, s1, s14
 80097b2:	ed92 9a03 	vldr	s18, [r2, #12]
 80097b6:	ee78 5ac8 	vsub.f32	s11, s17, s16
 80097ba:	ee3a 6a06 	vadd.f32	s12, s20, s12
 80097be:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80097c2:	ee37 4ac9 	vsub.f32	s8, s15, s18
 80097c6:	ee16 ca10 	vmov	ip, s12
 80097ca:	ee30 6a49 	vsub.f32	s12, s0, s18
 80097ce:	ee71 4a07 	vadd.f32	s9, s2, s14
 80097d2:	f847 c908 	str.w	ip, [r7], #-8
 80097d6:	ee34 4a29 	vadd.f32	s8, s8, s19
 80097da:	edd2 8a03 	vldr	s17, [r2, #12]
 80097de:	ee39 9ac9 	vsub.f32	s18, s19, s18
 80097e2:	ed93 8a03 	vldr	s16, [r3, #12]
 80097e6:	ee71 0a47 	vsub.f32	s1, s2, s14
 80097ea:	ee30 0a28 	vadd.f32	s0, s0, s17
 80097ee:	ee39 1a67 	vsub.f32	s2, s18, s15
 80097f2:	ee36 6a69 	vsub.f32	s12, s12, s19
 80097f6:	ee30 0a08 	vadd.f32	s0, s0, s16
 80097fa:	ee75 5aca 	vsub.f32	s11, s11, s20
 80097fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8009802:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8009806:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800980a:	ee21 8a80 	vmul.f32	s16, s3, s0
 800980e:	ee23 7a26 	vmul.f32	s14, s6, s13
 8009812:	ee64 7a26 	vmul.f32	s15, s8, s13
 8009816:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800981a:	ee24 4a00 	vmul.f32	s8, s8, s0
 800981e:	ee23 3a00 	vmul.f32	s6, s6, s0
 8009822:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8009826:	ee24 0a80 	vmul.f32	s0, s9, s0
 800982a:	ee38 7a07 	vadd.f32	s14, s16, s14
 800982e:	ee76 6a84 	vadd.f32	s13, s13, s8
 8009832:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009836:	ee33 3a61 	vsub.f32	s6, s6, s3
 800983a:	ee17 ca10 	vmov	ip, s14
 800983e:	f841 cb08 	str.w	ip, [r1], #8
 8009842:	ed01 3a01 	vstr	s6, [r1, #-4]
 8009846:	ed82 0a04 	vstr	s0, [r2, #16]
 800984a:	edc2 6a03 	vstr	s13, [r2, #12]
 800984e:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 8009852:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 8009856:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800985a:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800985e:	ee65 4a27 	vmul.f32	s9, s10, s15
 8009862:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8009866:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800986a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800986e:	ee25 5a26 	vmul.f32	s10, s10, s13
 8009872:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800987a:	ee34 6a24 	vadd.f32	s12, s8, s9
 800987e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8009882:	ee35 5a63 	vsub.f32	s10, s10, s7
 8009886:	ee17 ca90 	vmov	ip, s15
 800988a:	ed04 6a04 	vstr	s12, [r4, #-16]
 800988e:	ed04 5a03 	vstr	s10, [r4, #-12]
 8009892:	f846 c908 	str.w	ip, [r6], #-8
 8009896:	edc6 6a01 	vstr	s13, [r6, #4]
 800989a:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 800989e:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 80098a2:	ee62 5a27 	vmul.f32	s11, s4, s15
 80098a6:	ee22 6a87 	vmul.f32	s12, s5, s14
 80098aa:	ee22 2a07 	vmul.f32	s4, s4, s14
 80098ae:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80098b2:	ee61 6a07 	vmul.f32	s13, s2, s14
 80098b6:	ee20 7a87 	vmul.f32	s14, s1, s14
 80098ba:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80098be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80098c2:	ee35 6a86 	vadd.f32	s12, s11, s12
 80098c6:	ee72 2ac2 	vsub.f32	s5, s5, s4
 80098ca:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80098ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098d2:	ee16 ca10 	vmov	ip, s12
 80098d6:	f840 cb08 	str.w	ip, [r0], #8
 80098da:	ed40 2a01 	vstr	s5, [r0, #-4]
 80098de:	edc3 0a04 	vstr	s1, [r3, #16]
 80098e2:	edc3 7a03 	vstr	s15, [r3, #12]
 80098e6:	f47f aefc 	bne.w	80096e2 <arm_cfft_radix8by4_f32+0x132>
 80098ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098ec:	9805      	ldr	r0, [sp, #20]
 80098ee:	00cb      	lsls	r3, r1, #3
 80098f0:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 80098f4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80098f8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80098fc:	4498      	add	r8, r3
 80098fe:	449c      	add	ip, r3
 8009900:	9105      	str	r1, [sp, #20]
 8009902:	9901      	ldr	r1, [sp, #4]
 8009904:	4419      	add	r1, r3
 8009906:	9101      	str	r1, [sp, #4]
 8009908:	9906      	ldr	r1, [sp, #24]
 800990a:	4419      	add	r1, r3
 800990c:	9106      	str	r1, [sp, #24]
 800990e:	9908      	ldr	r1, [sp, #32]
 8009910:	4419      	add	r1, r3
 8009912:	9b07      	ldr	r3, [sp, #28]
 8009914:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009918:	9108      	str	r1, [sp, #32]
 800991a:	9307      	str	r3, [sp, #28]
 800991c:	9a01      	ldr	r2, [sp, #4]
 800991e:	2304      	movs	r3, #4
 8009920:	9e08      	ldr	r6, [sp, #32]
 8009922:	edd2 6a00 	vldr	s13, [r2]
 8009926:	ed96 4a00 	vldr	s8, [r6]
 800992a:	edd8 7a00 	vldr	s15, [r8]
 800992e:	ee36 6a84 	vadd.f32	s12, s13, s8
 8009932:	eddc 2a00 	vldr	s5, [ip]
 8009936:	ed96 7a01 	vldr	s14, [r6, #4]
 800993a:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800993e:	edd2 6a01 	vldr	s13, [r2, #4]
 8009942:	ee76 4a27 	vadd.f32	s9, s12, s15
 8009946:	ed98 2a01 	vldr	s4, [r8, #4]
 800994a:	ee76 5a87 	vadd.f32	s11, s13, s14
 800994e:	ed9c 5a01 	vldr	s10, [ip, #4]
 8009952:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009956:	9d05      	ldr	r5, [sp, #20]
 8009958:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800995c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8009960:	ee72 3a04 	vadd.f32	s7, s4, s8
 8009964:	9804      	ldr	r0, [sp, #16]
 8009966:	ee77 4a67 	vsub.f32	s9, s14, s15
 800996a:	4621      	mov	r1, r4
 800996c:	edc2 6a00 	vstr	s13, [r2]
 8009970:	ee76 6a67 	vsub.f32	s13, s12, s15
 8009974:	ed98 3a01 	vldr	s6, [r8, #4]
 8009978:	ee35 6ac2 	vsub.f32	s12, s11, s4
 800997c:	eddc 1a01 	vldr	s3, [ip, #4]
 8009980:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8009984:	ee35 3a83 	vadd.f32	s6, s11, s6
 8009988:	ee34 4a42 	vsub.f32	s8, s8, s4
 800998c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009990:	ee73 5a21 	vadd.f32	s11, s6, s3
 8009994:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009998:	ee36 6a45 	vsub.f32	s12, s12, s10
 800999c:	edc2 5a01 	vstr	s11, [r2, #4]
 80099a0:	ee35 5a04 	vadd.f32	s10, s10, s8
 80099a4:	9a06      	ldr	r2, [sp, #24]
 80099a6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80099aa:	edd2 7a00 	vldr	s15, [r2]
 80099ae:	edd2 5a01 	vldr	s11, [r2, #4]
 80099b2:	ee23 4aa7 	vmul.f32	s8, s7, s15
 80099b6:	ee63 3aa5 	vmul.f32	s7, s7, s11
 80099ba:	ee64 5aa5 	vmul.f32	s11, s9, s11
 80099be:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80099c2:	ee77 7a62 	vsub.f32	s15, s14, s5
 80099c6:	ee74 5a25 	vadd.f32	s11, s8, s11
 80099ca:	ee74 4ae3 	vsub.f32	s9, s9, s7
 80099ce:	edc8 5a00 	vstr	s11, [r8]
 80099d2:	edc8 4a01 	vstr	s9, [r8, #4]
 80099d6:	edd5 4a01 	vldr	s9, [r5, #4]
 80099da:	ed95 7a00 	vldr	s14, [r5]
 80099de:	9d07      	ldr	r5, [sp, #28]
 80099e0:	ee66 5a87 	vmul.f32	s11, s13, s14
 80099e4:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80099e8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80099ec:	ee26 6a24 	vmul.f32	s12, s12, s9
 80099f0:	ee77 6a66 	vsub.f32	s13, s14, s13
 80099f4:	ee35 6a86 	vadd.f32	s12, s11, s12
 80099f8:	edc6 6a01 	vstr	s13, [r6, #4]
 80099fc:	ed86 6a00 	vstr	s12, [r6]
 8009a00:	ed95 6a01 	vldr	s12, [r5, #4]
 8009a04:	ed95 7a00 	vldr	s14, [r5]
 8009a08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a0a:	ee65 6a07 	vmul.f32	s13, s10, s14
 8009a0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009a12:	ee25 5a06 	vmul.f32	s10, s10, s12
 8009a16:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009a1a:	ee37 5a45 	vsub.f32	s10, s14, s10
 8009a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a22:	ed8c 5a01 	vstr	s10, [ip, #4]
 8009a26:	edcc 7a00 	vstr	s15, [ip]
 8009a2a:	6872      	ldr	r2, [r6, #4]
 8009a2c:	f000 fa62 	bl	8009ef4 <arm_radix8_butterfly_f32>
 8009a30:	9802      	ldr	r0, [sp, #8]
 8009a32:	4621      	mov	r1, r4
 8009a34:	6872      	ldr	r2, [r6, #4]
 8009a36:	2304      	movs	r3, #4
 8009a38:	f000 fa5c 	bl	8009ef4 <arm_radix8_butterfly_f32>
 8009a3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009a3e:	4621      	mov	r1, r4
 8009a40:	6872      	ldr	r2, [r6, #4]
 8009a42:	2304      	movs	r3, #4
 8009a44:	f000 fa56 	bl	8009ef4 <arm_radix8_butterfly_f32>
 8009a48:	9803      	ldr	r0, [sp, #12]
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	6872      	ldr	r2, [r6, #4]
 8009a4e:	2304      	movs	r3, #4
 8009a50:	b00f      	add	sp, #60	@ 0x3c
 8009a52:	ecbd 8b06 	vpop	{d8-d10}
 8009a56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5a:	f000 ba4b 	b.w	8009ef4 <arm_radix8_butterfly_f32>
 8009a5e:	bf00      	nop

08009a60 <arm_cfft_f32>:
 8009a60:	2a01      	cmp	r2, #1
 8009a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a66:	4606      	mov	r6, r0
 8009a68:	4617      	mov	r7, r2
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	4698      	mov	r8, r3
 8009a6e:	8805      	ldrh	r5, [r0, #0]
 8009a70:	d053      	beq.n	8009b1a <arm_cfft_f32+0xba>
 8009a72:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8009a76:	d04b      	beq.n	8009b10 <arm_cfft_f32+0xb0>
 8009a78:	d916      	bls.n	8009aa8 <arm_cfft_f32+0x48>
 8009a7a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8009a7e:	d01a      	beq.n	8009ab6 <arm_cfft_f32+0x56>
 8009a80:	d95a      	bls.n	8009b38 <arm_cfft_f32+0xd8>
 8009a82:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8009a86:	d043      	beq.n	8009b10 <arm_cfft_f32+0xb0>
 8009a88:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8009a8c:	d105      	bne.n	8009a9a <arm_cfft_f32+0x3a>
 8009a8e:	4620      	mov	r0, r4
 8009a90:	4629      	mov	r1, r5
 8009a92:	6872      	ldr	r2, [r6, #4]
 8009a94:	2301      	movs	r3, #1
 8009a96:	f000 fa2d 	bl	8009ef4 <arm_radix8_butterfly_f32>
 8009a9a:	f1b8 0f00 	cmp.w	r8, #0
 8009a9e:	d111      	bne.n	8009ac4 <arm_cfft_f32+0x64>
 8009aa0:	2f01      	cmp	r7, #1
 8009aa2:	d016      	beq.n	8009ad2 <arm_cfft_f32+0x72>
 8009aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa8:	2d20      	cmp	r5, #32
 8009aaa:	d031      	beq.n	8009b10 <arm_cfft_f32+0xb0>
 8009aac:	d948      	bls.n	8009b40 <arm_cfft_f32+0xe0>
 8009aae:	2d40      	cmp	r5, #64	@ 0x40
 8009ab0:	d0ed      	beq.n	8009a8e <arm_cfft_f32+0x2e>
 8009ab2:	2d80      	cmp	r5, #128	@ 0x80
 8009ab4:	d1f1      	bne.n	8009a9a <arm_cfft_f32+0x3a>
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	4621      	mov	r1, r4
 8009aba:	f7ff fca7 	bl	800940c <arm_cfft_radix8by2_f32>
 8009abe:	f1b8 0f00 	cmp.w	r8, #0
 8009ac2:	d0ed      	beq.n	8009aa0 <arm_cfft_f32+0x40>
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	89b1      	ldrh	r1, [r6, #12]
 8009ac8:	68b2      	ldr	r2, [r6, #8]
 8009aca:	f7f6 fc09 	bl	80002e0 <arm_bitreversal_32>
 8009ace:	2f01      	cmp	r7, #1
 8009ad0:	d1e8      	bne.n	8009aa4 <arm_cfft_f32+0x44>
 8009ad2:	ee07 5a90 	vmov	s15, r5
 8009ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ada:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009ade:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8009ae2:	2d00      	cmp	r5, #0
 8009ae4:	d0de      	beq.n	8009aa4 <arm_cfft_f32+0x44>
 8009ae6:	f104 0108 	add.w	r1, r4, #8
 8009aea:	2300      	movs	r3, #0
 8009aec:	ed11 7a02 	vldr	s14, [r1, #-8]
 8009af0:	3301      	adds	r3, #1
 8009af2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009af6:	3108      	adds	r1, #8
 8009af8:	429d      	cmp	r5, r3
 8009afa:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009afe:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009b02:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009b06:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009b0a:	d1ef      	bne.n	8009aec <arm_cfft_f32+0x8c>
 8009b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b10:	4630      	mov	r0, r6
 8009b12:	4621      	mov	r1, r4
 8009b14:	f7ff fd4c 	bl	80095b0 <arm_cfft_radix8by4_f32>
 8009b18:	e7bf      	b.n	8009a9a <arm_cfft_f32+0x3a>
 8009b1a:	b1a5      	cbz	r5, 8009b46 <arm_cfft_f32+0xe6>
 8009b1c:	f101 030c 	add.w	r3, r1, #12
 8009b20:	2200      	movs	r2, #0
 8009b22:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009b26:	3201      	adds	r2, #1
 8009b28:	3308      	adds	r3, #8
 8009b2a:	eef1 7a67 	vneg.f32	s15, s15
 8009b2e:	4295      	cmp	r5, r2
 8009b30:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009b34:	d1f5      	bne.n	8009b22 <arm_cfft_f32+0xc2>
 8009b36:	e79c      	b.n	8009a72 <arm_cfft_f32+0x12>
 8009b38:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8009b3c:	d0a7      	beq.n	8009a8e <arm_cfft_f32+0x2e>
 8009b3e:	e7ac      	b.n	8009a9a <arm_cfft_f32+0x3a>
 8009b40:	2d10      	cmp	r5, #16
 8009b42:	d0b8      	beq.n	8009ab6 <arm_cfft_f32+0x56>
 8009b44:	e7a9      	b.n	8009a9a <arm_cfft_f32+0x3a>
 8009b46:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8009b4a:	d896      	bhi.n	8009a7a <arm_cfft_f32+0x1a>
 8009b4c:	e7ac      	b.n	8009aa8 <arm_cfft_f32+0x48>
 8009b4e:	bf00      	nop

08009b50 <arm_biquad_cascade_df1_init_f32>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	461d      	mov	r5, r3
 8009b58:	2100      	movs	r1, #0
 8009b5a:	60a2      	str	r2, [r4, #8]
 8009b5c:	0102      	lsls	r2, r0, #4
 8009b5e:	6020      	str	r0, [r4, #0]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f000 fed5 	bl	800a910 <memset>
 8009b66:	6065      	str	r5, [r4, #4]
 8009b68:	bd38      	pop	{r3, r4, r5, pc}
 8009b6a:	bf00      	nop

08009b6c <arm_biquad_cascade_df1_f32>:
 8009b6c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8009b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b74:	4696      	mov	lr, r2
 8009b76:	6886      	ldr	r6, [r0, #8]
 8009b78:	6845      	ldr	r5, [r0, #4]
 8009b7a:	ea4f 180c 	mov.w	r8, ip, lsl #4
 8009b7e:	f003 0203 	and.w	r2, r3, #3
 8009b82:	3614      	adds	r6, #20
 8009b84:	3510      	adds	r5, #16
 8009b86:	6807      	ldr	r7, [r0, #0]
 8009b88:	eb0e 0908 	add.w	r9, lr, r8
 8009b8c:	ed56 3a05 	vldr	s7, [r6, #-20]	@ 0xffffffec
 8009b90:	ed16 3a04 	vldr	s6, [r6, #-16]
 8009b94:	ed56 2a03 	vldr	s5, [r6, #-12]
 8009b98:	ed16 2a02 	vldr	s4, [r6, #-8]
 8009b9c:	ed56 1a01 	vldr	s3, [r6, #-4]
 8009ba0:	ed15 1a04 	vldr	s2, [r5, #-16]
 8009ba4:	ed55 0a03 	vldr	s1, [r5, #-12]
 8009ba8:	ed55 7a02 	vldr	s15, [r5, #-8]
 8009bac:	ed15 6a01 	vldr	s12, [r5, #-4]
 8009bb0:	f1bc 0f00 	cmp.w	ip, #0
 8009bb4:	f000 80a3 	beq.w	8009cfe <arm_biquad_cascade_df1_f32+0x192>
 8009bb8:	f101 0010 	add.w	r0, r1, #16
 8009bbc:	f10e 0310 	add.w	r3, lr, #16
 8009bc0:	4664      	mov	r4, ip
 8009bc2:	ed10 4a04 	vldr	s8, [r0, #-16]
 8009bc6:	ee23 7a01 	vmul.f32	s14, s6, s2
 8009bca:	ee62 0aa0 	vmul.f32	s1, s5, s1
 8009bce:	3c01      	subs	r4, #1
 8009bd0:	ee23 5a84 	vmul.f32	s10, s7, s8
 8009bd4:	f100 0010 	add.w	r0, r0, #16
 8009bd8:	ee22 0a27 	vmul.f32	s0, s4, s15
 8009bdc:	f103 0310 	add.w	r3, r3, #16
 8009be0:	ee21 6a86 	vmul.f32	s12, s3, s12
 8009be4:	ee75 4a07 	vadd.f32	s9, s10, s14
 8009be8:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8009bec:	ee63 5a04 	vmul.f32	s11, s6, s8
 8009bf0:	ee34 7aa0 	vadd.f32	s14, s9, s1
 8009bf4:	ee22 1a81 	vmul.f32	s2, s5, s2
 8009bf8:	ee22 4a84 	vmul.f32	s8, s5, s8
 8009bfc:	ee37 7a00 	vadd.f32	s14, s14, s0
 8009c00:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009c04:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 8009c08:	ee22 7a06 	vmul.f32	s14, s4, s12
 8009c0c:	ed50 7a07 	vldr	s15, [r0, #-28]	@ 0xffffffe4
 8009c10:	ee21 6a86 	vmul.f32	s12, s3, s12
 8009c14:	ee23 5aa7 	vmul.f32	s10, s7, s15
 8009c18:	ee23 0a27 	vmul.f32	s0, s6, s15
 8009c1c:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8009c20:	ee35 5a25 	vadd.f32	s10, s10, s11
 8009c24:	ee75 5a01 	vadd.f32	s11, s10, s2
 8009c28:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009c2c:	ee75 6aa6 	vadd.f32	s13, s11, s13
 8009c30:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8009c34:	ee62 7a26 	vmul.f32	s15, s4, s13
 8009c38:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 8009c3c:	ee61 5aa6 	vmul.f32	s11, s3, s13
 8009c40:	ee23 5aa0 	vmul.f32	s10, s7, s1
 8009c44:	ee23 7a20 	vmul.f32	s14, s6, s1
 8009c48:	ee35 5a00 	vadd.f32	s10, s10, s0
 8009c4c:	ee75 6a04 	vadd.f32	s13, s10, s8
 8009c50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009c54:	ee36 6a86 	vadd.f32	s12, s13, s12
 8009c58:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 8009c5c:	ee62 7a06 	vmul.f32	s15, s4, s12
 8009c60:	ed10 1a05 	vldr	s2, [r0, #-20]	@ 0xffffffec
 8009c64:	ee63 6a81 	vmul.f32	s13, s7, s2
 8009c68:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009c6c:	ee37 7a24 	vadd.f32	s14, s14, s9
 8009c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c74:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009c78:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8009c7c:	d1a1      	bne.n	8009bc2 <arm_biquad_cascade_df1_f32+0x56>
 8009c7e:	4441      	add	r1, r8
 8009c80:	4648      	mov	r0, r9
 8009c82:	b39a      	cbz	r2, 8009cec <arm_biquad_cascade_df1_f32+0x180>
 8009c84:	4613      	mov	r3, r2
 8009c86:	e003      	b.n	8009c90 <arm_biquad_cascade_df1_f32+0x124>
 8009c88:	eef0 7a45 	vmov.f32	s15, s10
 8009c8c:	eeb0 1a47 	vmov.f32	s2, s14
 8009c90:	ecb1 7a01 	vldmia	r1!, {s14}
 8009c94:	ee63 4a01 	vmul.f32	s9, s6, s2
 8009c98:	ee62 5aa0 	vmul.f32	s11, s5, s1
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	ee23 4a87 	vmul.f32	s8, s7, s14
 8009ca2:	ee22 5a27 	vmul.f32	s10, s4, s15
 8009ca6:	ee61 6a86 	vmul.f32	s13, s3, s12
 8009caa:	ee74 4a24 	vadd.f32	s9, s8, s9
 8009cae:	eef0 0a41 	vmov.f32	s1, s2
 8009cb2:	eeb0 6a67 	vmov.f32	s12, s15
 8009cb6:	ee74 4aa5 	vadd.f32	s9, s9, s11
 8009cba:	ee34 5a85 	vadd.f32	s10, s9, s10
 8009cbe:	ee35 5a26 	vadd.f32	s10, s10, s13
 8009cc2:	eca0 5a01 	vstmia	r0!, {s10}
 8009cc6:	d1df      	bne.n	8009c88 <arm_biquad_cascade_df1_f32+0x11c>
 8009cc8:	3f01      	subs	r7, #1
 8009cca:	ed05 7a04 	vstr	s14, [r5, #-16]
 8009cce:	ed05 1a03 	vstr	s2, [r5, #-12]
 8009cd2:	f106 0614 	add.w	r6, r6, #20
 8009cd6:	ed05 5a02 	vstr	s10, [r5, #-8]
 8009cda:	4671      	mov	r1, lr
 8009cdc:	ed45 7a01 	vstr	s15, [r5, #-4]
 8009ce0:	f105 0510 	add.w	r5, r5, #16
 8009ce4:	f47f af52 	bne.w	8009b8c <arm_biquad_cascade_df1_f32+0x20>
 8009ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cec:	eeb0 5a67 	vmov.f32	s10, s15
 8009cf0:	eeb0 7a41 	vmov.f32	s14, s2
 8009cf4:	eef0 7a46 	vmov.f32	s15, s12
 8009cf8:	eeb0 1a60 	vmov.f32	s2, s1
 8009cfc:	e7e4      	b.n	8009cc8 <arm_biquad_cascade_df1_f32+0x15c>
 8009cfe:	4670      	mov	r0, lr
 8009d00:	e7bf      	b.n	8009c82 <arm_biquad_cascade_df1_f32+0x116>
 8009d02:	bf00      	nop

08009d04 <arm_scale_f32>:
 8009d04:	b470      	push	{r4, r5, r6}
 8009d06:	0896      	lsrs	r6, r2, #2
 8009d08:	d025      	beq.n	8009d56 <arm_scale_f32+0x52>
 8009d0a:	f100 0410 	add.w	r4, r0, #16
 8009d0e:	f101 0310 	add.w	r3, r1, #16
 8009d12:	4635      	mov	r5, r6
 8009d14:	ed14 6a04 	vldr	s12, [r4, #-16]
 8009d18:	3d01      	subs	r5, #1
 8009d1a:	ed54 6a03 	vldr	s13, [r4, #-12]
 8009d1e:	f103 0310 	add.w	r3, r3, #16
 8009d22:	ed14 7a02 	vldr	s14, [r4, #-8]
 8009d26:	ee26 6a00 	vmul.f32	s12, s12, s0
 8009d2a:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009d2e:	ee66 6a80 	vmul.f32	s13, s13, s0
 8009d32:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009d36:	f104 0410 	add.w	r4, r4, #16
 8009d3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009d3e:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 8009d42:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8009d46:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 8009d4a:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8009d4e:	d1e1      	bne.n	8009d14 <arm_scale_f32+0x10>
 8009d50:	0136      	lsls	r6, r6, #4
 8009d52:	4430      	add	r0, r6
 8009d54:	4431      	add	r1, r6
 8009d56:	f012 0203 	ands.w	r2, r2, #3
 8009d5a:	d007      	beq.n	8009d6c <arm_scale_f32+0x68>
 8009d5c:	ecf0 7a01 	vldmia	r0!, {s15}
 8009d60:	3a01      	subs	r2, #1
 8009d62:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009d66:	ece1 7a01 	vstmia	r1!, {s15}
 8009d6a:	d1f7      	bne.n	8009d5c <arm_scale_f32+0x58>
 8009d6c:	bc70      	pop	{r4, r5, r6}
 8009d6e:	4770      	bx	lr

08009d70 <arm_offset_f32>:
 8009d70:	b470      	push	{r4, r5, r6}
 8009d72:	0896      	lsrs	r6, r2, #2
 8009d74:	d025      	beq.n	8009dc2 <arm_offset_f32+0x52>
 8009d76:	f100 0410 	add.w	r4, r0, #16
 8009d7a:	f101 0310 	add.w	r3, r1, #16
 8009d7e:	4635      	mov	r5, r6
 8009d80:	ed14 6a04 	vldr	s12, [r4, #-16]
 8009d84:	3d01      	subs	r5, #1
 8009d86:	ed54 6a03 	vldr	s13, [r4, #-12]
 8009d8a:	f103 0310 	add.w	r3, r3, #16
 8009d8e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8009d92:	ee36 6a00 	vadd.f32	s12, s12, s0
 8009d96:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009d9a:	ee76 6a80 	vadd.f32	s13, s13, s0
 8009d9e:	ee37 7a00 	vadd.f32	s14, s14, s0
 8009da2:	f104 0410 	add.w	r4, r4, #16
 8009da6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009daa:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 8009dae:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8009db2:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 8009db6:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8009dba:	d1e1      	bne.n	8009d80 <arm_offset_f32+0x10>
 8009dbc:	0136      	lsls	r6, r6, #4
 8009dbe:	4430      	add	r0, r6
 8009dc0:	4431      	add	r1, r6
 8009dc2:	f012 0203 	ands.w	r2, r2, #3
 8009dc6:	d007      	beq.n	8009dd8 <arm_offset_f32+0x68>
 8009dc8:	ecf0 7a01 	vldmia	r0!, {s15}
 8009dcc:	3a01      	subs	r2, #1
 8009dce:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009dd2:	ece1 7a01 	vstmia	r1!, {s15}
 8009dd6:	d1f7      	bne.n	8009dc8 <arm_offset_f32+0x58>
 8009dd8:	bc70      	pop	{r4, r5, r6}
 8009dda:	4770      	bx	lr

08009ddc <arm_mult_f32>:
 8009ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dde:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8009de2:	d033      	beq.n	8009e4c <arm_mult_f32+0x70>
 8009de4:	f100 0610 	add.w	r6, r0, #16
 8009de8:	f101 0510 	add.w	r5, r1, #16
 8009dec:	f102 0410 	add.w	r4, r2, #16
 8009df0:	4677      	mov	r7, lr
 8009df2:	ed16 7a04 	vldr	s14, [r6, #-16]
 8009df6:	3f01      	subs	r7, #1
 8009df8:	ed15 6a04 	vldr	s12, [r5, #-16]
 8009dfc:	f106 0610 	add.w	r6, r6, #16
 8009e00:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8009e04:	f105 0510 	add.w	r5, r5, #16
 8009e08:	ee27 6a06 	vmul.f32	s12, s14, s12
 8009e0c:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 8009e10:	ed16 7a07 	vldr	s14, [r6, #-28]	@ 0xffffffe4
 8009e14:	f104 0410 	add.w	r4, r4, #16
 8009e18:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 8009e1c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009e20:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8009e24:	ed04 6a08 	vstr	s12, [r4, #-32]	@ 0xffffffe0
 8009e28:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009e2c:	ed15 6a05 	vldr	s12, [r5, #-20]	@ 0xffffffec
 8009e30:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 8009e34:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009e38:	ed04 7a07 	vstr	s14, [r4, #-28]	@ 0xffffffe4
 8009e3c:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8009e40:	d1d7      	bne.n	8009df2 <arm_mult_f32+0x16>
 8009e42:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009e46:	4420      	add	r0, r4
 8009e48:	4421      	add	r1, r4
 8009e4a:	4422      	add	r2, r4
 8009e4c:	f013 0303 	ands.w	r3, r3, #3
 8009e50:	d009      	beq.n	8009e66 <arm_mult_f32+0x8a>
 8009e52:	ecf0 7a01 	vldmia	r0!, {s15}
 8009e56:	3b01      	subs	r3, #1
 8009e58:	ecb1 7a01 	vldmia	r1!, {s14}
 8009e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e60:	ece2 7a01 	vstmia	r2!, {s15}
 8009e64:	d1f5      	bne.n	8009e52 <arm_mult_f32+0x76>
 8009e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e68 <arm_add_f32>:
 8009e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e6a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8009e6e:	d033      	beq.n	8009ed8 <arm_add_f32+0x70>
 8009e70:	f100 0610 	add.w	r6, r0, #16
 8009e74:	f101 0510 	add.w	r5, r1, #16
 8009e78:	f102 0410 	add.w	r4, r2, #16
 8009e7c:	4677      	mov	r7, lr
 8009e7e:	ed16 7a03 	vldr	s14, [r6, #-12]
 8009e82:	3f01      	subs	r7, #1
 8009e84:	ed56 7a02 	vldr	s15, [r6, #-8]
 8009e88:	f105 0510 	add.w	r5, r5, #16
 8009e8c:	ed15 6a07 	vldr	s12, [r5, #-28]	@ 0xffffffe4
 8009e90:	f106 0610 	add.w	r6, r6, #16
 8009e94:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 8009e98:	f104 0410 	add.w	r4, r4, #16
 8009e9c:	ed15 5a05 	vldr	s10, [r5, #-20]	@ 0xffffffec
 8009ea0:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009ea4:	ed55 5a08 	vldr	s11, [r5, #-32]	@ 0xffffffe0
 8009ea8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8009eac:	ed16 7a05 	vldr	s14, [r6, #-20]	@ 0xffffffec
 8009eb0:	ed56 7a08 	vldr	s15, [r6, #-32]	@ 0xffffffe0
 8009eb4:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009eb8:	ed04 6a07 	vstr	s12, [r4, #-28]	@ 0xffffffe4
 8009ebc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009ec0:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 8009ec4:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 8009ec8:	ed44 7a08 	vstr	s15, [r4, #-32]	@ 0xffffffe0
 8009ecc:	d1d7      	bne.n	8009e7e <arm_add_f32+0x16>
 8009ece:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009ed2:	4420      	add	r0, r4
 8009ed4:	4421      	add	r1, r4
 8009ed6:	4422      	add	r2, r4
 8009ed8:	f013 0303 	ands.w	r3, r3, #3
 8009edc:	d009      	beq.n	8009ef2 <arm_add_f32+0x8a>
 8009ede:	ecf0 7a01 	vldmia	r0!, {s15}
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	ecb1 7a01 	vldmia	r1!, {s14}
 8009ee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009eec:	ece2 7a01 	vstmia	r2!, {s15}
 8009ef0:	d1f5      	bne.n	8009ede <arm_add_f32+0x76>
 8009ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ef4 <arm_radix8_butterfly_f32>:
 8009ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	469e      	mov	lr, r3
 8009efa:	1d03      	adds	r3, r0, #4
 8009efc:	4683      	mov	fp, r0
 8009efe:	468a      	mov	sl, r1
 8009f00:	4688      	mov	r8, r1
 8009f02:	469c      	mov	ip, r3
 8009f04:	ed2d 8b10 	vpush	{d8-d15}
 8009f08:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 800a21c <arm_radix8_butterfly_f32+0x328>
 8009f0c:	b09f      	sub	sp, #124	@ 0x7c
 8009f0e:	921c      	str	r2, [sp, #112]	@ 0x70
 8009f10:	931d      	str	r3, [sp, #116]	@ 0x74
 8009f12:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8009f16:	f04f 0900 	mov.w	r9, #0
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f1e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009f22:	0051      	lsls	r1, r2, #1
 8009f24:	4608      	mov	r0, r1
 8009f26:	9103      	str	r1, [sp, #12]
 8009f28:	00d1      	lsls	r1, r2, #3
 8009f2a:	1885      	adds	r5, r0, r2
 8009f2c:	0110      	lsls	r0, r2, #4
 8009f2e:	eb0b 0601 	add.w	r6, fp, r1
 8009f32:	9101      	str	r1, [sp, #4]
 8009f34:	18ac      	adds	r4, r5, r2
 8009f36:	9002      	str	r0, [sp, #8]
 8009f38:	1877      	adds	r7, r6, r1
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4422      	add	r2, r4
 8009f3e:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8009f42:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8009f46:	1850      	adds	r0, r2, r1
 8009f48:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8009f4c:	4401      	add	r1, r0
 8009f4e:	3204      	adds	r2, #4
 8009f50:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8009f54:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8009f58:	3104      	adds	r1, #4
 8009f5a:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8009f5e:	44c1      	add	r9, r8
 8009f60:	edd4 6a00 	vldr	s13, [r4]
 8009f64:	ed97 6a00 	vldr	s12, [r7]
 8009f68:	45ca      	cmp	sl, r9
 8009f6a:	edd0 7a00 	vldr	s15, [r0]
 8009f6e:	ee37 5a66 	vsub.f32	s10, s14, s13
 8009f72:	edd6 5a00 	vldr	s11, [r6]
 8009f76:	ee37 2a26 	vadd.f32	s4, s14, s13
 8009f7a:	ee76 2a67 	vsub.f32	s5, s12, s15
 8009f7e:	edd5 6a00 	vldr	s13, [r5]
 8009f82:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009f86:	ee76 4a27 	vadd.f32	s9, s12, s15
 8009f8a:	ed11 6a01 	vldr	s12, [r1, #-4]
 8009f8e:	ee75 1a87 	vadd.f32	s3, s11, s14
 8009f92:	ee36 4a86 	vadd.f32	s8, s13, s12
 8009f96:	ee72 7a24 	vadd.f32	s15, s4, s9
 8009f9a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8009f9e:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8009fa2:	ee31 6a84 	vadd.f32	s12, s3, s8
 8009fa6:	ee32 2a64 	vsub.f32	s4, s4, s9
 8009faa:	ee77 6a65 	vsub.f32	s13, s14, s11
 8009fae:	ee77 4a86 	vadd.f32	s9, s15, s12
 8009fb2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009fb6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009fba:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8009fbe:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8009fc2:	edc4 7a00 	vstr	s15, [r4]
 8009fc6:	ee66 6a89 	vmul.f32	s13, s13, s18
 8009fca:	edd6 5a01 	vldr	s11, [r6, #4]
 8009fce:	ee27 6a09 	vmul.f32	s12, s14, s18
 8009fd2:	edd5 3a01 	vldr	s7, [r5, #4]
 8009fd6:	ed92 4a00 	vldr	s8, [r2]
 8009fda:	ee35 1a26 	vadd.f32	s2, s10, s13
 8009fde:	edd1 4a00 	vldr	s9, [r1]
 8009fe2:	ee75 6a66 	vsub.f32	s13, s10, s13
 8009fe6:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8009fea:	ed94 0a01 	vldr	s0, [r4, #4]
 8009fee:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8009ff2:	ed9c 7a00 	vldr	s14, [ip]
 8009ff6:	edd0 0a01 	vldr	s1, [r0, #4]
 8009ffa:	ee35 4a84 	vadd.f32	s8, s11, s8
 8009ffe:	ed97 5a01 	vldr	s10, [r7, #4]
 800a002:	ee73 4aa4 	vadd.f32	s9, s7, s9
 800a006:	ee73 5a27 	vadd.f32	s11, s6, s15
 800a00a:	ee77 3a00 	vadd.f32	s7, s14, s0
 800a00e:	ee33 3a67 	vsub.f32	s6, s6, s15
 800a012:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a016:	ee35 0a20 	vadd.f32	s0, s10, s1
 800a01a:	ee63 7a09 	vmul.f32	s15, s6, s18
 800a01e:	ee35 5a60 	vsub.f32	s10, s10, s1
 800a022:	ee33 3a80 	vadd.f32	s6, s7, s0
 800a026:	ee74 0a24 	vadd.f32	s1, s8, s9
 800a02a:	ee65 5a89 	vmul.f32	s11, s11, s18
 800a02e:	ee74 4a64 	vsub.f32	s9, s8, s9
 800a032:	ee33 4ac0 	vsub.f32	s8, s7, s0
 800a036:	ee75 3a25 	vadd.f32	s7, s10, s11
 800a03a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800a03e:	ee37 5a27 	vadd.f32	s10, s14, s15
 800a042:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a046:	ee32 7a86 	vadd.f32	s14, s5, s12
 800a04a:	ee32 6ac6 	vsub.f32	s12, s5, s12
 800a04e:	ee73 2a20 	vadd.f32	s5, s6, s1
 800a052:	ee33 3a60 	vsub.f32	s6, s6, s1
 800a056:	ee72 0a24 	vadd.f32	s1, s4, s9
 800a05a:	edcc 2a00 	vstr	s5, [ip]
 800a05e:	ee72 4a64 	vsub.f32	s9, s4, s9
 800a062:	ed84 3a01 	vstr	s6, [r4, #4]
 800a066:	ee74 2a61 	vsub.f32	s5, s8, s3
 800a06a:	ee31 3a23 	vadd.f32	s6, s2, s7
 800a06e:	edc7 0a00 	vstr	s1, [r7]
 800a072:	ee31 1a63 	vsub.f32	s2, s2, s7
 800a076:	edc0 4a00 	vstr	s9, [r0]
 800a07a:	ee76 3aa5 	vadd.f32	s7, s13, s11
 800a07e:	edc7 2a01 	vstr	s5, [r7, #4]
 800a082:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800a086:	441c      	add	r4, r3
 800a088:	ee75 5a47 	vsub.f32	s11, s10, s14
 800a08c:	449c      	add	ip, r3
 800a08e:	ee35 5a07 	vadd.f32	s10, s10, s14
 800a092:	441f      	add	r7, r3
 800a094:	ee37 7ac6 	vsub.f32	s14, s15, s12
 800a098:	ee34 4a21 	vadd.f32	s8, s8, s3
 800a09c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a0a0:	ed80 4a01 	vstr	s8, [r0, #4]
 800a0a4:	4418      	add	r0, r3
 800a0a6:	ed86 3a00 	vstr	s6, [r6]
 800a0aa:	ed01 1a01 	vstr	s2, [r1, #-4]
 800a0ae:	ed42 3a01 	vstr	s7, [r2, #-4]
 800a0b2:	edc5 6a00 	vstr	s13, [r5]
 800a0b6:	edc6 5a01 	vstr	s11, [r6, #4]
 800a0ba:	441e      	add	r6, r3
 800a0bc:	ed81 5a00 	vstr	s10, [r1]
 800a0c0:	4419      	add	r1, r3
 800a0c2:	ed82 7a00 	vstr	s14, [r2]
 800a0c6:	441a      	add	r2, r3
 800a0c8:	edc5 7a01 	vstr	s15, [r5, #4]
 800a0cc:	441d      	add	r5, r3
 800a0ce:	f63f af44 	bhi.w	8009f5a <arm_radix8_butterfly_f32+0x66>
 800a0d2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800a0d4:	2f07      	cmp	r7, #7
 800a0d6:	f240 81e8 	bls.w	800a4aa <arm_radix8_butterfly_f32+0x5b6>
 800a0da:	9903      	ldr	r1, [sp, #12]
 800a0dc:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 800a0e0:	9e01      	ldr	r6, [sp, #4]
 800a0e2:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 800a0e6:	19ca      	adds	r2, r1, r7
 800a0e8:	1c4c      	adds	r4, r1, #1
 800a0ea:	eb05 010e 	add.w	r1, r5, lr
 800a0ee:	00ed      	lsls	r5, r5, #3
 800a0f0:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800a0f4:	3608      	adds	r6, #8
 800a0f6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a0f8:	eb01 050e 	add.w	r5, r1, lr
 800a0fc:	00c9      	lsls	r1, r1, #3
 800a0fe:	443c      	add	r4, r7
 800a100:	9618      	str	r6, [sp, #96]	@ 0x60
 800a102:	00ee      	lsls	r6, r5, #3
 800a104:	460f      	mov	r7, r1
 800a106:	9114      	str	r1, [sp, #80]	@ 0x50
 800a108:	9902      	ldr	r1, [sp, #8]
 800a10a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800a10e:	9611      	str	r6, [sp, #68]	@ 0x44
 800a110:	00c0      	lsls	r0, r0, #3
 800a112:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a114:	3108      	adds	r1, #8
 800a116:	3404      	adds	r4, #4
 800a118:	f04f 0901 	mov.w	r9, #1
 800a11c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a11e:	eb05 010e 	add.w	r1, r5, lr
 800a122:	4635      	mov	r5, r6
 800a124:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a126:	9301      	str	r3, [sp, #4]
 800a128:	443d      	add	r5, r7
 800a12a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800a12c:	9507      	str	r5, [sp, #28]
 800a12e:	eb01 050e 	add.w	r5, r1, lr
 800a132:	00c9      	lsls	r1, r1, #3
 800a134:	19f7      	adds	r7, r6, r7
 800a136:	00ed      	lsls	r5, r5, #3
 800a138:	9110      	str	r1, [sp, #64]	@ 0x40
 800a13a:	00d1      	lsls	r1, r2, #3
 800a13c:	970a      	str	r7, [sp, #40]	@ 0x28
 800a13e:	462f      	mov	r7, r5
 800a140:	9515      	str	r5, [sp, #84]	@ 0x54
 800a142:	0112      	lsls	r2, r2, #4
 800a144:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a146:	19f4      	adds	r4, r6, r7
 800a148:	320c      	adds	r2, #12
 800a14a:	3108      	adds	r1, #8
 800a14c:	1975      	adds	r5, r6, r5
 800a14e:	9408      	str	r4, [sp, #32]
 800a150:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a152:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800a156:	9509      	str	r5, [sp, #36]	@ 0x24
 800a158:	f100 020c 	add.w	r2, r0, #12
 800a15c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a15e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800a160:	1975      	adds	r5, r6, r5
 800a162:	9216      	str	r2, [sp, #88]	@ 0x58
 800a164:	1932      	adds	r2, r6, r4
 800a166:	911b      	str	r1, [sp, #108]	@ 0x6c
 800a168:	9505      	str	r5, [sp, #20]
 800a16a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 800a16e:	0179      	lsls	r1, r7, #5
 800a170:	9204      	str	r2, [sp, #16]
 800a172:	1972      	adds	r2, r6, r5
 800a174:	9412      	str	r4, [sp, #72]	@ 0x48
 800a176:	9513      	str	r5, [sp, #76]	@ 0x4c
 800a178:	9206      	str	r2, [sp, #24]
 800a17a:	f101 0208 	add.w	r2, r1, #8
 800a17e:	921a      	str	r2, [sp, #104]	@ 0x68
 800a180:	2200      	movs	r2, #0
 800a182:	f102 0108 	add.w	r1, r2, #8
 800a186:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a188:	46cc      	mov	ip, r9
 800a18a:	460f      	mov	r7, r1
 800a18c:	910c      	str	r1, [sp, #48]	@ 0x30
 800a18e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a190:	eb0b 0e07 	add.w	lr, fp, r7
 800a194:	9f04      	ldr	r7, [sp, #16]
 800a196:	188e      	adds	r6, r1, r2
 800a198:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800a19a:	edd7 fa00 	vldr	s31, [r7]
 800a19e:	9f06      	ldr	r7, [sp, #24]
 800a1a0:	188d      	adds	r5, r1, r2
 800a1a2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800a1a4:	445e      	add	r6, fp
 800a1a6:	ed97 fa00 	vldr	s30, [r7]
 800a1aa:	445d      	add	r5, fp
 800a1ac:	9f05      	ldr	r7, [sp, #20]
 800a1ae:	188c      	adds	r4, r1, r2
 800a1b0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800a1b2:	edd7 ea00 	vldr	s29, [r7]
 800a1b6:	445c      	add	r4, fp
 800a1b8:	9f07      	ldr	r7, [sp, #28]
 800a1ba:	1888      	adds	r0, r1, r2
 800a1bc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800a1be:	ed97 ea00 	vldr	s28, [r7]
 800a1c2:	4458      	add	r0, fp
 800a1c4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800a1c6:	4411      	add	r1, r2
 800a1c8:	441a      	add	r2, r3
 800a1ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1cc:	edd7 da00 	vldr	s27, [r7]
 800a1d0:	4459      	add	r1, fp
 800a1d2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800a1d4:	445a      	add	r2, fp
 800a1d6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a1d8:	ed97 da00 	vldr	s26, [r7]
 800a1dc:	9f08      	ldr	r7, [sp, #32]
 800a1de:	edd7 ca00 	vldr	s25, [r7]
 800a1e2:	9f04      	ldr	r7, [sp, #16]
 800a1e4:	ed97 ca01 	vldr	s24, [r7, #4]
 800a1e8:	9f06      	ldr	r7, [sp, #24]
 800a1ea:	edd7 ba01 	vldr	s23, [r7, #4]
 800a1ee:	9f05      	ldr	r7, [sp, #20]
 800a1f0:	ed97 ba01 	vldr	s22, [r7, #4]
 800a1f4:	9f07      	ldr	r7, [sp, #28]
 800a1f6:	edd7 aa01 	vldr	s21, [r7, #4]
 800a1fa:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800a1fc:	ed97 aa01 	vldr	s20, [r7, #4]
 800a200:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800a202:	9b01      	ldr	r3, [sp, #4]
 800a204:	edd7 7a01 	vldr	s15, [r7, #4]
 800a208:	9f08      	ldr	r7, [sp, #32]
 800a20a:	edcd 7a02 	vstr	s15, [sp, #8]
 800a20e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a212:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800a214:	edcd 7a03 	vstr	s15, [sp, #12]
 800a218:	e002      	b.n	800a220 <arm_radix8_butterfly_f32+0x32c>
 800a21a:	bf00      	nop
 800a21c:	3f3504f3 	.word	0x3f3504f3
 800a220:	ed90 2a00 	vldr	s4, [r0]
 800a224:	44c4      	add	ip, r8
 800a226:	ed96 7a00 	vldr	s14, [r6]
 800a22a:	ed94 8a00 	vldr	s16, [r4]
 800a22e:	45e2      	cmp	sl, ip
 800a230:	ed52 7a01 	vldr	s15, [r2, #-4]
 800a234:	ed95 5a00 	vldr	s10, [r5]
 800a238:	ed51 5a01 	vldr	s11, [r1, #-4]
 800a23c:	ee38 6a27 	vadd.f32	s12, s16, s15
 800a240:	ed9e 1a00 	vldr	s2, [lr]
 800a244:	ee78 2a67 	vsub.f32	s5, s16, s15
 800a248:	ed17 4a01 	vldr	s8, [r7, #-4]
 800a24c:	ee75 3a25 	vadd.f32	s7, s10, s11
 800a250:	ee31 3a07 	vadd.f32	s6, s2, s14
 800a254:	edde 4a01 	vldr	s9, [lr, #4]
 800a258:	ee72 6a04 	vadd.f32	s13, s4, s8
 800a25c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800a260:	ee73 1a06 	vadd.f32	s3, s6, s12
 800a264:	ee33 5aa6 	vadd.f32	s10, s7, s13
 800a268:	ee32 4a44 	vsub.f32	s8, s4, s8
 800a26c:	ee31 1a47 	vsub.f32	s2, s2, s14
 800a270:	ee31 7a85 	vadd.f32	s14, s3, s10
 800a274:	ee75 7a84 	vadd.f32	s15, s11, s8
 800a278:	ee33 3a46 	vsub.f32	s6, s6, s12
 800a27c:	ed8e 7a00 	vstr	s14, [lr]
 800a280:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800a284:	ee67 7a89 	vmul.f32	s15, s15, s18
 800a288:	ed90 2a01 	vldr	s4, [r0, #4]
 800a28c:	ed95 7a01 	vldr	s14, [r5, #4]
 800a290:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800a294:	ed91 6a00 	vldr	s12, [r1]
 800a298:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800a29c:	edd7 8a00 	vldr	s17, [r7]
 800a2a0:	ee32 8ae7 	vsub.f32	s16, s5, s15
 800a2a4:	ee72 5aa7 	vadd.f32	s11, s5, s15
 800a2a8:	edd2 0a00 	vldr	s1, [r2]
 800a2ac:	ee72 6a68 	vsub.f32	s13, s4, s17
 800a2b0:	edd6 7a01 	vldr	s15, [r6, #4]
 800a2b4:	ee77 2a46 	vsub.f32	s5, s14, s12
 800a2b8:	ee37 0a06 	vadd.f32	s0, s14, s12
 800a2bc:	ed94 7a01 	vldr	s14, [r4, #4]
 800a2c0:	ee32 6a28 	vadd.f32	s12, s4, s17
 800a2c4:	ee72 9ae6 	vsub.f32	s19, s5, s13
 800a2c8:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800a2cc:	ee72 2aa6 	vadd.f32	s5, s5, s13
 800a2d0:	ee77 6a20 	vadd.f32	s13, s14, s1
 800a2d4:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800a2d8:	ee37 7a60 	vsub.f32	s14, s14, s1
 800a2dc:	ee24 4a09 	vmul.f32	s8, s8, s18
 800a2e0:	ee70 0a06 	vadd.f32	s1, s0, s12
 800a2e4:	ee69 7a89 	vmul.f32	s15, s19, s18
 800a2e8:	ee62 2a89 	vmul.f32	s5, s5, s18
 800a2ec:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a2f0:	ee32 0a26 	vadd.f32	s0, s4, s13
 800a2f4:	ee72 6a66 	vsub.f32	s13, s4, s13
 800a2f8:	ee77 8a62 	vsub.f32	s17, s14, s5
 800a2fc:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800a300:	ee74 7ae7 	vsub.f32	s15, s9, s15
 800a304:	ee77 4a22 	vadd.f32	s9, s14, s5
 800a308:	ee71 2a04 	vadd.f32	s5, s2, s8
 800a30c:	ee31 7a44 	vsub.f32	s14, s2, s8
 800a310:	ee30 1a60 	vsub.f32	s2, s0, s1
 800a314:	ee73 1a06 	vadd.f32	s3, s6, s12
 800a318:	ee33 6a46 	vsub.f32	s12, s6, s12
 800a31c:	ee36 3ae3 	vsub.f32	s6, s13, s7
 800a320:	ee37 4ac8 	vsub.f32	s8, s15, s16
 800a324:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800a328:	ee77 7a88 	vadd.f32	s15, s15, s16
 800a32c:	ee72 3a65 	vsub.f32	s7, s4, s11
 800a330:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800a334:	ee72 5a25 	vadd.f32	s11, s4, s11
 800a338:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800a33c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800a340:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800a344:	ee77 2a28 	vadd.f32	s5, s14, s17
 800a348:	ee37 7a68 	vsub.f32	s14, s14, s17
 800a34c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800a350:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800a354:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800a358:	ee70 0a20 	vadd.f32	s1, s0, s1
 800a35c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800a360:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800a364:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800a368:	edce 0a01 	vstr	s1, [lr, #4]
 800a36c:	ee38 8a88 	vadd.f32	s16, s17, s16
 800a370:	449e      	add	lr, r3
 800a372:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800a376:	ee31 5a45 	vsub.f32	s10, s2, s10
 800a37a:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800a37e:	ed86 8a00 	vstr	s16, [r6]
 800a382:	ee39 0a80 	vadd.f32	s0, s19, s0
 800a386:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a38a:	ed86 5a01 	vstr	s10, [r6, #4]
 800a38e:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800a392:	edcd 3a01 	vstr	s7, [sp, #4]
 800a396:	ed9d 5a03 	vldr	s10, [sp, #12]
 800a39a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800a39e:	eddd 3a02 	vldr	s7, [sp, #8]
 800a3a2:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800a3a6:	ed84 0a00 	vstr	s0, [r4]
 800a3aa:	ee65 4a24 	vmul.f32	s9, s10, s9
 800a3ae:	ed84 3a01 	vstr	s6, [r4, #4]
 800a3b2:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800a3b6:	ee23 6a86 	vmul.f32	s12, s7, s12
 800a3ba:	eddd 3a01 	vldr	s7, [sp, #4]
 800a3be:	ee25 5a25 	vmul.f32	s10, s10, s11
 800a3c2:	441e      	add	r6, r3
 800a3c4:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800a3c8:	441c      	add	r4, r3
 800a3ca:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800a3ce:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800a3d2:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800a3d6:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800a3da:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800a3de:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800a3e2:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800a3e6:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800a3ea:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800a3ee:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800a3f2:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800a3f6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800a3fa:	ee38 8a01 	vadd.f32	s16, s16, s2
 800a3fe:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800a402:	ee39 5a85 	vadd.f32	s10, s19, s10
 800a406:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800a40a:	ed02 8a01 	vstr	s16, [r2, #-4]
 800a40e:	ee30 0a21 	vadd.f32	s0, s0, s3
 800a412:	ed82 6a00 	vstr	s12, [r2]
 800a416:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a41a:	edc5 0a00 	vstr	s1, [r5]
 800a41e:	ee33 3a28 	vadd.f32	s6, s6, s17
 800a422:	edc5 3a01 	vstr	s7, [r5, #4]
 800a426:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a42a:	ed07 5a01 	vstr	s10, [r7, #-4]
 800a42e:	edc7 4a00 	vstr	s9, [r7]
 800a432:	441d      	add	r5, r3
 800a434:	ed01 0a01 	vstr	s0, [r1, #-4]
 800a438:	441a      	add	r2, r3
 800a43a:	edc1 2a00 	vstr	s5, [r1]
 800a43e:	441f      	add	r7, r3
 800a440:	ed80 3a00 	vstr	s6, [r0]
 800a444:	4419      	add	r1, r3
 800a446:	ed80 7a01 	vstr	s14, [r0, #4]
 800a44a:	4418      	add	r0, r3
 800a44c:	f63f aee8 	bhi.w	800a220 <arm_radix8_butterfly_f32+0x32c>
 800a450:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a452:	f109 0901 	add.w	r9, r9, #1
 800a456:	9301      	str	r3, [sp, #4]
 800a458:	9b04      	ldr	r3, [sp, #16]
 800a45a:	4413      	add	r3, r2
 800a45c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a45e:	9304      	str	r3, [sp, #16]
 800a460:	9b06      	ldr	r3, [sp, #24]
 800a462:	4413      	add	r3, r2
 800a464:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a466:	9306      	str	r3, [sp, #24]
 800a468:	9b05      	ldr	r3, [sp, #20]
 800a46a:	4413      	add	r3, r2
 800a46c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a46e:	9305      	str	r3, [sp, #20]
 800a470:	9b07      	ldr	r3, [sp, #28]
 800a472:	4413      	add	r3, r2
 800a474:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a476:	9307      	str	r3, [sp, #28]
 800a478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a47a:	4413      	add	r3, r2
 800a47c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a47e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a482:	4413      	add	r3, r2
 800a484:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a486:	9309      	str	r3, [sp, #36]	@ 0x24
 800a488:	9b08      	ldr	r3, [sp, #32]
 800a48a:	4413      	add	r3, r2
 800a48c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a48e:	9308      	str	r3, [sp, #32]
 800a490:	3208      	adds	r2, #8
 800a492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a494:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a496:	4599      	cmp	r9, r3
 800a498:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a49a:	f47f ae72 	bne.w	800a182 <arm_radix8_butterfly_f32+0x28e>
 800a49e:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 800a4a2:	46c8      	mov	r8, r9
 800a4a4:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 800a4a8:	e533      	b.n	8009f12 <arm_radix8_butterfly_f32+0x1e>
 800a4aa:	b01f      	add	sp, #124	@ 0x7c
 800a4ac:	ecbd 8b10 	vpop	{d8-d15}
 800a4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4b4 <atoi>:
 800a4b4:	220a      	movs	r2, #10
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	f000 b98a 	b.w	800a7d0 <strtol>

0800a4bc <srand>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4b10      	ldr	r3, [pc, #64]	@ (800a500 <srand+0x44>)
 800a4c0:	681d      	ldr	r5, [r3, #0]
 800a4c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	b9b3      	cbnz	r3, 800a4f6 <srand+0x3a>
 800a4c8:	2018      	movs	r0, #24
 800a4ca:	f000 faa1 	bl	800aa10 <malloc>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	6328      	str	r0, [r5, #48]	@ 0x30
 800a4d2:	b920      	cbnz	r0, 800a4de <srand+0x22>
 800a4d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a504 <srand+0x48>)
 800a4d6:	480c      	ldr	r0, [pc, #48]	@ (800a508 <srand+0x4c>)
 800a4d8:	2146      	movs	r1, #70	@ 0x46
 800a4da:	f000 fa7b 	bl	800a9d4 <__assert_func>
 800a4de:	490b      	ldr	r1, [pc, #44]	@ (800a50c <srand+0x50>)
 800a4e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a510 <srand+0x54>)
 800a4e2:	e9c0 1300 	strd	r1, r3, [r0]
 800a4e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a514 <srand+0x58>)
 800a4e8:	6083      	str	r3, [r0, #8]
 800a4ea:	230b      	movs	r3, #11
 800a4ec:	8183      	strh	r3, [r0, #12]
 800a4ee:	2100      	movs	r1, #0
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a4f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	611c      	str	r4, [r3, #16]
 800a4fc:	615a      	str	r2, [r3, #20]
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	24000028 	.word	0x24000028
 800a504:	0808305c 	.word	0x0808305c
 800a508:	08083073 	.word	0x08083073
 800a50c:	abcd330e 	.word	0xabcd330e
 800a510:	e66d1234 	.word	0xe66d1234
 800a514:	0005deec 	.word	0x0005deec

0800a518 <rand>:
 800a518:	4b16      	ldr	r3, [pc, #88]	@ (800a574 <rand+0x5c>)
 800a51a:	b510      	push	{r4, lr}
 800a51c:	681c      	ldr	r4, [r3, #0]
 800a51e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a520:	b9b3      	cbnz	r3, 800a550 <rand+0x38>
 800a522:	2018      	movs	r0, #24
 800a524:	f000 fa74 	bl	800aa10 <malloc>
 800a528:	4602      	mov	r2, r0
 800a52a:	6320      	str	r0, [r4, #48]	@ 0x30
 800a52c:	b920      	cbnz	r0, 800a538 <rand+0x20>
 800a52e:	4b12      	ldr	r3, [pc, #72]	@ (800a578 <rand+0x60>)
 800a530:	4812      	ldr	r0, [pc, #72]	@ (800a57c <rand+0x64>)
 800a532:	2152      	movs	r1, #82	@ 0x52
 800a534:	f000 fa4e 	bl	800a9d4 <__assert_func>
 800a538:	4911      	ldr	r1, [pc, #68]	@ (800a580 <rand+0x68>)
 800a53a:	4b12      	ldr	r3, [pc, #72]	@ (800a584 <rand+0x6c>)
 800a53c:	e9c0 1300 	strd	r1, r3, [r0]
 800a540:	4b11      	ldr	r3, [pc, #68]	@ (800a588 <rand+0x70>)
 800a542:	6083      	str	r3, [r0, #8]
 800a544:	230b      	movs	r3, #11
 800a546:	8183      	strh	r3, [r0, #12]
 800a548:	2100      	movs	r1, #0
 800a54a:	2001      	movs	r0, #1
 800a54c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a550:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a552:	480e      	ldr	r0, [pc, #56]	@ (800a58c <rand+0x74>)
 800a554:	690b      	ldr	r3, [r1, #16]
 800a556:	694c      	ldr	r4, [r1, #20]
 800a558:	4a0d      	ldr	r2, [pc, #52]	@ (800a590 <rand+0x78>)
 800a55a:	4358      	muls	r0, r3
 800a55c:	fb02 0004 	mla	r0, r2, r4, r0
 800a560:	fba3 3202 	umull	r3, r2, r3, r2
 800a564:	3301      	adds	r3, #1
 800a566:	eb40 0002 	adc.w	r0, r0, r2
 800a56a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a56e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a572:	bd10      	pop	{r4, pc}
 800a574:	24000028 	.word	0x24000028
 800a578:	0808305c 	.word	0x0808305c
 800a57c:	08083073 	.word	0x08083073
 800a580:	abcd330e 	.word	0xabcd330e
 800a584:	e66d1234 	.word	0xe66d1234
 800a588:	0005deec 	.word	0x0005deec
 800a58c:	5851f42d 	.word	0x5851f42d
 800a590:	4c957f2d 	.word	0x4c957f2d

0800a594 <std>:
 800a594:	2300      	movs	r3, #0
 800a596:	b510      	push	{r4, lr}
 800a598:	4604      	mov	r4, r0
 800a59a:	e9c0 3300 	strd	r3, r3, [r0]
 800a59e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5a2:	6083      	str	r3, [r0, #8]
 800a5a4:	8181      	strh	r1, [r0, #12]
 800a5a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a5a8:	81c2      	strh	r2, [r0, #14]
 800a5aa:	6183      	str	r3, [r0, #24]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	2208      	movs	r2, #8
 800a5b0:	305c      	adds	r0, #92	@ 0x5c
 800a5b2:	f000 f9ad 	bl	800a910 <memset>
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ec <std+0x58>)
 800a5b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f0 <std+0x5c>)
 800a5bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5be:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f4 <std+0x60>)
 800a5c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f8 <std+0x64>)
 800a5c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5fc <std+0x68>)
 800a5c8:	6224      	str	r4, [r4, #32]
 800a5ca:	429c      	cmp	r4, r3
 800a5cc:	d006      	beq.n	800a5dc <std+0x48>
 800a5ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a5d2:	4294      	cmp	r4, r2
 800a5d4:	d002      	beq.n	800a5dc <std+0x48>
 800a5d6:	33d0      	adds	r3, #208	@ 0xd0
 800a5d8:	429c      	cmp	r4, r3
 800a5da:	d105      	bne.n	800a5e8 <std+0x54>
 800a5dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e4:	f000 b9f2 	b.w	800a9cc <__retarget_lock_init_recursive>
 800a5e8:	bd10      	pop	{r4, pc}
 800a5ea:	bf00      	nop
 800a5ec:	0800acd5 	.word	0x0800acd5
 800a5f0:	0800acf7 	.word	0x0800acf7
 800a5f4:	0800ad2f 	.word	0x0800ad2f
 800a5f8:	0800ad53 	.word	0x0800ad53
 800a5fc:	2406f460 	.word	0x2406f460

0800a600 <stdio_exit_handler>:
 800a600:	4a02      	ldr	r2, [pc, #8]	@ (800a60c <stdio_exit_handler+0xc>)
 800a602:	4903      	ldr	r1, [pc, #12]	@ (800a610 <stdio_exit_handler+0x10>)
 800a604:	4803      	ldr	r0, [pc, #12]	@ (800a614 <stdio_exit_handler+0x14>)
 800a606:	f000 b965 	b.w	800a8d4 <_fwalk_sglue>
 800a60a:	bf00      	nop
 800a60c:	2400001c 	.word	0x2400001c
 800a610:	0800ac6d 	.word	0x0800ac6d
 800a614:	2400002c 	.word	0x2400002c

0800a618 <cleanup_stdio>:
 800a618:	6841      	ldr	r1, [r0, #4]
 800a61a:	4b0c      	ldr	r3, [pc, #48]	@ (800a64c <cleanup_stdio+0x34>)
 800a61c:	4299      	cmp	r1, r3
 800a61e:	b510      	push	{r4, lr}
 800a620:	4604      	mov	r4, r0
 800a622:	d001      	beq.n	800a628 <cleanup_stdio+0x10>
 800a624:	f000 fb22 	bl	800ac6c <_fflush_r>
 800a628:	68a1      	ldr	r1, [r4, #8]
 800a62a:	4b09      	ldr	r3, [pc, #36]	@ (800a650 <cleanup_stdio+0x38>)
 800a62c:	4299      	cmp	r1, r3
 800a62e:	d002      	beq.n	800a636 <cleanup_stdio+0x1e>
 800a630:	4620      	mov	r0, r4
 800a632:	f000 fb1b 	bl	800ac6c <_fflush_r>
 800a636:	68e1      	ldr	r1, [r4, #12]
 800a638:	4b06      	ldr	r3, [pc, #24]	@ (800a654 <cleanup_stdio+0x3c>)
 800a63a:	4299      	cmp	r1, r3
 800a63c:	d004      	beq.n	800a648 <cleanup_stdio+0x30>
 800a63e:	4620      	mov	r0, r4
 800a640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a644:	f000 bb12 	b.w	800ac6c <_fflush_r>
 800a648:	bd10      	pop	{r4, pc}
 800a64a:	bf00      	nop
 800a64c:	2406f460 	.word	0x2406f460
 800a650:	2406f4c8 	.word	0x2406f4c8
 800a654:	2406f530 	.word	0x2406f530

0800a658 <global_stdio_init.part.0>:
 800a658:	b510      	push	{r4, lr}
 800a65a:	4b0b      	ldr	r3, [pc, #44]	@ (800a688 <global_stdio_init.part.0+0x30>)
 800a65c:	4c0b      	ldr	r4, [pc, #44]	@ (800a68c <global_stdio_init.part.0+0x34>)
 800a65e:	4a0c      	ldr	r2, [pc, #48]	@ (800a690 <global_stdio_init.part.0+0x38>)
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	4620      	mov	r0, r4
 800a664:	2200      	movs	r2, #0
 800a666:	2104      	movs	r1, #4
 800a668:	f7ff ff94 	bl	800a594 <std>
 800a66c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a670:	2201      	movs	r2, #1
 800a672:	2109      	movs	r1, #9
 800a674:	f7ff ff8e 	bl	800a594 <std>
 800a678:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a67c:	2202      	movs	r2, #2
 800a67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a682:	2112      	movs	r1, #18
 800a684:	f7ff bf86 	b.w	800a594 <std>
 800a688:	2406f598 	.word	0x2406f598
 800a68c:	2406f460 	.word	0x2406f460
 800a690:	0800a601 	.word	0x0800a601

0800a694 <__sfp_lock_acquire>:
 800a694:	4801      	ldr	r0, [pc, #4]	@ (800a69c <__sfp_lock_acquire+0x8>)
 800a696:	f000 b99a 	b.w	800a9ce <__retarget_lock_acquire_recursive>
 800a69a:	bf00      	nop
 800a69c:	2406f59d 	.word	0x2406f59d

0800a6a0 <__sfp_lock_release>:
 800a6a0:	4801      	ldr	r0, [pc, #4]	@ (800a6a8 <__sfp_lock_release+0x8>)
 800a6a2:	f000 b995 	b.w	800a9d0 <__retarget_lock_release_recursive>
 800a6a6:	bf00      	nop
 800a6a8:	2406f59d 	.word	0x2406f59d

0800a6ac <__sinit>:
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	f7ff fff0 	bl	800a694 <__sfp_lock_acquire>
 800a6b4:	6a23      	ldr	r3, [r4, #32]
 800a6b6:	b11b      	cbz	r3, 800a6c0 <__sinit+0x14>
 800a6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6bc:	f7ff bff0 	b.w	800a6a0 <__sfp_lock_release>
 800a6c0:	4b04      	ldr	r3, [pc, #16]	@ (800a6d4 <__sinit+0x28>)
 800a6c2:	6223      	str	r3, [r4, #32]
 800a6c4:	4b04      	ldr	r3, [pc, #16]	@ (800a6d8 <__sinit+0x2c>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1f5      	bne.n	800a6b8 <__sinit+0xc>
 800a6cc:	f7ff ffc4 	bl	800a658 <global_stdio_init.part.0>
 800a6d0:	e7f2      	b.n	800a6b8 <__sinit+0xc>
 800a6d2:	bf00      	nop
 800a6d4:	0800a619 	.word	0x0800a619
 800a6d8:	2406f598 	.word	0x2406f598

0800a6dc <_strtol_l.isra.0>:
 800a6dc:	2b24      	cmp	r3, #36	@ 0x24
 800a6de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e2:	4686      	mov	lr, r0
 800a6e4:	4690      	mov	r8, r2
 800a6e6:	d801      	bhi.n	800a6ec <_strtol_l.isra.0+0x10>
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d106      	bne.n	800a6fa <_strtol_l.isra.0+0x1e>
 800a6ec:	f000 f944 	bl	800a978 <__errno>
 800a6f0:	2316      	movs	r3, #22
 800a6f2:	6003      	str	r3, [r0, #0]
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fa:	4834      	ldr	r0, [pc, #208]	@ (800a7cc <_strtol_l.isra.0+0xf0>)
 800a6fc:	460d      	mov	r5, r1
 800a6fe:	462a      	mov	r2, r5
 800a700:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a704:	5d06      	ldrb	r6, [r0, r4]
 800a706:	f016 0608 	ands.w	r6, r6, #8
 800a70a:	d1f8      	bne.n	800a6fe <_strtol_l.isra.0+0x22>
 800a70c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a70e:	d110      	bne.n	800a732 <_strtol_l.isra.0+0x56>
 800a710:	782c      	ldrb	r4, [r5, #0]
 800a712:	2601      	movs	r6, #1
 800a714:	1c95      	adds	r5, r2, #2
 800a716:	f033 0210 	bics.w	r2, r3, #16
 800a71a:	d115      	bne.n	800a748 <_strtol_l.isra.0+0x6c>
 800a71c:	2c30      	cmp	r4, #48	@ 0x30
 800a71e:	d10d      	bne.n	800a73c <_strtol_l.isra.0+0x60>
 800a720:	782a      	ldrb	r2, [r5, #0]
 800a722:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a726:	2a58      	cmp	r2, #88	@ 0x58
 800a728:	d108      	bne.n	800a73c <_strtol_l.isra.0+0x60>
 800a72a:	786c      	ldrb	r4, [r5, #1]
 800a72c:	3502      	adds	r5, #2
 800a72e:	2310      	movs	r3, #16
 800a730:	e00a      	b.n	800a748 <_strtol_l.isra.0+0x6c>
 800a732:	2c2b      	cmp	r4, #43	@ 0x2b
 800a734:	bf04      	itt	eq
 800a736:	782c      	ldrbeq	r4, [r5, #0]
 800a738:	1c95      	addeq	r5, r2, #2
 800a73a:	e7ec      	b.n	800a716 <_strtol_l.isra.0+0x3a>
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1f6      	bne.n	800a72e <_strtol_l.isra.0+0x52>
 800a740:	2c30      	cmp	r4, #48	@ 0x30
 800a742:	bf14      	ite	ne
 800a744:	230a      	movne	r3, #10
 800a746:	2308      	moveq	r3, #8
 800a748:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a74c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a750:	2200      	movs	r2, #0
 800a752:	fbbc f9f3 	udiv	r9, ip, r3
 800a756:	4610      	mov	r0, r2
 800a758:	fb03 ca19 	mls	sl, r3, r9, ip
 800a75c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a760:	2f09      	cmp	r7, #9
 800a762:	d80f      	bhi.n	800a784 <_strtol_l.isra.0+0xa8>
 800a764:	463c      	mov	r4, r7
 800a766:	42a3      	cmp	r3, r4
 800a768:	dd1b      	ble.n	800a7a2 <_strtol_l.isra.0+0xc6>
 800a76a:	1c57      	adds	r7, r2, #1
 800a76c:	d007      	beq.n	800a77e <_strtol_l.isra.0+0xa2>
 800a76e:	4581      	cmp	r9, r0
 800a770:	d314      	bcc.n	800a79c <_strtol_l.isra.0+0xc0>
 800a772:	d101      	bne.n	800a778 <_strtol_l.isra.0+0x9c>
 800a774:	45a2      	cmp	sl, r4
 800a776:	db11      	blt.n	800a79c <_strtol_l.isra.0+0xc0>
 800a778:	fb00 4003 	mla	r0, r0, r3, r4
 800a77c:	2201      	movs	r2, #1
 800a77e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a782:	e7eb      	b.n	800a75c <_strtol_l.isra.0+0x80>
 800a784:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a788:	2f19      	cmp	r7, #25
 800a78a:	d801      	bhi.n	800a790 <_strtol_l.isra.0+0xb4>
 800a78c:	3c37      	subs	r4, #55	@ 0x37
 800a78e:	e7ea      	b.n	800a766 <_strtol_l.isra.0+0x8a>
 800a790:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a794:	2f19      	cmp	r7, #25
 800a796:	d804      	bhi.n	800a7a2 <_strtol_l.isra.0+0xc6>
 800a798:	3c57      	subs	r4, #87	@ 0x57
 800a79a:	e7e4      	b.n	800a766 <_strtol_l.isra.0+0x8a>
 800a79c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7a0:	e7ed      	b.n	800a77e <_strtol_l.isra.0+0xa2>
 800a7a2:	1c53      	adds	r3, r2, #1
 800a7a4:	d108      	bne.n	800a7b8 <_strtol_l.isra.0+0xdc>
 800a7a6:	2322      	movs	r3, #34	@ 0x22
 800a7a8:	f8ce 3000 	str.w	r3, [lr]
 800a7ac:	4660      	mov	r0, ip
 800a7ae:	f1b8 0f00 	cmp.w	r8, #0
 800a7b2:	d0a0      	beq.n	800a6f6 <_strtol_l.isra.0+0x1a>
 800a7b4:	1e69      	subs	r1, r5, #1
 800a7b6:	e006      	b.n	800a7c6 <_strtol_l.isra.0+0xea>
 800a7b8:	b106      	cbz	r6, 800a7bc <_strtol_l.isra.0+0xe0>
 800a7ba:	4240      	negs	r0, r0
 800a7bc:	f1b8 0f00 	cmp.w	r8, #0
 800a7c0:	d099      	beq.n	800a6f6 <_strtol_l.isra.0+0x1a>
 800a7c2:	2a00      	cmp	r2, #0
 800a7c4:	d1f6      	bne.n	800a7b4 <_strtol_l.isra.0+0xd8>
 800a7c6:	f8c8 1000 	str.w	r1, [r8]
 800a7ca:	e794      	b.n	800a6f6 <_strtol_l.isra.0+0x1a>
 800a7cc:	0808313b 	.word	0x0808313b

0800a7d0 <strtol>:
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	460a      	mov	r2, r1
 800a7d4:	4601      	mov	r1, r0
 800a7d6:	4802      	ldr	r0, [pc, #8]	@ (800a7e0 <strtol+0x10>)
 800a7d8:	6800      	ldr	r0, [r0, #0]
 800a7da:	f7ff bf7f 	b.w	800a6dc <_strtol_l.isra.0>
 800a7de:	bf00      	nop
 800a7e0:	24000028 	.word	0x24000028

0800a7e4 <_strtoul_l.isra.0>:
 800a7e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7e8:	4e34      	ldr	r6, [pc, #208]	@ (800a8bc <_strtoul_l.isra.0+0xd8>)
 800a7ea:	4686      	mov	lr, r0
 800a7ec:	460d      	mov	r5, r1
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7f4:	5d37      	ldrb	r7, [r6, r4]
 800a7f6:	f017 0708 	ands.w	r7, r7, #8
 800a7fa:	d1f8      	bne.n	800a7ee <_strtoul_l.isra.0+0xa>
 800a7fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a7fe:	d110      	bne.n	800a822 <_strtoul_l.isra.0+0x3e>
 800a800:	782c      	ldrb	r4, [r5, #0]
 800a802:	2701      	movs	r7, #1
 800a804:	1c85      	adds	r5, r0, #2
 800a806:	f033 0010 	bics.w	r0, r3, #16
 800a80a:	d115      	bne.n	800a838 <_strtoul_l.isra.0+0x54>
 800a80c:	2c30      	cmp	r4, #48	@ 0x30
 800a80e:	d10d      	bne.n	800a82c <_strtoul_l.isra.0+0x48>
 800a810:	7828      	ldrb	r0, [r5, #0]
 800a812:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a816:	2858      	cmp	r0, #88	@ 0x58
 800a818:	d108      	bne.n	800a82c <_strtoul_l.isra.0+0x48>
 800a81a:	786c      	ldrb	r4, [r5, #1]
 800a81c:	3502      	adds	r5, #2
 800a81e:	2310      	movs	r3, #16
 800a820:	e00a      	b.n	800a838 <_strtoul_l.isra.0+0x54>
 800a822:	2c2b      	cmp	r4, #43	@ 0x2b
 800a824:	bf04      	itt	eq
 800a826:	782c      	ldrbeq	r4, [r5, #0]
 800a828:	1c85      	addeq	r5, r0, #2
 800a82a:	e7ec      	b.n	800a806 <_strtoul_l.isra.0+0x22>
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1f6      	bne.n	800a81e <_strtoul_l.isra.0+0x3a>
 800a830:	2c30      	cmp	r4, #48	@ 0x30
 800a832:	bf14      	ite	ne
 800a834:	230a      	movne	r3, #10
 800a836:	2308      	moveq	r3, #8
 800a838:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800a83c:	2600      	movs	r6, #0
 800a83e:	fbb8 f8f3 	udiv	r8, r8, r3
 800a842:	fb03 f908 	mul.w	r9, r3, r8
 800a846:	ea6f 0909 	mvn.w	r9, r9
 800a84a:	4630      	mov	r0, r6
 800a84c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a850:	f1bc 0f09 	cmp.w	ip, #9
 800a854:	d810      	bhi.n	800a878 <_strtoul_l.isra.0+0x94>
 800a856:	4664      	mov	r4, ip
 800a858:	42a3      	cmp	r3, r4
 800a85a:	dd1e      	ble.n	800a89a <_strtoul_l.isra.0+0xb6>
 800a85c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800a860:	d007      	beq.n	800a872 <_strtoul_l.isra.0+0x8e>
 800a862:	4580      	cmp	r8, r0
 800a864:	d316      	bcc.n	800a894 <_strtoul_l.isra.0+0xb0>
 800a866:	d101      	bne.n	800a86c <_strtoul_l.isra.0+0x88>
 800a868:	45a1      	cmp	r9, r4
 800a86a:	db13      	blt.n	800a894 <_strtoul_l.isra.0+0xb0>
 800a86c:	fb00 4003 	mla	r0, r0, r3, r4
 800a870:	2601      	movs	r6, #1
 800a872:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a876:	e7e9      	b.n	800a84c <_strtoul_l.isra.0+0x68>
 800a878:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a87c:	f1bc 0f19 	cmp.w	ip, #25
 800a880:	d801      	bhi.n	800a886 <_strtoul_l.isra.0+0xa2>
 800a882:	3c37      	subs	r4, #55	@ 0x37
 800a884:	e7e8      	b.n	800a858 <_strtoul_l.isra.0+0x74>
 800a886:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a88a:	f1bc 0f19 	cmp.w	ip, #25
 800a88e:	d804      	bhi.n	800a89a <_strtoul_l.isra.0+0xb6>
 800a890:	3c57      	subs	r4, #87	@ 0x57
 800a892:	e7e1      	b.n	800a858 <_strtoul_l.isra.0+0x74>
 800a894:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800a898:	e7eb      	b.n	800a872 <_strtoul_l.isra.0+0x8e>
 800a89a:	1c73      	adds	r3, r6, #1
 800a89c:	d106      	bne.n	800a8ac <_strtoul_l.isra.0+0xc8>
 800a89e:	2322      	movs	r3, #34	@ 0x22
 800a8a0:	f8ce 3000 	str.w	r3, [lr]
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	b932      	cbnz	r2, 800a8b6 <_strtoul_l.isra.0+0xd2>
 800a8a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ac:	b107      	cbz	r7, 800a8b0 <_strtoul_l.isra.0+0xcc>
 800a8ae:	4240      	negs	r0, r0
 800a8b0:	2a00      	cmp	r2, #0
 800a8b2:	d0f9      	beq.n	800a8a8 <_strtoul_l.isra.0+0xc4>
 800a8b4:	b106      	cbz	r6, 800a8b8 <_strtoul_l.isra.0+0xd4>
 800a8b6:	1e69      	subs	r1, r5, #1
 800a8b8:	6011      	str	r1, [r2, #0]
 800a8ba:	e7f5      	b.n	800a8a8 <_strtoul_l.isra.0+0xc4>
 800a8bc:	0808313b 	.word	0x0808313b

0800a8c0 <strtoul>:
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	460a      	mov	r2, r1
 800a8c4:	4601      	mov	r1, r0
 800a8c6:	4802      	ldr	r0, [pc, #8]	@ (800a8d0 <strtoul+0x10>)
 800a8c8:	6800      	ldr	r0, [r0, #0]
 800a8ca:	f7ff bf8b 	b.w	800a7e4 <_strtoul_l.isra.0>
 800a8ce:	bf00      	nop
 800a8d0:	24000028 	.word	0x24000028

0800a8d4 <_fwalk_sglue>:
 800a8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8d8:	4607      	mov	r7, r0
 800a8da:	4688      	mov	r8, r1
 800a8dc:	4614      	mov	r4, r2
 800a8de:	2600      	movs	r6, #0
 800a8e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8e4:	f1b9 0901 	subs.w	r9, r9, #1
 800a8e8:	d505      	bpl.n	800a8f6 <_fwalk_sglue+0x22>
 800a8ea:	6824      	ldr	r4, [r4, #0]
 800a8ec:	2c00      	cmp	r4, #0
 800a8ee:	d1f7      	bne.n	800a8e0 <_fwalk_sglue+0xc>
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8f6:	89ab      	ldrh	r3, [r5, #12]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d907      	bls.n	800a90c <_fwalk_sglue+0x38>
 800a8fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a900:	3301      	adds	r3, #1
 800a902:	d003      	beq.n	800a90c <_fwalk_sglue+0x38>
 800a904:	4629      	mov	r1, r5
 800a906:	4638      	mov	r0, r7
 800a908:	47c0      	blx	r8
 800a90a:	4306      	orrs	r6, r0
 800a90c:	3568      	adds	r5, #104	@ 0x68
 800a90e:	e7e9      	b.n	800a8e4 <_fwalk_sglue+0x10>

0800a910 <memset>:
 800a910:	4402      	add	r2, r0
 800a912:	4603      	mov	r3, r0
 800a914:	4293      	cmp	r3, r2
 800a916:	d100      	bne.n	800a91a <memset+0xa>
 800a918:	4770      	bx	lr
 800a91a:	f803 1b01 	strb.w	r1, [r3], #1
 800a91e:	e7f9      	b.n	800a914 <memset+0x4>

0800a920 <__strtok_r>:
 800a920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a922:	4604      	mov	r4, r0
 800a924:	b908      	cbnz	r0, 800a92a <__strtok_r+0xa>
 800a926:	6814      	ldr	r4, [r2, #0]
 800a928:	b144      	cbz	r4, 800a93c <__strtok_r+0x1c>
 800a92a:	4620      	mov	r0, r4
 800a92c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a930:	460f      	mov	r7, r1
 800a932:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a936:	b91e      	cbnz	r6, 800a940 <__strtok_r+0x20>
 800a938:	b965      	cbnz	r5, 800a954 <__strtok_r+0x34>
 800a93a:	6015      	str	r5, [r2, #0]
 800a93c:	2000      	movs	r0, #0
 800a93e:	e005      	b.n	800a94c <__strtok_r+0x2c>
 800a940:	42b5      	cmp	r5, r6
 800a942:	d1f6      	bne.n	800a932 <__strtok_r+0x12>
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1f0      	bne.n	800a92a <__strtok_r+0xa>
 800a948:	6014      	str	r4, [r2, #0]
 800a94a:	7003      	strb	r3, [r0, #0]
 800a94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94e:	461c      	mov	r4, r3
 800a950:	e00c      	b.n	800a96c <__strtok_r+0x4c>
 800a952:	b91d      	cbnz	r5, 800a95c <__strtok_r+0x3c>
 800a954:	4627      	mov	r7, r4
 800a956:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a95a:	460e      	mov	r6, r1
 800a95c:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a960:	42ab      	cmp	r3, r5
 800a962:	d1f6      	bne.n	800a952 <__strtok_r+0x32>
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0f2      	beq.n	800a94e <__strtok_r+0x2e>
 800a968:	2300      	movs	r3, #0
 800a96a:	703b      	strb	r3, [r7, #0]
 800a96c:	6014      	str	r4, [r2, #0]
 800a96e:	e7ed      	b.n	800a94c <__strtok_r+0x2c>

0800a970 <strtok_r>:
 800a970:	2301      	movs	r3, #1
 800a972:	f7ff bfd5 	b.w	800a920 <__strtok_r>
	...

0800a978 <__errno>:
 800a978:	4b01      	ldr	r3, [pc, #4]	@ (800a980 <__errno+0x8>)
 800a97a:	6818      	ldr	r0, [r3, #0]
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	24000028 	.word	0x24000028

0800a984 <__libc_init_array>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	4d0d      	ldr	r5, [pc, #52]	@ (800a9bc <__libc_init_array+0x38>)
 800a988:	4c0d      	ldr	r4, [pc, #52]	@ (800a9c0 <__libc_init_array+0x3c>)
 800a98a:	1b64      	subs	r4, r4, r5
 800a98c:	10a4      	asrs	r4, r4, #2
 800a98e:	2600      	movs	r6, #0
 800a990:	42a6      	cmp	r6, r4
 800a992:	d109      	bne.n	800a9a8 <__libc_init_array+0x24>
 800a994:	4d0b      	ldr	r5, [pc, #44]	@ (800a9c4 <__libc_init_array+0x40>)
 800a996:	4c0c      	ldr	r4, [pc, #48]	@ (800a9c8 <__libc_init_array+0x44>)
 800a998:	f001 f87c 	bl	800ba94 <_init>
 800a99c:	1b64      	subs	r4, r4, r5
 800a99e:	10a4      	asrs	r4, r4, #2
 800a9a0:	2600      	movs	r6, #0
 800a9a2:	42a6      	cmp	r6, r4
 800a9a4:	d105      	bne.n	800a9b2 <__libc_init_array+0x2e>
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}
 800a9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ac:	4798      	blx	r3
 800a9ae:	3601      	adds	r6, #1
 800a9b0:	e7ee      	b.n	800a990 <__libc_init_array+0xc>
 800a9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b6:	4798      	blx	r3
 800a9b8:	3601      	adds	r6, #1
 800a9ba:	e7f2      	b.n	800a9a2 <__libc_init_array+0x1e>
 800a9bc:	08083250 	.word	0x08083250
 800a9c0:	08083250 	.word	0x08083250
 800a9c4:	08083250 	.word	0x08083250
 800a9c8:	08083254 	.word	0x08083254

0800a9cc <__retarget_lock_init_recursive>:
 800a9cc:	4770      	bx	lr

0800a9ce <__retarget_lock_acquire_recursive>:
 800a9ce:	4770      	bx	lr

0800a9d0 <__retarget_lock_release_recursive>:
 800a9d0:	4770      	bx	lr
	...

0800a9d4 <__assert_func>:
 800a9d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9d6:	4614      	mov	r4, r2
 800a9d8:	461a      	mov	r2, r3
 800a9da:	4b09      	ldr	r3, [pc, #36]	@ (800aa00 <__assert_func+0x2c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4605      	mov	r5, r0
 800a9e0:	68d8      	ldr	r0, [r3, #12]
 800a9e2:	b14c      	cbz	r4, 800a9f8 <__assert_func+0x24>
 800a9e4:	4b07      	ldr	r3, [pc, #28]	@ (800aa04 <__assert_func+0x30>)
 800a9e6:	9100      	str	r1, [sp, #0]
 800a9e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9ec:	4906      	ldr	r1, [pc, #24]	@ (800aa08 <__assert_func+0x34>)
 800a9ee:	462b      	mov	r3, r5
 800a9f0:	f000 f9b4 	bl	800ad5c <fiprintf>
 800a9f4:	f000 fa1a 	bl	800ae2c <abort>
 800a9f8:	4b04      	ldr	r3, [pc, #16]	@ (800aa0c <__assert_func+0x38>)
 800a9fa:	461c      	mov	r4, r3
 800a9fc:	e7f3      	b.n	800a9e6 <__assert_func+0x12>
 800a9fe:	bf00      	nop
 800aa00:	24000028 	.word	0x24000028
 800aa04:	080830cb 	.word	0x080830cb
 800aa08:	080830d8 	.word	0x080830d8
 800aa0c:	08083106 	.word	0x08083106

0800aa10 <malloc>:
 800aa10:	4b02      	ldr	r3, [pc, #8]	@ (800aa1c <malloc+0xc>)
 800aa12:	4601      	mov	r1, r0
 800aa14:	6818      	ldr	r0, [r3, #0]
 800aa16:	f000 b825 	b.w	800aa64 <_malloc_r>
 800aa1a:	bf00      	nop
 800aa1c:	24000028 	.word	0x24000028

0800aa20 <sbrk_aligned>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	4e0f      	ldr	r6, [pc, #60]	@ (800aa60 <sbrk_aligned+0x40>)
 800aa24:	460c      	mov	r4, r1
 800aa26:	6831      	ldr	r1, [r6, #0]
 800aa28:	4605      	mov	r5, r0
 800aa2a:	b911      	cbnz	r1, 800aa32 <sbrk_aligned+0x12>
 800aa2c:	f000 f9cc 	bl	800adc8 <_sbrk_r>
 800aa30:	6030      	str	r0, [r6, #0]
 800aa32:	4621      	mov	r1, r4
 800aa34:	4628      	mov	r0, r5
 800aa36:	f000 f9c7 	bl	800adc8 <_sbrk_r>
 800aa3a:	1c43      	adds	r3, r0, #1
 800aa3c:	d103      	bne.n	800aa46 <sbrk_aligned+0x26>
 800aa3e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800aa42:	4620      	mov	r0, r4
 800aa44:	bd70      	pop	{r4, r5, r6, pc}
 800aa46:	1cc4      	adds	r4, r0, #3
 800aa48:	f024 0403 	bic.w	r4, r4, #3
 800aa4c:	42a0      	cmp	r0, r4
 800aa4e:	d0f8      	beq.n	800aa42 <sbrk_aligned+0x22>
 800aa50:	1a21      	subs	r1, r4, r0
 800aa52:	4628      	mov	r0, r5
 800aa54:	f000 f9b8 	bl	800adc8 <_sbrk_r>
 800aa58:	3001      	adds	r0, #1
 800aa5a:	d1f2      	bne.n	800aa42 <sbrk_aligned+0x22>
 800aa5c:	e7ef      	b.n	800aa3e <sbrk_aligned+0x1e>
 800aa5e:	bf00      	nop
 800aa60:	2406f5a0 	.word	0x2406f5a0

0800aa64 <_malloc_r>:
 800aa64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa68:	1ccd      	adds	r5, r1, #3
 800aa6a:	f025 0503 	bic.w	r5, r5, #3
 800aa6e:	3508      	adds	r5, #8
 800aa70:	2d0c      	cmp	r5, #12
 800aa72:	bf38      	it	cc
 800aa74:	250c      	movcc	r5, #12
 800aa76:	2d00      	cmp	r5, #0
 800aa78:	4606      	mov	r6, r0
 800aa7a:	db01      	blt.n	800aa80 <_malloc_r+0x1c>
 800aa7c:	42a9      	cmp	r1, r5
 800aa7e:	d904      	bls.n	800aa8a <_malloc_r+0x26>
 800aa80:	230c      	movs	r3, #12
 800aa82:	6033      	str	r3, [r6, #0]
 800aa84:	2000      	movs	r0, #0
 800aa86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab60 <_malloc_r+0xfc>
 800aa8e:	f000 f915 	bl	800acbc <__malloc_lock>
 800aa92:	f8d8 3000 	ldr.w	r3, [r8]
 800aa96:	461c      	mov	r4, r3
 800aa98:	bb44      	cbnz	r4, 800aaec <_malloc_r+0x88>
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff ffbf 	bl	800aa20 <sbrk_aligned>
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	d158      	bne.n	800ab5a <_malloc_r+0xf6>
 800aaa8:	f8d8 4000 	ldr.w	r4, [r8]
 800aaac:	4627      	mov	r7, r4
 800aaae:	2f00      	cmp	r7, #0
 800aab0:	d143      	bne.n	800ab3a <_malloc_r+0xd6>
 800aab2:	2c00      	cmp	r4, #0
 800aab4:	d04b      	beq.n	800ab4e <_malloc_r+0xea>
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	4639      	mov	r1, r7
 800aaba:	4630      	mov	r0, r6
 800aabc:	eb04 0903 	add.w	r9, r4, r3
 800aac0:	f000 f982 	bl	800adc8 <_sbrk_r>
 800aac4:	4581      	cmp	r9, r0
 800aac6:	d142      	bne.n	800ab4e <_malloc_r+0xea>
 800aac8:	6821      	ldr	r1, [r4, #0]
 800aaca:	1a6d      	subs	r5, r5, r1
 800aacc:	4629      	mov	r1, r5
 800aace:	4630      	mov	r0, r6
 800aad0:	f7ff ffa6 	bl	800aa20 <sbrk_aligned>
 800aad4:	3001      	adds	r0, #1
 800aad6:	d03a      	beq.n	800ab4e <_malloc_r+0xea>
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	442b      	add	r3, r5
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	f8d8 3000 	ldr.w	r3, [r8]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	bb62      	cbnz	r2, 800ab40 <_malloc_r+0xdc>
 800aae6:	f8c8 7000 	str.w	r7, [r8]
 800aaea:	e00f      	b.n	800ab0c <_malloc_r+0xa8>
 800aaec:	6822      	ldr	r2, [r4, #0]
 800aaee:	1b52      	subs	r2, r2, r5
 800aaf0:	d420      	bmi.n	800ab34 <_malloc_r+0xd0>
 800aaf2:	2a0b      	cmp	r2, #11
 800aaf4:	d917      	bls.n	800ab26 <_malloc_r+0xc2>
 800aaf6:	1961      	adds	r1, r4, r5
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	6025      	str	r5, [r4, #0]
 800aafc:	bf18      	it	ne
 800aafe:	6059      	strne	r1, [r3, #4]
 800ab00:	6863      	ldr	r3, [r4, #4]
 800ab02:	bf08      	it	eq
 800ab04:	f8c8 1000 	streq.w	r1, [r8]
 800ab08:	5162      	str	r2, [r4, r5]
 800ab0a:	604b      	str	r3, [r1, #4]
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f000 f8db 	bl	800acc8 <__malloc_unlock>
 800ab12:	f104 000b 	add.w	r0, r4, #11
 800ab16:	1d23      	adds	r3, r4, #4
 800ab18:	f020 0007 	bic.w	r0, r0, #7
 800ab1c:	1ac2      	subs	r2, r0, r3
 800ab1e:	bf1c      	itt	ne
 800ab20:	1a1b      	subne	r3, r3, r0
 800ab22:	50a3      	strne	r3, [r4, r2]
 800ab24:	e7af      	b.n	800aa86 <_malloc_r+0x22>
 800ab26:	6862      	ldr	r2, [r4, #4]
 800ab28:	42a3      	cmp	r3, r4
 800ab2a:	bf0c      	ite	eq
 800ab2c:	f8c8 2000 	streq.w	r2, [r8]
 800ab30:	605a      	strne	r2, [r3, #4]
 800ab32:	e7eb      	b.n	800ab0c <_malloc_r+0xa8>
 800ab34:	4623      	mov	r3, r4
 800ab36:	6864      	ldr	r4, [r4, #4]
 800ab38:	e7ae      	b.n	800aa98 <_malloc_r+0x34>
 800ab3a:	463c      	mov	r4, r7
 800ab3c:	687f      	ldr	r7, [r7, #4]
 800ab3e:	e7b6      	b.n	800aaae <_malloc_r+0x4a>
 800ab40:	461a      	mov	r2, r3
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	42a3      	cmp	r3, r4
 800ab46:	d1fb      	bne.n	800ab40 <_malloc_r+0xdc>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	6053      	str	r3, [r2, #4]
 800ab4c:	e7de      	b.n	800ab0c <_malloc_r+0xa8>
 800ab4e:	230c      	movs	r3, #12
 800ab50:	6033      	str	r3, [r6, #0]
 800ab52:	4630      	mov	r0, r6
 800ab54:	f000 f8b8 	bl	800acc8 <__malloc_unlock>
 800ab58:	e794      	b.n	800aa84 <_malloc_r+0x20>
 800ab5a:	6005      	str	r5, [r0, #0]
 800ab5c:	e7d6      	b.n	800ab0c <_malloc_r+0xa8>
 800ab5e:	bf00      	nop
 800ab60:	2406f5a4 	.word	0x2406f5a4

0800ab64 <__sflush_r>:
 800ab64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6c:	0716      	lsls	r6, r2, #28
 800ab6e:	4605      	mov	r5, r0
 800ab70:	460c      	mov	r4, r1
 800ab72:	d454      	bmi.n	800ac1e <__sflush_r+0xba>
 800ab74:	684b      	ldr	r3, [r1, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	dc02      	bgt.n	800ab80 <__sflush_r+0x1c>
 800ab7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	dd48      	ble.n	800ac12 <__sflush_r+0xae>
 800ab80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab82:	2e00      	cmp	r6, #0
 800ab84:	d045      	beq.n	800ac12 <__sflush_r+0xae>
 800ab86:	2300      	movs	r3, #0
 800ab88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab8c:	682f      	ldr	r7, [r5, #0]
 800ab8e:	6a21      	ldr	r1, [r4, #32]
 800ab90:	602b      	str	r3, [r5, #0]
 800ab92:	d030      	beq.n	800abf6 <__sflush_r+0x92>
 800ab94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	0759      	lsls	r1, r3, #29
 800ab9a:	d505      	bpl.n	800aba8 <__sflush_r+0x44>
 800ab9c:	6863      	ldr	r3, [r4, #4]
 800ab9e:	1ad2      	subs	r2, r2, r3
 800aba0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aba2:	b10b      	cbz	r3, 800aba8 <__sflush_r+0x44>
 800aba4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aba6:	1ad2      	subs	r2, r2, r3
 800aba8:	2300      	movs	r3, #0
 800abaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abac:	6a21      	ldr	r1, [r4, #32]
 800abae:	4628      	mov	r0, r5
 800abb0:	47b0      	blx	r6
 800abb2:	1c43      	adds	r3, r0, #1
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	d106      	bne.n	800abc6 <__sflush_r+0x62>
 800abb8:	6829      	ldr	r1, [r5, #0]
 800abba:	291d      	cmp	r1, #29
 800abbc:	d82b      	bhi.n	800ac16 <__sflush_r+0xb2>
 800abbe:	4a2a      	ldr	r2, [pc, #168]	@ (800ac68 <__sflush_r+0x104>)
 800abc0:	40ca      	lsrs	r2, r1
 800abc2:	07d6      	lsls	r6, r2, #31
 800abc4:	d527      	bpl.n	800ac16 <__sflush_r+0xb2>
 800abc6:	2200      	movs	r2, #0
 800abc8:	6062      	str	r2, [r4, #4]
 800abca:	04d9      	lsls	r1, r3, #19
 800abcc:	6922      	ldr	r2, [r4, #16]
 800abce:	6022      	str	r2, [r4, #0]
 800abd0:	d504      	bpl.n	800abdc <__sflush_r+0x78>
 800abd2:	1c42      	adds	r2, r0, #1
 800abd4:	d101      	bne.n	800abda <__sflush_r+0x76>
 800abd6:	682b      	ldr	r3, [r5, #0]
 800abd8:	b903      	cbnz	r3, 800abdc <__sflush_r+0x78>
 800abda:	6560      	str	r0, [r4, #84]	@ 0x54
 800abdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abde:	602f      	str	r7, [r5, #0]
 800abe0:	b1b9      	cbz	r1, 800ac12 <__sflush_r+0xae>
 800abe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abe6:	4299      	cmp	r1, r3
 800abe8:	d002      	beq.n	800abf0 <__sflush_r+0x8c>
 800abea:	4628      	mov	r0, r5
 800abec:	f000 f926 	bl	800ae3c <_free_r>
 800abf0:	2300      	movs	r3, #0
 800abf2:	6363      	str	r3, [r4, #52]	@ 0x34
 800abf4:	e00d      	b.n	800ac12 <__sflush_r+0xae>
 800abf6:	2301      	movs	r3, #1
 800abf8:	4628      	mov	r0, r5
 800abfa:	47b0      	blx	r6
 800abfc:	4602      	mov	r2, r0
 800abfe:	1c50      	adds	r0, r2, #1
 800ac00:	d1c9      	bne.n	800ab96 <__sflush_r+0x32>
 800ac02:	682b      	ldr	r3, [r5, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d0c6      	beq.n	800ab96 <__sflush_r+0x32>
 800ac08:	2b1d      	cmp	r3, #29
 800ac0a:	d001      	beq.n	800ac10 <__sflush_r+0xac>
 800ac0c:	2b16      	cmp	r3, #22
 800ac0e:	d11e      	bne.n	800ac4e <__sflush_r+0xea>
 800ac10:	602f      	str	r7, [r5, #0]
 800ac12:	2000      	movs	r0, #0
 800ac14:	e022      	b.n	800ac5c <__sflush_r+0xf8>
 800ac16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac1a:	b21b      	sxth	r3, r3
 800ac1c:	e01b      	b.n	800ac56 <__sflush_r+0xf2>
 800ac1e:	690f      	ldr	r7, [r1, #16]
 800ac20:	2f00      	cmp	r7, #0
 800ac22:	d0f6      	beq.n	800ac12 <__sflush_r+0xae>
 800ac24:	0793      	lsls	r3, r2, #30
 800ac26:	680e      	ldr	r6, [r1, #0]
 800ac28:	bf08      	it	eq
 800ac2a:	694b      	ldreq	r3, [r1, #20]
 800ac2c:	600f      	str	r7, [r1, #0]
 800ac2e:	bf18      	it	ne
 800ac30:	2300      	movne	r3, #0
 800ac32:	eba6 0807 	sub.w	r8, r6, r7
 800ac36:	608b      	str	r3, [r1, #8]
 800ac38:	f1b8 0f00 	cmp.w	r8, #0
 800ac3c:	dde9      	ble.n	800ac12 <__sflush_r+0xae>
 800ac3e:	6a21      	ldr	r1, [r4, #32]
 800ac40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac42:	4643      	mov	r3, r8
 800ac44:	463a      	mov	r2, r7
 800ac46:	4628      	mov	r0, r5
 800ac48:	47b0      	blx	r6
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	dc08      	bgt.n	800ac60 <__sflush_r+0xfc>
 800ac4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac56:	81a3      	strh	r3, [r4, #12]
 800ac58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac60:	4407      	add	r7, r0
 800ac62:	eba8 0800 	sub.w	r8, r8, r0
 800ac66:	e7e7      	b.n	800ac38 <__sflush_r+0xd4>
 800ac68:	20400001 	.word	0x20400001

0800ac6c <_fflush_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	690b      	ldr	r3, [r1, #16]
 800ac70:	4605      	mov	r5, r0
 800ac72:	460c      	mov	r4, r1
 800ac74:	b913      	cbnz	r3, 800ac7c <_fflush_r+0x10>
 800ac76:	2500      	movs	r5, #0
 800ac78:	4628      	mov	r0, r5
 800ac7a:	bd38      	pop	{r3, r4, r5, pc}
 800ac7c:	b118      	cbz	r0, 800ac86 <_fflush_r+0x1a>
 800ac7e:	6a03      	ldr	r3, [r0, #32]
 800ac80:	b90b      	cbnz	r3, 800ac86 <_fflush_r+0x1a>
 800ac82:	f7ff fd13 	bl	800a6ac <__sinit>
 800ac86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0f3      	beq.n	800ac76 <_fflush_r+0xa>
 800ac8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac90:	07d0      	lsls	r0, r2, #31
 800ac92:	d404      	bmi.n	800ac9e <_fflush_r+0x32>
 800ac94:	0599      	lsls	r1, r3, #22
 800ac96:	d402      	bmi.n	800ac9e <_fflush_r+0x32>
 800ac98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac9a:	f7ff fe98 	bl	800a9ce <__retarget_lock_acquire_recursive>
 800ac9e:	4628      	mov	r0, r5
 800aca0:	4621      	mov	r1, r4
 800aca2:	f7ff ff5f 	bl	800ab64 <__sflush_r>
 800aca6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aca8:	07da      	lsls	r2, r3, #31
 800acaa:	4605      	mov	r5, r0
 800acac:	d4e4      	bmi.n	800ac78 <_fflush_r+0xc>
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	059b      	lsls	r3, r3, #22
 800acb2:	d4e1      	bmi.n	800ac78 <_fflush_r+0xc>
 800acb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acb6:	f7ff fe8b 	bl	800a9d0 <__retarget_lock_release_recursive>
 800acba:	e7dd      	b.n	800ac78 <_fflush_r+0xc>

0800acbc <__malloc_lock>:
 800acbc:	4801      	ldr	r0, [pc, #4]	@ (800acc4 <__malloc_lock+0x8>)
 800acbe:	f7ff be86 	b.w	800a9ce <__retarget_lock_acquire_recursive>
 800acc2:	bf00      	nop
 800acc4:	2406f59c 	.word	0x2406f59c

0800acc8 <__malloc_unlock>:
 800acc8:	4801      	ldr	r0, [pc, #4]	@ (800acd0 <__malloc_unlock+0x8>)
 800acca:	f7ff be81 	b.w	800a9d0 <__retarget_lock_release_recursive>
 800acce:	bf00      	nop
 800acd0:	2406f59c 	.word	0x2406f59c

0800acd4 <__sread>:
 800acd4:	b510      	push	{r4, lr}
 800acd6:	460c      	mov	r4, r1
 800acd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acdc:	f000 f862 	bl	800ada4 <_read_r>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	bfab      	itete	ge
 800ace4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ace6:	89a3      	ldrhlt	r3, [r4, #12]
 800ace8:	181b      	addge	r3, r3, r0
 800acea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800acee:	bfac      	ite	ge
 800acf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800acf2:	81a3      	strhlt	r3, [r4, #12]
 800acf4:	bd10      	pop	{r4, pc}

0800acf6 <__swrite>:
 800acf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfa:	461f      	mov	r7, r3
 800acfc:	898b      	ldrh	r3, [r1, #12]
 800acfe:	05db      	lsls	r3, r3, #23
 800ad00:	4605      	mov	r5, r0
 800ad02:	460c      	mov	r4, r1
 800ad04:	4616      	mov	r6, r2
 800ad06:	d505      	bpl.n	800ad14 <__swrite+0x1e>
 800ad08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f000 f836 	bl	800ad80 <_lseek_r>
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad1e:	81a3      	strh	r3, [r4, #12]
 800ad20:	4632      	mov	r2, r6
 800ad22:	463b      	mov	r3, r7
 800ad24:	4628      	mov	r0, r5
 800ad26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2a:	f000 b85d 	b.w	800ade8 <_write_r>

0800ad2e <__sseek>:
 800ad2e:	b510      	push	{r4, lr}
 800ad30:	460c      	mov	r4, r1
 800ad32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad36:	f000 f823 	bl	800ad80 <_lseek_r>
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	bf15      	itete	ne
 800ad40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad4a:	81a3      	strheq	r3, [r4, #12]
 800ad4c:	bf18      	it	ne
 800ad4e:	81a3      	strhne	r3, [r4, #12]
 800ad50:	bd10      	pop	{r4, pc}

0800ad52 <__sclose>:
 800ad52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad56:	f000 b859 	b.w	800ae0c <_close_r>
	...

0800ad5c <fiprintf>:
 800ad5c:	b40e      	push	{r1, r2, r3}
 800ad5e:	b503      	push	{r0, r1, lr}
 800ad60:	4601      	mov	r1, r0
 800ad62:	ab03      	add	r3, sp, #12
 800ad64:	4805      	ldr	r0, [pc, #20]	@ (800ad7c <fiprintf+0x20>)
 800ad66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad6a:	6800      	ldr	r0, [r0, #0]
 800ad6c:	9301      	str	r3, [sp, #4]
 800ad6e:	f000 f8d9 	bl	800af24 <_vfiprintf_r>
 800ad72:	b002      	add	sp, #8
 800ad74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad78:	b003      	add	sp, #12
 800ad7a:	4770      	bx	lr
 800ad7c:	24000028 	.word	0x24000028

0800ad80 <_lseek_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d07      	ldr	r5, [pc, #28]	@ (800ada0 <_lseek_r+0x20>)
 800ad84:	4604      	mov	r4, r0
 800ad86:	4608      	mov	r0, r1
 800ad88:	4611      	mov	r1, r2
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	602a      	str	r2, [r5, #0]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	f7f7 fb82 	bl	8002498 <_lseek>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d102      	bne.n	800ad9e <_lseek_r+0x1e>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	b103      	cbz	r3, 800ad9e <_lseek_r+0x1e>
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	2406f5a8 	.word	0x2406f5a8

0800ada4 <_read_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	4d07      	ldr	r5, [pc, #28]	@ (800adc4 <_read_r+0x20>)
 800ada8:	4604      	mov	r4, r0
 800adaa:	4608      	mov	r0, r1
 800adac:	4611      	mov	r1, r2
 800adae:	2200      	movs	r2, #0
 800adb0:	602a      	str	r2, [r5, #0]
 800adb2:	461a      	mov	r2, r3
 800adb4:	f7f7 fb48 	bl	8002448 <_read>
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	d102      	bne.n	800adc2 <_read_r+0x1e>
 800adbc:	682b      	ldr	r3, [r5, #0]
 800adbe:	b103      	cbz	r3, 800adc2 <_read_r+0x1e>
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	2406f5a8 	.word	0x2406f5a8

0800adc8 <_sbrk_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4d06      	ldr	r5, [pc, #24]	@ (800ade4 <_sbrk_r+0x1c>)
 800adcc:	2300      	movs	r3, #0
 800adce:	4604      	mov	r4, r0
 800add0:	4608      	mov	r0, r1
 800add2:	602b      	str	r3, [r5, #0]
 800add4:	f7f7 fb62 	bl	800249c <_sbrk>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	d102      	bne.n	800ade2 <_sbrk_r+0x1a>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	b103      	cbz	r3, 800ade2 <_sbrk_r+0x1a>
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	2406f5a8 	.word	0x2406f5a8

0800ade8 <_write_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4d07      	ldr	r5, [pc, #28]	@ (800ae08 <_write_r+0x20>)
 800adec:	4604      	mov	r4, r0
 800adee:	4608      	mov	r0, r1
 800adf0:	4611      	mov	r1, r2
 800adf2:	2200      	movs	r2, #0
 800adf4:	602a      	str	r2, [r5, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	f7f7 fb34 	bl	8002464 <_write>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d102      	bne.n	800ae06 <_write_r+0x1e>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	b103      	cbz	r3, 800ae06 <_write_r+0x1e>
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	bd38      	pop	{r3, r4, r5, pc}
 800ae08:	2406f5a8 	.word	0x2406f5a8

0800ae0c <_close_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4d06      	ldr	r5, [pc, #24]	@ (800ae28 <_close_r+0x1c>)
 800ae10:	2300      	movs	r3, #0
 800ae12:	4604      	mov	r4, r0
 800ae14:	4608      	mov	r0, r1
 800ae16:	602b      	str	r3, [r5, #0]
 800ae18:	f7f7 fb32 	bl	8002480 <_close>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_close_r+0x1a>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_close_r+0x1a>
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	2406f5a8 	.word	0x2406f5a8

0800ae2c <abort>:
 800ae2c:	b508      	push	{r3, lr}
 800ae2e:	2006      	movs	r0, #6
 800ae30:	f000 fc3a 	bl	800b6a8 <raise>
 800ae34:	2001      	movs	r0, #1
 800ae36:	f7f7 fb01 	bl	800243c <_exit>
	...

0800ae3c <_free_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4605      	mov	r5, r0
 800ae40:	2900      	cmp	r1, #0
 800ae42:	d041      	beq.n	800aec8 <_free_r+0x8c>
 800ae44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae48:	1f0c      	subs	r4, r1, #4
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	bfb8      	it	lt
 800ae4e:	18e4      	addlt	r4, r4, r3
 800ae50:	f7ff ff34 	bl	800acbc <__malloc_lock>
 800ae54:	4a1d      	ldr	r2, [pc, #116]	@ (800aecc <_free_r+0x90>)
 800ae56:	6813      	ldr	r3, [r2, #0]
 800ae58:	b933      	cbnz	r3, 800ae68 <_free_r+0x2c>
 800ae5a:	6063      	str	r3, [r4, #4]
 800ae5c:	6014      	str	r4, [r2, #0]
 800ae5e:	4628      	mov	r0, r5
 800ae60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae64:	f7ff bf30 	b.w	800acc8 <__malloc_unlock>
 800ae68:	42a3      	cmp	r3, r4
 800ae6a:	d908      	bls.n	800ae7e <_free_r+0x42>
 800ae6c:	6820      	ldr	r0, [r4, #0]
 800ae6e:	1821      	adds	r1, r4, r0
 800ae70:	428b      	cmp	r3, r1
 800ae72:	bf01      	itttt	eq
 800ae74:	6819      	ldreq	r1, [r3, #0]
 800ae76:	685b      	ldreq	r3, [r3, #4]
 800ae78:	1809      	addeq	r1, r1, r0
 800ae7a:	6021      	streq	r1, [r4, #0]
 800ae7c:	e7ed      	b.n	800ae5a <_free_r+0x1e>
 800ae7e:	461a      	mov	r2, r3
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	b10b      	cbz	r3, 800ae88 <_free_r+0x4c>
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	d9fa      	bls.n	800ae7e <_free_r+0x42>
 800ae88:	6811      	ldr	r1, [r2, #0]
 800ae8a:	1850      	adds	r0, r2, r1
 800ae8c:	42a0      	cmp	r0, r4
 800ae8e:	d10b      	bne.n	800aea8 <_free_r+0x6c>
 800ae90:	6820      	ldr	r0, [r4, #0]
 800ae92:	4401      	add	r1, r0
 800ae94:	1850      	adds	r0, r2, r1
 800ae96:	4283      	cmp	r3, r0
 800ae98:	6011      	str	r1, [r2, #0]
 800ae9a:	d1e0      	bne.n	800ae5e <_free_r+0x22>
 800ae9c:	6818      	ldr	r0, [r3, #0]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	6053      	str	r3, [r2, #4]
 800aea2:	4408      	add	r0, r1
 800aea4:	6010      	str	r0, [r2, #0]
 800aea6:	e7da      	b.n	800ae5e <_free_r+0x22>
 800aea8:	d902      	bls.n	800aeb0 <_free_r+0x74>
 800aeaa:	230c      	movs	r3, #12
 800aeac:	602b      	str	r3, [r5, #0]
 800aeae:	e7d6      	b.n	800ae5e <_free_r+0x22>
 800aeb0:	6820      	ldr	r0, [r4, #0]
 800aeb2:	1821      	adds	r1, r4, r0
 800aeb4:	428b      	cmp	r3, r1
 800aeb6:	bf04      	itt	eq
 800aeb8:	6819      	ldreq	r1, [r3, #0]
 800aeba:	685b      	ldreq	r3, [r3, #4]
 800aebc:	6063      	str	r3, [r4, #4]
 800aebe:	bf04      	itt	eq
 800aec0:	1809      	addeq	r1, r1, r0
 800aec2:	6021      	streq	r1, [r4, #0]
 800aec4:	6054      	str	r4, [r2, #4]
 800aec6:	e7ca      	b.n	800ae5e <_free_r+0x22>
 800aec8:	bd38      	pop	{r3, r4, r5, pc}
 800aeca:	bf00      	nop
 800aecc:	2406f5a4 	.word	0x2406f5a4

0800aed0 <__sfputc_r>:
 800aed0:	6893      	ldr	r3, [r2, #8]
 800aed2:	3b01      	subs	r3, #1
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	b410      	push	{r4}
 800aed8:	6093      	str	r3, [r2, #8]
 800aeda:	da08      	bge.n	800aeee <__sfputc_r+0x1e>
 800aedc:	6994      	ldr	r4, [r2, #24]
 800aede:	42a3      	cmp	r3, r4
 800aee0:	db01      	blt.n	800aee6 <__sfputc_r+0x16>
 800aee2:	290a      	cmp	r1, #10
 800aee4:	d103      	bne.n	800aeee <__sfputc_r+0x1e>
 800aee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeea:	f000 babf 	b.w	800b46c <__swbuf_r>
 800aeee:	6813      	ldr	r3, [r2, #0]
 800aef0:	1c58      	adds	r0, r3, #1
 800aef2:	6010      	str	r0, [r2, #0]
 800aef4:	7019      	strb	r1, [r3, #0]
 800aef6:	4608      	mov	r0, r1
 800aef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <__sfputs_r>:
 800aefe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af00:	4606      	mov	r6, r0
 800af02:	460f      	mov	r7, r1
 800af04:	4614      	mov	r4, r2
 800af06:	18d5      	adds	r5, r2, r3
 800af08:	42ac      	cmp	r4, r5
 800af0a:	d101      	bne.n	800af10 <__sfputs_r+0x12>
 800af0c:	2000      	movs	r0, #0
 800af0e:	e007      	b.n	800af20 <__sfputs_r+0x22>
 800af10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af14:	463a      	mov	r2, r7
 800af16:	4630      	mov	r0, r6
 800af18:	f7ff ffda 	bl	800aed0 <__sfputc_r>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d1f3      	bne.n	800af08 <__sfputs_r+0xa>
 800af20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af24 <_vfiprintf_r>:
 800af24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af28:	460d      	mov	r5, r1
 800af2a:	b09d      	sub	sp, #116	@ 0x74
 800af2c:	4614      	mov	r4, r2
 800af2e:	4698      	mov	r8, r3
 800af30:	4606      	mov	r6, r0
 800af32:	b118      	cbz	r0, 800af3c <_vfiprintf_r+0x18>
 800af34:	6a03      	ldr	r3, [r0, #32]
 800af36:	b90b      	cbnz	r3, 800af3c <_vfiprintf_r+0x18>
 800af38:	f7ff fbb8 	bl	800a6ac <__sinit>
 800af3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af3e:	07d9      	lsls	r1, r3, #31
 800af40:	d405      	bmi.n	800af4e <_vfiprintf_r+0x2a>
 800af42:	89ab      	ldrh	r3, [r5, #12]
 800af44:	059a      	lsls	r2, r3, #22
 800af46:	d402      	bmi.n	800af4e <_vfiprintf_r+0x2a>
 800af48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af4a:	f7ff fd40 	bl	800a9ce <__retarget_lock_acquire_recursive>
 800af4e:	89ab      	ldrh	r3, [r5, #12]
 800af50:	071b      	lsls	r3, r3, #28
 800af52:	d501      	bpl.n	800af58 <_vfiprintf_r+0x34>
 800af54:	692b      	ldr	r3, [r5, #16]
 800af56:	b99b      	cbnz	r3, 800af80 <_vfiprintf_r+0x5c>
 800af58:	4629      	mov	r1, r5
 800af5a:	4630      	mov	r0, r6
 800af5c:	f000 fac4 	bl	800b4e8 <__swsetup_r>
 800af60:	b170      	cbz	r0, 800af80 <_vfiprintf_r+0x5c>
 800af62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af64:	07dc      	lsls	r4, r3, #31
 800af66:	d504      	bpl.n	800af72 <_vfiprintf_r+0x4e>
 800af68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af6c:	b01d      	add	sp, #116	@ 0x74
 800af6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af72:	89ab      	ldrh	r3, [r5, #12]
 800af74:	0598      	lsls	r0, r3, #22
 800af76:	d4f7      	bmi.n	800af68 <_vfiprintf_r+0x44>
 800af78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af7a:	f7ff fd29 	bl	800a9d0 <__retarget_lock_release_recursive>
 800af7e:	e7f3      	b.n	800af68 <_vfiprintf_r+0x44>
 800af80:	2300      	movs	r3, #0
 800af82:	9309      	str	r3, [sp, #36]	@ 0x24
 800af84:	2320      	movs	r3, #32
 800af86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af8e:	2330      	movs	r3, #48	@ 0x30
 800af90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b140 <_vfiprintf_r+0x21c>
 800af94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af98:	f04f 0901 	mov.w	r9, #1
 800af9c:	4623      	mov	r3, r4
 800af9e:	469a      	mov	sl, r3
 800afa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afa4:	b10a      	cbz	r2, 800afaa <_vfiprintf_r+0x86>
 800afa6:	2a25      	cmp	r2, #37	@ 0x25
 800afa8:	d1f9      	bne.n	800af9e <_vfiprintf_r+0x7a>
 800afaa:	ebba 0b04 	subs.w	fp, sl, r4
 800afae:	d00b      	beq.n	800afc8 <_vfiprintf_r+0xa4>
 800afb0:	465b      	mov	r3, fp
 800afb2:	4622      	mov	r2, r4
 800afb4:	4629      	mov	r1, r5
 800afb6:	4630      	mov	r0, r6
 800afb8:	f7ff ffa1 	bl	800aefe <__sfputs_r>
 800afbc:	3001      	adds	r0, #1
 800afbe:	f000 80a7 	beq.w	800b110 <_vfiprintf_r+0x1ec>
 800afc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afc4:	445a      	add	r2, fp
 800afc6:	9209      	str	r2, [sp, #36]	@ 0x24
 800afc8:	f89a 3000 	ldrb.w	r3, [sl]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 809f 	beq.w	800b110 <_vfiprintf_r+0x1ec>
 800afd2:	2300      	movs	r3, #0
 800afd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afdc:	f10a 0a01 	add.w	sl, sl, #1
 800afe0:	9304      	str	r3, [sp, #16]
 800afe2:	9307      	str	r3, [sp, #28]
 800afe4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afe8:	931a      	str	r3, [sp, #104]	@ 0x68
 800afea:	4654      	mov	r4, sl
 800afec:	2205      	movs	r2, #5
 800afee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff2:	4853      	ldr	r0, [pc, #332]	@ (800b140 <_vfiprintf_r+0x21c>)
 800aff4:	f7f5 f9d4 	bl	80003a0 <memchr>
 800aff8:	9a04      	ldr	r2, [sp, #16]
 800affa:	b9d8      	cbnz	r0, 800b034 <_vfiprintf_r+0x110>
 800affc:	06d1      	lsls	r1, r2, #27
 800affe:	bf44      	itt	mi
 800b000:	2320      	movmi	r3, #32
 800b002:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b006:	0713      	lsls	r3, r2, #28
 800b008:	bf44      	itt	mi
 800b00a:	232b      	movmi	r3, #43	@ 0x2b
 800b00c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b010:	f89a 3000 	ldrb.w	r3, [sl]
 800b014:	2b2a      	cmp	r3, #42	@ 0x2a
 800b016:	d015      	beq.n	800b044 <_vfiprintf_r+0x120>
 800b018:	9a07      	ldr	r2, [sp, #28]
 800b01a:	4654      	mov	r4, sl
 800b01c:	2000      	movs	r0, #0
 800b01e:	f04f 0c0a 	mov.w	ip, #10
 800b022:	4621      	mov	r1, r4
 800b024:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b028:	3b30      	subs	r3, #48	@ 0x30
 800b02a:	2b09      	cmp	r3, #9
 800b02c:	d94b      	bls.n	800b0c6 <_vfiprintf_r+0x1a2>
 800b02e:	b1b0      	cbz	r0, 800b05e <_vfiprintf_r+0x13a>
 800b030:	9207      	str	r2, [sp, #28]
 800b032:	e014      	b.n	800b05e <_vfiprintf_r+0x13a>
 800b034:	eba0 0308 	sub.w	r3, r0, r8
 800b038:	fa09 f303 	lsl.w	r3, r9, r3
 800b03c:	4313      	orrs	r3, r2
 800b03e:	9304      	str	r3, [sp, #16]
 800b040:	46a2      	mov	sl, r4
 800b042:	e7d2      	b.n	800afea <_vfiprintf_r+0xc6>
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	1d19      	adds	r1, r3, #4
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	9103      	str	r1, [sp, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	bfbb      	ittet	lt
 800b050:	425b      	neglt	r3, r3
 800b052:	f042 0202 	orrlt.w	r2, r2, #2
 800b056:	9307      	strge	r3, [sp, #28]
 800b058:	9307      	strlt	r3, [sp, #28]
 800b05a:	bfb8      	it	lt
 800b05c:	9204      	strlt	r2, [sp, #16]
 800b05e:	7823      	ldrb	r3, [r4, #0]
 800b060:	2b2e      	cmp	r3, #46	@ 0x2e
 800b062:	d10a      	bne.n	800b07a <_vfiprintf_r+0x156>
 800b064:	7863      	ldrb	r3, [r4, #1]
 800b066:	2b2a      	cmp	r3, #42	@ 0x2a
 800b068:	d132      	bne.n	800b0d0 <_vfiprintf_r+0x1ac>
 800b06a:	9b03      	ldr	r3, [sp, #12]
 800b06c:	1d1a      	adds	r2, r3, #4
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	9203      	str	r2, [sp, #12]
 800b072:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b076:	3402      	adds	r4, #2
 800b078:	9305      	str	r3, [sp, #20]
 800b07a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b150 <_vfiprintf_r+0x22c>
 800b07e:	7821      	ldrb	r1, [r4, #0]
 800b080:	2203      	movs	r2, #3
 800b082:	4650      	mov	r0, sl
 800b084:	f7f5 f98c 	bl	80003a0 <memchr>
 800b088:	b138      	cbz	r0, 800b09a <_vfiprintf_r+0x176>
 800b08a:	9b04      	ldr	r3, [sp, #16]
 800b08c:	eba0 000a 	sub.w	r0, r0, sl
 800b090:	2240      	movs	r2, #64	@ 0x40
 800b092:	4082      	lsls	r2, r0
 800b094:	4313      	orrs	r3, r2
 800b096:	3401      	adds	r4, #1
 800b098:	9304      	str	r3, [sp, #16]
 800b09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b09e:	4829      	ldr	r0, [pc, #164]	@ (800b144 <_vfiprintf_r+0x220>)
 800b0a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0a4:	2206      	movs	r2, #6
 800b0a6:	f7f5 f97b 	bl	80003a0 <memchr>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d03f      	beq.n	800b12e <_vfiprintf_r+0x20a>
 800b0ae:	4b26      	ldr	r3, [pc, #152]	@ (800b148 <_vfiprintf_r+0x224>)
 800b0b0:	bb1b      	cbnz	r3, 800b0fa <_vfiprintf_r+0x1d6>
 800b0b2:	9b03      	ldr	r3, [sp, #12]
 800b0b4:	3307      	adds	r3, #7
 800b0b6:	f023 0307 	bic.w	r3, r3, #7
 800b0ba:	3308      	adds	r3, #8
 800b0bc:	9303      	str	r3, [sp, #12]
 800b0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c0:	443b      	add	r3, r7
 800b0c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0c4:	e76a      	b.n	800af9c <_vfiprintf_r+0x78>
 800b0c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	2001      	movs	r0, #1
 800b0ce:	e7a8      	b.n	800b022 <_vfiprintf_r+0xfe>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	3401      	adds	r4, #1
 800b0d4:	9305      	str	r3, [sp, #20]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	f04f 0c0a 	mov.w	ip, #10
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0e2:	3a30      	subs	r2, #48	@ 0x30
 800b0e4:	2a09      	cmp	r2, #9
 800b0e6:	d903      	bls.n	800b0f0 <_vfiprintf_r+0x1cc>
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d0c6      	beq.n	800b07a <_vfiprintf_r+0x156>
 800b0ec:	9105      	str	r1, [sp, #20]
 800b0ee:	e7c4      	b.n	800b07a <_vfiprintf_r+0x156>
 800b0f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e7f0      	b.n	800b0dc <_vfiprintf_r+0x1b8>
 800b0fa:	ab03      	add	r3, sp, #12
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	462a      	mov	r2, r5
 800b100:	4b12      	ldr	r3, [pc, #72]	@ (800b14c <_vfiprintf_r+0x228>)
 800b102:	a904      	add	r1, sp, #16
 800b104:	4630      	mov	r0, r6
 800b106:	f3af 8000 	nop.w
 800b10a:	4607      	mov	r7, r0
 800b10c:	1c78      	adds	r0, r7, #1
 800b10e:	d1d6      	bne.n	800b0be <_vfiprintf_r+0x19a>
 800b110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b112:	07d9      	lsls	r1, r3, #31
 800b114:	d405      	bmi.n	800b122 <_vfiprintf_r+0x1fe>
 800b116:	89ab      	ldrh	r3, [r5, #12]
 800b118:	059a      	lsls	r2, r3, #22
 800b11a:	d402      	bmi.n	800b122 <_vfiprintf_r+0x1fe>
 800b11c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b11e:	f7ff fc57 	bl	800a9d0 <__retarget_lock_release_recursive>
 800b122:	89ab      	ldrh	r3, [r5, #12]
 800b124:	065b      	lsls	r3, r3, #25
 800b126:	f53f af1f 	bmi.w	800af68 <_vfiprintf_r+0x44>
 800b12a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b12c:	e71e      	b.n	800af6c <_vfiprintf_r+0x48>
 800b12e:	ab03      	add	r3, sp, #12
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	462a      	mov	r2, r5
 800b134:	4b05      	ldr	r3, [pc, #20]	@ (800b14c <_vfiprintf_r+0x228>)
 800b136:	a904      	add	r1, sp, #16
 800b138:	4630      	mov	r0, r6
 800b13a:	f000 f879 	bl	800b230 <_printf_i>
 800b13e:	e7e4      	b.n	800b10a <_vfiprintf_r+0x1e6>
 800b140:	08083107 	.word	0x08083107
 800b144:	08083111 	.word	0x08083111
 800b148:	00000000 	.word	0x00000000
 800b14c:	0800aeff 	.word	0x0800aeff
 800b150:	0808310d 	.word	0x0808310d

0800b154 <_printf_common>:
 800b154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b158:	4616      	mov	r6, r2
 800b15a:	4698      	mov	r8, r3
 800b15c:	688a      	ldr	r2, [r1, #8]
 800b15e:	690b      	ldr	r3, [r1, #16]
 800b160:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b164:	4293      	cmp	r3, r2
 800b166:	bfb8      	it	lt
 800b168:	4613      	movlt	r3, r2
 800b16a:	6033      	str	r3, [r6, #0]
 800b16c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b170:	4607      	mov	r7, r0
 800b172:	460c      	mov	r4, r1
 800b174:	b10a      	cbz	r2, 800b17a <_printf_common+0x26>
 800b176:	3301      	adds	r3, #1
 800b178:	6033      	str	r3, [r6, #0]
 800b17a:	6823      	ldr	r3, [r4, #0]
 800b17c:	0699      	lsls	r1, r3, #26
 800b17e:	bf42      	ittt	mi
 800b180:	6833      	ldrmi	r3, [r6, #0]
 800b182:	3302      	addmi	r3, #2
 800b184:	6033      	strmi	r3, [r6, #0]
 800b186:	6825      	ldr	r5, [r4, #0]
 800b188:	f015 0506 	ands.w	r5, r5, #6
 800b18c:	d106      	bne.n	800b19c <_printf_common+0x48>
 800b18e:	f104 0a19 	add.w	sl, r4, #25
 800b192:	68e3      	ldr	r3, [r4, #12]
 800b194:	6832      	ldr	r2, [r6, #0]
 800b196:	1a9b      	subs	r3, r3, r2
 800b198:	42ab      	cmp	r3, r5
 800b19a:	dc26      	bgt.n	800b1ea <_printf_common+0x96>
 800b19c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b1a0:	6822      	ldr	r2, [r4, #0]
 800b1a2:	3b00      	subs	r3, #0
 800b1a4:	bf18      	it	ne
 800b1a6:	2301      	movne	r3, #1
 800b1a8:	0692      	lsls	r2, r2, #26
 800b1aa:	d42b      	bmi.n	800b204 <_printf_common+0xb0>
 800b1ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b1b0:	4641      	mov	r1, r8
 800b1b2:	4638      	mov	r0, r7
 800b1b4:	47c8      	blx	r9
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	d01e      	beq.n	800b1f8 <_printf_common+0xa4>
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	6922      	ldr	r2, [r4, #16]
 800b1be:	f003 0306 	and.w	r3, r3, #6
 800b1c2:	2b04      	cmp	r3, #4
 800b1c4:	bf02      	ittt	eq
 800b1c6:	68e5      	ldreq	r5, [r4, #12]
 800b1c8:	6833      	ldreq	r3, [r6, #0]
 800b1ca:	1aed      	subeq	r5, r5, r3
 800b1cc:	68a3      	ldr	r3, [r4, #8]
 800b1ce:	bf0c      	ite	eq
 800b1d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1d4:	2500      	movne	r5, #0
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	bfc4      	itt	gt
 800b1da:	1a9b      	subgt	r3, r3, r2
 800b1dc:	18ed      	addgt	r5, r5, r3
 800b1de:	2600      	movs	r6, #0
 800b1e0:	341a      	adds	r4, #26
 800b1e2:	42b5      	cmp	r5, r6
 800b1e4:	d11a      	bne.n	800b21c <_printf_common+0xc8>
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	e008      	b.n	800b1fc <_printf_common+0xa8>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	4652      	mov	r2, sl
 800b1ee:	4641      	mov	r1, r8
 800b1f0:	4638      	mov	r0, r7
 800b1f2:	47c8      	blx	r9
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	d103      	bne.n	800b200 <_printf_common+0xac>
 800b1f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b200:	3501      	adds	r5, #1
 800b202:	e7c6      	b.n	800b192 <_printf_common+0x3e>
 800b204:	18e1      	adds	r1, r4, r3
 800b206:	1c5a      	adds	r2, r3, #1
 800b208:	2030      	movs	r0, #48	@ 0x30
 800b20a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b20e:	4422      	add	r2, r4
 800b210:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b214:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b218:	3302      	adds	r3, #2
 800b21a:	e7c7      	b.n	800b1ac <_printf_common+0x58>
 800b21c:	2301      	movs	r3, #1
 800b21e:	4622      	mov	r2, r4
 800b220:	4641      	mov	r1, r8
 800b222:	4638      	mov	r0, r7
 800b224:	47c8      	blx	r9
 800b226:	3001      	adds	r0, #1
 800b228:	d0e6      	beq.n	800b1f8 <_printf_common+0xa4>
 800b22a:	3601      	adds	r6, #1
 800b22c:	e7d9      	b.n	800b1e2 <_printf_common+0x8e>
	...

0800b230 <_printf_i>:
 800b230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b234:	7e0f      	ldrb	r7, [r1, #24]
 800b236:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b238:	2f78      	cmp	r7, #120	@ 0x78
 800b23a:	4691      	mov	r9, r2
 800b23c:	4680      	mov	r8, r0
 800b23e:	460c      	mov	r4, r1
 800b240:	469a      	mov	sl, r3
 800b242:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b246:	d807      	bhi.n	800b258 <_printf_i+0x28>
 800b248:	2f62      	cmp	r7, #98	@ 0x62
 800b24a:	d80a      	bhi.n	800b262 <_printf_i+0x32>
 800b24c:	2f00      	cmp	r7, #0
 800b24e:	f000 80d1 	beq.w	800b3f4 <_printf_i+0x1c4>
 800b252:	2f58      	cmp	r7, #88	@ 0x58
 800b254:	f000 80b8 	beq.w	800b3c8 <_printf_i+0x198>
 800b258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b25c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b260:	e03a      	b.n	800b2d8 <_printf_i+0xa8>
 800b262:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b266:	2b15      	cmp	r3, #21
 800b268:	d8f6      	bhi.n	800b258 <_printf_i+0x28>
 800b26a:	a101      	add	r1, pc, #4	@ (adr r1, 800b270 <_printf_i+0x40>)
 800b26c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b270:	0800b2c9 	.word	0x0800b2c9
 800b274:	0800b2dd 	.word	0x0800b2dd
 800b278:	0800b259 	.word	0x0800b259
 800b27c:	0800b259 	.word	0x0800b259
 800b280:	0800b259 	.word	0x0800b259
 800b284:	0800b259 	.word	0x0800b259
 800b288:	0800b2dd 	.word	0x0800b2dd
 800b28c:	0800b259 	.word	0x0800b259
 800b290:	0800b259 	.word	0x0800b259
 800b294:	0800b259 	.word	0x0800b259
 800b298:	0800b259 	.word	0x0800b259
 800b29c:	0800b3db 	.word	0x0800b3db
 800b2a0:	0800b307 	.word	0x0800b307
 800b2a4:	0800b395 	.word	0x0800b395
 800b2a8:	0800b259 	.word	0x0800b259
 800b2ac:	0800b259 	.word	0x0800b259
 800b2b0:	0800b3fd 	.word	0x0800b3fd
 800b2b4:	0800b259 	.word	0x0800b259
 800b2b8:	0800b307 	.word	0x0800b307
 800b2bc:	0800b259 	.word	0x0800b259
 800b2c0:	0800b259 	.word	0x0800b259
 800b2c4:	0800b39d 	.word	0x0800b39d
 800b2c8:	6833      	ldr	r3, [r6, #0]
 800b2ca:	1d1a      	adds	r2, r3, #4
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	6032      	str	r2, [r6, #0]
 800b2d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e09c      	b.n	800b416 <_printf_i+0x1e6>
 800b2dc:	6833      	ldr	r3, [r6, #0]
 800b2de:	6820      	ldr	r0, [r4, #0]
 800b2e0:	1d19      	adds	r1, r3, #4
 800b2e2:	6031      	str	r1, [r6, #0]
 800b2e4:	0606      	lsls	r6, r0, #24
 800b2e6:	d501      	bpl.n	800b2ec <_printf_i+0xbc>
 800b2e8:	681d      	ldr	r5, [r3, #0]
 800b2ea:	e003      	b.n	800b2f4 <_printf_i+0xc4>
 800b2ec:	0645      	lsls	r5, r0, #25
 800b2ee:	d5fb      	bpl.n	800b2e8 <_printf_i+0xb8>
 800b2f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2f4:	2d00      	cmp	r5, #0
 800b2f6:	da03      	bge.n	800b300 <_printf_i+0xd0>
 800b2f8:	232d      	movs	r3, #45	@ 0x2d
 800b2fa:	426d      	negs	r5, r5
 800b2fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b300:	4858      	ldr	r0, [pc, #352]	@ (800b464 <_printf_i+0x234>)
 800b302:	230a      	movs	r3, #10
 800b304:	e011      	b.n	800b32a <_printf_i+0xfa>
 800b306:	6821      	ldr	r1, [r4, #0]
 800b308:	6833      	ldr	r3, [r6, #0]
 800b30a:	0608      	lsls	r0, r1, #24
 800b30c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b310:	d402      	bmi.n	800b318 <_printf_i+0xe8>
 800b312:	0649      	lsls	r1, r1, #25
 800b314:	bf48      	it	mi
 800b316:	b2ad      	uxthmi	r5, r5
 800b318:	2f6f      	cmp	r7, #111	@ 0x6f
 800b31a:	4852      	ldr	r0, [pc, #328]	@ (800b464 <_printf_i+0x234>)
 800b31c:	6033      	str	r3, [r6, #0]
 800b31e:	bf14      	ite	ne
 800b320:	230a      	movne	r3, #10
 800b322:	2308      	moveq	r3, #8
 800b324:	2100      	movs	r1, #0
 800b326:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b32a:	6866      	ldr	r6, [r4, #4]
 800b32c:	60a6      	str	r6, [r4, #8]
 800b32e:	2e00      	cmp	r6, #0
 800b330:	db05      	blt.n	800b33e <_printf_i+0x10e>
 800b332:	6821      	ldr	r1, [r4, #0]
 800b334:	432e      	orrs	r6, r5
 800b336:	f021 0104 	bic.w	r1, r1, #4
 800b33a:	6021      	str	r1, [r4, #0]
 800b33c:	d04b      	beq.n	800b3d6 <_printf_i+0x1a6>
 800b33e:	4616      	mov	r6, r2
 800b340:	fbb5 f1f3 	udiv	r1, r5, r3
 800b344:	fb03 5711 	mls	r7, r3, r1, r5
 800b348:	5dc7      	ldrb	r7, [r0, r7]
 800b34a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b34e:	462f      	mov	r7, r5
 800b350:	42bb      	cmp	r3, r7
 800b352:	460d      	mov	r5, r1
 800b354:	d9f4      	bls.n	800b340 <_printf_i+0x110>
 800b356:	2b08      	cmp	r3, #8
 800b358:	d10b      	bne.n	800b372 <_printf_i+0x142>
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	07df      	lsls	r7, r3, #31
 800b35e:	d508      	bpl.n	800b372 <_printf_i+0x142>
 800b360:	6923      	ldr	r3, [r4, #16]
 800b362:	6861      	ldr	r1, [r4, #4]
 800b364:	4299      	cmp	r1, r3
 800b366:	bfde      	ittt	le
 800b368:	2330      	movle	r3, #48	@ 0x30
 800b36a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b36e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b372:	1b92      	subs	r2, r2, r6
 800b374:	6122      	str	r2, [r4, #16]
 800b376:	f8cd a000 	str.w	sl, [sp]
 800b37a:	464b      	mov	r3, r9
 800b37c:	aa03      	add	r2, sp, #12
 800b37e:	4621      	mov	r1, r4
 800b380:	4640      	mov	r0, r8
 800b382:	f7ff fee7 	bl	800b154 <_printf_common>
 800b386:	3001      	adds	r0, #1
 800b388:	d14a      	bne.n	800b420 <_printf_i+0x1f0>
 800b38a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b38e:	b004      	add	sp, #16
 800b390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b394:	6823      	ldr	r3, [r4, #0]
 800b396:	f043 0320 	orr.w	r3, r3, #32
 800b39a:	6023      	str	r3, [r4, #0]
 800b39c:	4832      	ldr	r0, [pc, #200]	@ (800b468 <_printf_i+0x238>)
 800b39e:	2778      	movs	r7, #120	@ 0x78
 800b3a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	6831      	ldr	r1, [r6, #0]
 800b3a8:	061f      	lsls	r7, r3, #24
 800b3aa:	f851 5b04 	ldr.w	r5, [r1], #4
 800b3ae:	d402      	bmi.n	800b3b6 <_printf_i+0x186>
 800b3b0:	065f      	lsls	r7, r3, #25
 800b3b2:	bf48      	it	mi
 800b3b4:	b2ad      	uxthmi	r5, r5
 800b3b6:	6031      	str	r1, [r6, #0]
 800b3b8:	07d9      	lsls	r1, r3, #31
 800b3ba:	bf44      	itt	mi
 800b3bc:	f043 0320 	orrmi.w	r3, r3, #32
 800b3c0:	6023      	strmi	r3, [r4, #0]
 800b3c2:	b11d      	cbz	r5, 800b3cc <_printf_i+0x19c>
 800b3c4:	2310      	movs	r3, #16
 800b3c6:	e7ad      	b.n	800b324 <_printf_i+0xf4>
 800b3c8:	4826      	ldr	r0, [pc, #152]	@ (800b464 <_printf_i+0x234>)
 800b3ca:	e7e9      	b.n	800b3a0 <_printf_i+0x170>
 800b3cc:	6823      	ldr	r3, [r4, #0]
 800b3ce:	f023 0320 	bic.w	r3, r3, #32
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	e7f6      	b.n	800b3c4 <_printf_i+0x194>
 800b3d6:	4616      	mov	r6, r2
 800b3d8:	e7bd      	b.n	800b356 <_printf_i+0x126>
 800b3da:	6833      	ldr	r3, [r6, #0]
 800b3dc:	6825      	ldr	r5, [r4, #0]
 800b3de:	6961      	ldr	r1, [r4, #20]
 800b3e0:	1d18      	adds	r0, r3, #4
 800b3e2:	6030      	str	r0, [r6, #0]
 800b3e4:	062e      	lsls	r6, r5, #24
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	d501      	bpl.n	800b3ee <_printf_i+0x1be>
 800b3ea:	6019      	str	r1, [r3, #0]
 800b3ec:	e002      	b.n	800b3f4 <_printf_i+0x1c4>
 800b3ee:	0668      	lsls	r0, r5, #25
 800b3f0:	d5fb      	bpl.n	800b3ea <_printf_i+0x1ba>
 800b3f2:	8019      	strh	r1, [r3, #0]
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	6123      	str	r3, [r4, #16]
 800b3f8:	4616      	mov	r6, r2
 800b3fa:	e7bc      	b.n	800b376 <_printf_i+0x146>
 800b3fc:	6833      	ldr	r3, [r6, #0]
 800b3fe:	1d1a      	adds	r2, r3, #4
 800b400:	6032      	str	r2, [r6, #0]
 800b402:	681e      	ldr	r6, [r3, #0]
 800b404:	6862      	ldr	r2, [r4, #4]
 800b406:	2100      	movs	r1, #0
 800b408:	4630      	mov	r0, r6
 800b40a:	f7f4 ffc9 	bl	80003a0 <memchr>
 800b40e:	b108      	cbz	r0, 800b414 <_printf_i+0x1e4>
 800b410:	1b80      	subs	r0, r0, r6
 800b412:	6060      	str	r0, [r4, #4]
 800b414:	6863      	ldr	r3, [r4, #4]
 800b416:	6123      	str	r3, [r4, #16]
 800b418:	2300      	movs	r3, #0
 800b41a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b41e:	e7aa      	b.n	800b376 <_printf_i+0x146>
 800b420:	6923      	ldr	r3, [r4, #16]
 800b422:	4632      	mov	r2, r6
 800b424:	4649      	mov	r1, r9
 800b426:	4640      	mov	r0, r8
 800b428:	47d0      	blx	sl
 800b42a:	3001      	adds	r0, #1
 800b42c:	d0ad      	beq.n	800b38a <_printf_i+0x15a>
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	079b      	lsls	r3, r3, #30
 800b432:	d413      	bmi.n	800b45c <_printf_i+0x22c>
 800b434:	68e0      	ldr	r0, [r4, #12]
 800b436:	9b03      	ldr	r3, [sp, #12]
 800b438:	4298      	cmp	r0, r3
 800b43a:	bfb8      	it	lt
 800b43c:	4618      	movlt	r0, r3
 800b43e:	e7a6      	b.n	800b38e <_printf_i+0x15e>
 800b440:	2301      	movs	r3, #1
 800b442:	4632      	mov	r2, r6
 800b444:	4649      	mov	r1, r9
 800b446:	4640      	mov	r0, r8
 800b448:	47d0      	blx	sl
 800b44a:	3001      	adds	r0, #1
 800b44c:	d09d      	beq.n	800b38a <_printf_i+0x15a>
 800b44e:	3501      	adds	r5, #1
 800b450:	68e3      	ldr	r3, [r4, #12]
 800b452:	9903      	ldr	r1, [sp, #12]
 800b454:	1a5b      	subs	r3, r3, r1
 800b456:	42ab      	cmp	r3, r5
 800b458:	dcf2      	bgt.n	800b440 <_printf_i+0x210>
 800b45a:	e7eb      	b.n	800b434 <_printf_i+0x204>
 800b45c:	2500      	movs	r5, #0
 800b45e:	f104 0619 	add.w	r6, r4, #25
 800b462:	e7f5      	b.n	800b450 <_printf_i+0x220>
 800b464:	08083118 	.word	0x08083118
 800b468:	08083129 	.word	0x08083129

0800b46c <__swbuf_r>:
 800b46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46e:	460e      	mov	r6, r1
 800b470:	4614      	mov	r4, r2
 800b472:	4605      	mov	r5, r0
 800b474:	b118      	cbz	r0, 800b47e <__swbuf_r+0x12>
 800b476:	6a03      	ldr	r3, [r0, #32]
 800b478:	b90b      	cbnz	r3, 800b47e <__swbuf_r+0x12>
 800b47a:	f7ff f917 	bl	800a6ac <__sinit>
 800b47e:	69a3      	ldr	r3, [r4, #24]
 800b480:	60a3      	str	r3, [r4, #8]
 800b482:	89a3      	ldrh	r3, [r4, #12]
 800b484:	071a      	lsls	r2, r3, #28
 800b486:	d501      	bpl.n	800b48c <__swbuf_r+0x20>
 800b488:	6923      	ldr	r3, [r4, #16]
 800b48a:	b943      	cbnz	r3, 800b49e <__swbuf_r+0x32>
 800b48c:	4621      	mov	r1, r4
 800b48e:	4628      	mov	r0, r5
 800b490:	f000 f82a 	bl	800b4e8 <__swsetup_r>
 800b494:	b118      	cbz	r0, 800b49e <__swbuf_r+0x32>
 800b496:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b49a:	4638      	mov	r0, r7
 800b49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	6922      	ldr	r2, [r4, #16]
 800b4a2:	1a98      	subs	r0, r3, r2
 800b4a4:	6963      	ldr	r3, [r4, #20]
 800b4a6:	b2f6      	uxtb	r6, r6
 800b4a8:	4283      	cmp	r3, r0
 800b4aa:	4637      	mov	r7, r6
 800b4ac:	dc05      	bgt.n	800b4ba <__swbuf_r+0x4e>
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	f7ff fbdb 	bl	800ac6c <_fflush_r>
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d1ed      	bne.n	800b496 <__swbuf_r+0x2a>
 800b4ba:	68a3      	ldr	r3, [r4, #8]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	60a3      	str	r3, [r4, #8]
 800b4c0:	6823      	ldr	r3, [r4, #0]
 800b4c2:	1c5a      	adds	r2, r3, #1
 800b4c4:	6022      	str	r2, [r4, #0]
 800b4c6:	701e      	strb	r6, [r3, #0]
 800b4c8:	6962      	ldr	r2, [r4, #20]
 800b4ca:	1c43      	adds	r3, r0, #1
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d004      	beq.n	800b4da <__swbuf_r+0x6e>
 800b4d0:	89a3      	ldrh	r3, [r4, #12]
 800b4d2:	07db      	lsls	r3, r3, #31
 800b4d4:	d5e1      	bpl.n	800b49a <__swbuf_r+0x2e>
 800b4d6:	2e0a      	cmp	r6, #10
 800b4d8:	d1df      	bne.n	800b49a <__swbuf_r+0x2e>
 800b4da:	4621      	mov	r1, r4
 800b4dc:	4628      	mov	r0, r5
 800b4de:	f7ff fbc5 	bl	800ac6c <_fflush_r>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d0d9      	beq.n	800b49a <__swbuf_r+0x2e>
 800b4e6:	e7d6      	b.n	800b496 <__swbuf_r+0x2a>

0800b4e8 <__swsetup_r>:
 800b4e8:	b538      	push	{r3, r4, r5, lr}
 800b4ea:	4b29      	ldr	r3, [pc, #164]	@ (800b590 <__swsetup_r+0xa8>)
 800b4ec:	4605      	mov	r5, r0
 800b4ee:	6818      	ldr	r0, [r3, #0]
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	b118      	cbz	r0, 800b4fc <__swsetup_r+0x14>
 800b4f4:	6a03      	ldr	r3, [r0, #32]
 800b4f6:	b90b      	cbnz	r3, 800b4fc <__swsetup_r+0x14>
 800b4f8:	f7ff f8d8 	bl	800a6ac <__sinit>
 800b4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b500:	0719      	lsls	r1, r3, #28
 800b502:	d422      	bmi.n	800b54a <__swsetup_r+0x62>
 800b504:	06da      	lsls	r2, r3, #27
 800b506:	d407      	bmi.n	800b518 <__swsetup_r+0x30>
 800b508:	2209      	movs	r2, #9
 800b50a:	602a      	str	r2, [r5, #0]
 800b50c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b510:	81a3      	strh	r3, [r4, #12]
 800b512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b516:	e033      	b.n	800b580 <__swsetup_r+0x98>
 800b518:	0758      	lsls	r0, r3, #29
 800b51a:	d512      	bpl.n	800b542 <__swsetup_r+0x5a>
 800b51c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b51e:	b141      	cbz	r1, 800b532 <__swsetup_r+0x4a>
 800b520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b524:	4299      	cmp	r1, r3
 800b526:	d002      	beq.n	800b52e <__swsetup_r+0x46>
 800b528:	4628      	mov	r0, r5
 800b52a:	f7ff fc87 	bl	800ae3c <_free_r>
 800b52e:	2300      	movs	r3, #0
 800b530:	6363      	str	r3, [r4, #52]	@ 0x34
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b538:	81a3      	strh	r3, [r4, #12]
 800b53a:	2300      	movs	r3, #0
 800b53c:	6063      	str	r3, [r4, #4]
 800b53e:	6923      	ldr	r3, [r4, #16]
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	89a3      	ldrh	r3, [r4, #12]
 800b544:	f043 0308 	orr.w	r3, r3, #8
 800b548:	81a3      	strh	r3, [r4, #12]
 800b54a:	6923      	ldr	r3, [r4, #16]
 800b54c:	b94b      	cbnz	r3, 800b562 <__swsetup_r+0x7a>
 800b54e:	89a3      	ldrh	r3, [r4, #12]
 800b550:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b558:	d003      	beq.n	800b562 <__swsetup_r+0x7a>
 800b55a:	4621      	mov	r1, r4
 800b55c:	4628      	mov	r0, r5
 800b55e:	f000 f83f 	bl	800b5e0 <__smakebuf_r>
 800b562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b566:	f013 0201 	ands.w	r2, r3, #1
 800b56a:	d00a      	beq.n	800b582 <__swsetup_r+0x9a>
 800b56c:	2200      	movs	r2, #0
 800b56e:	60a2      	str	r2, [r4, #8]
 800b570:	6962      	ldr	r2, [r4, #20]
 800b572:	4252      	negs	r2, r2
 800b574:	61a2      	str	r2, [r4, #24]
 800b576:	6922      	ldr	r2, [r4, #16]
 800b578:	b942      	cbnz	r2, 800b58c <__swsetup_r+0xa4>
 800b57a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b57e:	d1c5      	bne.n	800b50c <__swsetup_r+0x24>
 800b580:	bd38      	pop	{r3, r4, r5, pc}
 800b582:	0799      	lsls	r1, r3, #30
 800b584:	bf58      	it	pl
 800b586:	6962      	ldrpl	r2, [r4, #20]
 800b588:	60a2      	str	r2, [r4, #8]
 800b58a:	e7f4      	b.n	800b576 <__swsetup_r+0x8e>
 800b58c:	2000      	movs	r0, #0
 800b58e:	e7f7      	b.n	800b580 <__swsetup_r+0x98>
 800b590:	24000028 	.word	0x24000028

0800b594 <__swhatbuf_r>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	460c      	mov	r4, r1
 800b598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b59c:	2900      	cmp	r1, #0
 800b59e:	b096      	sub	sp, #88	@ 0x58
 800b5a0:	4615      	mov	r5, r2
 800b5a2:	461e      	mov	r6, r3
 800b5a4:	da0d      	bge.n	800b5c2 <__swhatbuf_r+0x2e>
 800b5a6:	89a3      	ldrh	r3, [r4, #12]
 800b5a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b5ac:	f04f 0100 	mov.w	r1, #0
 800b5b0:	bf14      	ite	ne
 800b5b2:	2340      	movne	r3, #64	@ 0x40
 800b5b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	6031      	str	r1, [r6, #0]
 800b5bc:	602b      	str	r3, [r5, #0]
 800b5be:	b016      	add	sp, #88	@ 0x58
 800b5c0:	bd70      	pop	{r4, r5, r6, pc}
 800b5c2:	466a      	mov	r2, sp
 800b5c4:	f000 f89c 	bl	800b700 <_fstat_r>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	dbec      	blt.n	800b5a6 <__swhatbuf_r+0x12>
 800b5cc:	9901      	ldr	r1, [sp, #4]
 800b5ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5d6:	4259      	negs	r1, r3
 800b5d8:	4159      	adcs	r1, r3
 800b5da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5de:	e7eb      	b.n	800b5b8 <__swhatbuf_r+0x24>

0800b5e0 <__smakebuf_r>:
 800b5e0:	898b      	ldrh	r3, [r1, #12]
 800b5e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5e4:	079d      	lsls	r5, r3, #30
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	460c      	mov	r4, r1
 800b5ea:	d507      	bpl.n	800b5fc <__smakebuf_r+0x1c>
 800b5ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5f0:	6023      	str	r3, [r4, #0]
 800b5f2:	6123      	str	r3, [r4, #16]
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	6163      	str	r3, [r4, #20]
 800b5f8:	b003      	add	sp, #12
 800b5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5fc:	ab01      	add	r3, sp, #4
 800b5fe:	466a      	mov	r2, sp
 800b600:	f7ff ffc8 	bl	800b594 <__swhatbuf_r>
 800b604:	9f00      	ldr	r7, [sp, #0]
 800b606:	4605      	mov	r5, r0
 800b608:	4639      	mov	r1, r7
 800b60a:	4630      	mov	r0, r6
 800b60c:	f7ff fa2a 	bl	800aa64 <_malloc_r>
 800b610:	b948      	cbnz	r0, 800b626 <__smakebuf_r+0x46>
 800b612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b616:	059a      	lsls	r2, r3, #22
 800b618:	d4ee      	bmi.n	800b5f8 <__smakebuf_r+0x18>
 800b61a:	f023 0303 	bic.w	r3, r3, #3
 800b61e:	f043 0302 	orr.w	r3, r3, #2
 800b622:	81a3      	strh	r3, [r4, #12]
 800b624:	e7e2      	b.n	800b5ec <__smakebuf_r+0xc>
 800b626:	89a3      	ldrh	r3, [r4, #12]
 800b628:	6020      	str	r0, [r4, #0]
 800b62a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b62e:	81a3      	strh	r3, [r4, #12]
 800b630:	9b01      	ldr	r3, [sp, #4]
 800b632:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b636:	b15b      	cbz	r3, 800b650 <__smakebuf_r+0x70>
 800b638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b63c:	4630      	mov	r0, r6
 800b63e:	f000 f83b 	bl	800b6b8 <_isatty_r>
 800b642:	b128      	cbz	r0, 800b650 <__smakebuf_r+0x70>
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	f023 0303 	bic.w	r3, r3, #3
 800b64a:	f043 0301 	orr.w	r3, r3, #1
 800b64e:	81a3      	strh	r3, [r4, #12]
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	431d      	orrs	r5, r3
 800b654:	81a5      	strh	r5, [r4, #12]
 800b656:	e7cf      	b.n	800b5f8 <__smakebuf_r+0x18>

0800b658 <_raise_r>:
 800b658:	291f      	cmp	r1, #31
 800b65a:	b538      	push	{r3, r4, r5, lr}
 800b65c:	4605      	mov	r5, r0
 800b65e:	460c      	mov	r4, r1
 800b660:	d904      	bls.n	800b66c <_raise_r+0x14>
 800b662:	2316      	movs	r3, #22
 800b664:	6003      	str	r3, [r0, #0]
 800b666:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b66e:	b112      	cbz	r2, 800b676 <_raise_r+0x1e>
 800b670:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b674:	b94b      	cbnz	r3, 800b68a <_raise_r+0x32>
 800b676:	4628      	mov	r0, r5
 800b678:	f000 f840 	bl	800b6fc <_getpid_r>
 800b67c:	4622      	mov	r2, r4
 800b67e:	4601      	mov	r1, r0
 800b680:	4628      	mov	r0, r5
 800b682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b686:	f000 b827 	b.w	800b6d8 <_kill_r>
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d00a      	beq.n	800b6a4 <_raise_r+0x4c>
 800b68e:	1c59      	adds	r1, r3, #1
 800b690:	d103      	bne.n	800b69a <_raise_r+0x42>
 800b692:	2316      	movs	r3, #22
 800b694:	6003      	str	r3, [r0, #0]
 800b696:	2001      	movs	r0, #1
 800b698:	e7e7      	b.n	800b66a <_raise_r+0x12>
 800b69a:	2100      	movs	r1, #0
 800b69c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	4798      	blx	r3
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	e7e0      	b.n	800b66a <_raise_r+0x12>

0800b6a8 <raise>:
 800b6a8:	4b02      	ldr	r3, [pc, #8]	@ (800b6b4 <raise+0xc>)
 800b6aa:	4601      	mov	r1, r0
 800b6ac:	6818      	ldr	r0, [r3, #0]
 800b6ae:	f7ff bfd3 	b.w	800b658 <_raise_r>
 800b6b2:	bf00      	nop
 800b6b4:	24000028 	.word	0x24000028

0800b6b8 <_isatty_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4d06      	ldr	r5, [pc, #24]	@ (800b6d4 <_isatty_r+0x1c>)
 800b6bc:	2300      	movs	r3, #0
 800b6be:	4604      	mov	r4, r0
 800b6c0:	4608      	mov	r0, r1
 800b6c2:	602b      	str	r3, [r5, #0]
 800b6c4:	f7f6 fee6 	bl	8002494 <_isatty>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d102      	bne.n	800b6d2 <_isatty_r+0x1a>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b103      	cbz	r3, 800b6d2 <_isatty_r+0x1a>
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	2406f5a8 	.word	0x2406f5a8

0800b6d8 <_kill_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4d07      	ldr	r5, [pc, #28]	@ (800b6f8 <_kill_r+0x20>)
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4604      	mov	r4, r0
 800b6e0:	4608      	mov	r0, r1
 800b6e2:	4611      	mov	r1, r2
 800b6e4:	602b      	str	r3, [r5, #0]
 800b6e6:	f7f6 fe9f 	bl	8002428 <_kill>
 800b6ea:	1c43      	adds	r3, r0, #1
 800b6ec:	d102      	bne.n	800b6f4 <_kill_r+0x1c>
 800b6ee:	682b      	ldr	r3, [r5, #0]
 800b6f0:	b103      	cbz	r3, 800b6f4 <_kill_r+0x1c>
 800b6f2:	6023      	str	r3, [r4, #0]
 800b6f4:	bd38      	pop	{r3, r4, r5, pc}
 800b6f6:	bf00      	nop
 800b6f8:	2406f5a8 	.word	0x2406f5a8

0800b6fc <_getpid_r>:
 800b6fc:	f7f6 be92 	b.w	8002424 <_getpid>

0800b700 <_fstat_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4d07      	ldr	r5, [pc, #28]	@ (800b720 <_fstat_r+0x20>)
 800b704:	2300      	movs	r3, #0
 800b706:	4604      	mov	r4, r0
 800b708:	4608      	mov	r0, r1
 800b70a:	4611      	mov	r1, r2
 800b70c:	602b      	str	r3, [r5, #0]
 800b70e:	f7f6 febb 	bl	8002488 <_fstat>
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	d102      	bne.n	800b71c <_fstat_r+0x1c>
 800b716:	682b      	ldr	r3, [r5, #0]
 800b718:	b103      	cbz	r3, 800b71c <_fstat_r+0x1c>
 800b71a:	6023      	str	r3, [r4, #0]
 800b71c:	bd38      	pop	{r3, r4, r5, pc}
 800b71e:	bf00      	nop
 800b720:	2406f5a8 	.word	0x2406f5a8

0800b724 <tanhf>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	ee10 5a10 	vmov	r5, s0
 800b72a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b72e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b732:	ed2d 8b02 	vpush	{d8}
 800b736:	eef0 7a40 	vmov.f32	s15, s0
 800b73a:	d30f      	bcc.n	800b75c <tanhf+0x38>
 800b73c:	4b2a      	ldr	r3, [pc, #168]	@ (800b7e8 <tanhf+0xc4>)
 800b73e:	edd3 6a00 	vldr	s13, [r3]
 800b742:	ed93 7a00 	vldr	s14, [r3]
 800b746:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800b74a:	2d00      	cmp	r5, #0
 800b74c:	bfac      	ite	ge
 800b74e:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800b752:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800b756:	ecbd 8b02 	vpop	{d8}
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	4a23      	ldr	r2, [pc, #140]	@ (800b7ec <tanhf+0xc8>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d839      	bhi.n	800b7d6 <tanhf+0xb2>
 800b762:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 800b766:	d207      	bcs.n	800b778 <tanhf+0x54>
 800b768:	4b1f      	ldr	r3, [pc, #124]	@ (800b7e8 <tanhf+0xc4>)
 800b76a:	ed93 0a00 	vldr	s0, [r3]
 800b76e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b772:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b776:	e7ee      	b.n	800b756 <tanhf+0x32>
 800b778:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800b77c:	4c1c      	ldr	r4, [pc, #112]	@ (800b7f0 <tanhf+0xcc>)
 800b77e:	d319      	bcc.n	800b7b4 <tanhf+0x90>
 800b780:	f000 f962 	bl	800ba48 <fabsf>
 800b784:	edd4 7a00 	vldr	s15, [r4]
 800b788:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b78c:	f000 f834 	bl	800b7f8 <expm1f>
 800b790:	4b15      	ldr	r3, [pc, #84]	@ (800b7e8 <tanhf+0xc4>)
 800b792:	edd3 7a00 	vldr	s15, [r3]
 800b796:	ed94 6a00 	vldr	s12, [r4]
 800b79a:	ed94 7a00 	vldr	s14, [r4]
 800b79e:	ee37 7a00 	vadd.f32	s14, s14, s0
 800b7a2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b7a6:	ee37 0ae6 	vsub.f32	s0, s15, s13
 800b7aa:	2d00      	cmp	r5, #0
 800b7ac:	bfb8      	it	lt
 800b7ae:	eeb1 0a40 	vneglt.f32	s0, s0
 800b7b2:	e7d0      	b.n	800b756 <tanhf+0x32>
 800b7b4:	ed94 8a00 	vldr	s16, [r4]
 800b7b8:	f000 f946 	bl	800ba48 <fabsf>
 800b7bc:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800b7c0:	f000 f81a 	bl	800b7f8 <expm1f>
 800b7c4:	edd4 7a00 	vldr	s15, [r4]
 800b7c8:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b7cc:	eeb1 7a40 	vneg.f32	s14, s0
 800b7d0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b7d4:	e7e9      	b.n	800b7aa <tanhf+0x86>
 800b7d6:	4b04      	ldr	r3, [pc, #16]	@ (800b7e8 <tanhf+0xc4>)
 800b7d8:	ed93 0a00 	vldr	s0, [r3]
 800b7dc:	4b05      	ldr	r3, [pc, #20]	@ (800b7f4 <tanhf+0xd0>)
 800b7de:	edd3 7a00 	vldr	s15, [r3]
 800b7e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b7e6:	e7e0      	b.n	800b7aa <tanhf+0x86>
 800b7e8:	08083244 	.word	0x08083244
 800b7ec:	41afffff 	.word	0x41afffff
 800b7f0:	08083240 	.word	0x08083240
 800b7f4:	0808323c 	.word	0x0808323c

0800b7f8 <expm1f>:
 800b7f8:	ee10 3a10 	vmov	r3, s0
 800b7fc:	4a83      	ldr	r2, [pc, #524]	@ (800ba0c <expm1f+0x214>)
 800b7fe:	f003 4000 	and.w	r0, r3, #2147483648	@ 0x80000000
 800b802:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b806:	4293      	cmp	r3, r2
 800b808:	d91e      	bls.n	800b848 <expm1f+0x50>
 800b80a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b80e:	d902      	bls.n	800b816 <expm1f+0x1e>
 800b810:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b814:	4770      	bx	lr
 800b816:	d105      	bne.n	800b824 <expm1f+0x2c>
 800b818:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800b81c:	2800      	cmp	r0, #0
 800b81e:	fe00 0a27 	vseleq.f32	s0, s0, s15
 800b822:	4770      	bx	lr
 800b824:	b920      	cbnz	r0, 800b830 <expm1f+0x38>
 800b826:	4a7a      	ldr	r2, [pc, #488]	@ (800ba10 <expm1f+0x218>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d963      	bls.n	800b8f4 <expm1f+0xfc>
 800b82c:	f000 b92c 	b.w	800ba88 <__math_oflowf>
 800b830:	eddf 7a78 	vldr	s15, [pc, #480]	@ 800ba14 <expm1f+0x21c>
 800b834:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b838:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b840:	d551      	bpl.n	800b8e6 <expm1f+0xee>
 800b842:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800b846:	4770      	bx	lr
 800b848:	4a73      	ldr	r2, [pc, #460]	@ (800ba18 <expm1f+0x220>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d972      	bls.n	800b934 <expm1f+0x13c>
 800b84e:	4a73      	ldr	r2, [pc, #460]	@ (800ba1c <expm1f+0x224>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d868      	bhi.n	800b926 <expm1f+0x12e>
 800b854:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800ba20 <expm1f+0x228>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d13d      	bne.n	800b8d8 <expm1f+0xe0>
 800b85c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b860:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800ba24 <expm1f+0x22c>
 800b864:	2301      	movs	r3, #1
 800b866:	ee37 0a66 	vsub.f32	s0, s14, s13
 800b86a:	ee77 7a40 	vsub.f32	s15, s14, s0
 800b86e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b872:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800b876:	ee20 4a25 	vmul.f32	s8, s0, s11
 800b87a:	ed9f 6a6b 	vldr	s12, [pc, #428]	@ 800ba28 <expm1f+0x230>
 800b87e:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 800ba2c <expm1f+0x234>
 800b882:	ed9f 5a6b 	vldr	s10, [pc, #428]	@ 800ba30 <expm1f+0x238>
 800b886:	ee20 7a04 	vmul.f32	s14, s0, s8
 800b88a:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
 800b88e:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b892:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 800ba34 <expm1f+0x23c>
 800b896:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b89a:	eddf 6a67 	vldr	s13, [pc, #412]	@ 800ba38 <expm1f+0x240>
 800b89e:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b8a2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800b8a6:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b8aa:	eef0 6a46 	vmov.f32	s13, s12
 800b8ae:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b8b2:	eee4 4a66 	vfms.f32	s9, s8, s13
 800b8b6:	eeb1 4a08 	vmov.f32	s8, #24	@ 0x40c00000  6.0
 800b8ba:	eea0 4a64 	vfms.f32	s8, s0, s9
 800b8be:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800b8c2:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800b8c6:	ee66 6a87 	vmul.f32	s13, s13, s14
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d140      	bne.n	800b950 <expm1f+0x158>
 800b8ce:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800b8d2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b8d6:	4770      	bx	lr
 800b8d8:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b8dc:	eddf 6a57 	vldr	s13, [pc, #348]	@ 800ba3c <expm1f+0x244>
 800b8e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8e4:	e7bf      	b.n	800b866 <expm1f+0x6e>
 800b8e6:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800ba40 <expm1f+0x248>
 800b8ea:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b8ee:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 800b8f2:	e005      	b.n	800b900 <expm1f+0x108>
 800b8f4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800ba40 <expm1f+0x248>
 800b8f8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b8fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b900:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b904:	eeb0 7a40 	vmov.f32	s14, s0
 800b908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b90c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b910:	ee17 3a90 	vmov	r3, s15
 800b914:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800ba20 <expm1f+0x228>
 800b918:	eea6 7ae7 	vfms.f32	s14, s13, s15
 800b91c:	eddf 7a41 	vldr	s15, [pc, #260]	@ 800ba24 <expm1f+0x22c>
 800b920:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b924:	e79f      	b.n	800b866 <expm1f+0x6e>
 800b926:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800ba40 <expm1f+0x248>
 800b92a:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b92e:	2800      	cmp	r0, #0
 800b930:	d0e4      	beq.n	800b8fc <expm1f+0x104>
 800b932:	e7dc      	b.n	800b8ee <expm1f+0xf6>
 800b934:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 800b938:	d208      	bcs.n	800b94c <expm1f+0x154>
 800b93a:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800ba44 <expm1f+0x24c>
 800b93e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b942:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800b946:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b94a:	4770      	bx	lr
 800b94c:	2300      	movs	r3, #0
 800b94e:	e790      	b.n	800b872 <expm1f+0x7a>
 800b950:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b954:	1c5a      	adds	r2, r3, #1
 800b956:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800b95a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b95e:	d106      	bne.n	800b96e <expm1f+0x176>
 800b960:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b964:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 800b968:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800b96c:	4770      	bx	lr
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d118      	bne.n	800b9a4 <expm1f+0x1ac>
 800b972:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 800b976:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b97e:	bf5b      	ittet	pl
 800b980:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800b984:	eeb0 7a00 	vmovpl.f32	s14, #0	@ 0x40000000  2.0
 800b988:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 800b98c:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800b990:	bf43      	ittte	mi
 800b992:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 800b996:	eeb8 0a00 	vmovmi.f32	s0, #128	@ 0xc0000000 -2.0
 800b99a:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800b99e:	eeb0 0a46 	vmovpl.f32	s0, s12
 800b9a2:	4770      	bx	lr
 800b9a4:	1c5a      	adds	r2, r3, #1
 800b9a6:	2a39      	cmp	r2, #57	@ 0x39
 800b9a8:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800b9ac:	d90b      	bls.n	800b9c6 <expm1f+0x1ce>
 800b9ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b9b2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b9b6:	ee17 3a90 	vmov	r3, s15
 800b9ba:	4419      	add	r1, r3
 800b9bc:	ee07 1a90 	vmov	s15, r1
 800b9c0:	ee37 0ac6 	vsub.f32	s0, s15, s12
 800b9c4:	4770      	bx	lr
 800b9c6:	2b16      	cmp	r3, #22
 800b9c8:	dc11      	bgt.n	800b9ee <expm1f+0x1f6>
 800b9ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b9ce:	fa42 f303 	asr.w	r3, r2, r3
 800b9d2:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 800b9d6:	ee07 3a10 	vmov	s14, r3
 800b9da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b9de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9e2:	ee17 3a90 	vmov	r3, s15
 800b9e6:	440b      	add	r3, r1
 800b9e8:	ee00 3a10 	vmov	s0, r3
 800b9ec:	4770      	bx	lr
 800b9ee:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800b9f2:	05db      	lsls	r3, r3, #23
 800b9f4:	ee07 3a10 	vmov	s14, r3
 800b9f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b9fc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ba00:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ba04:	ee17 3a90 	vmov	r3, s15
 800ba08:	e7ed      	b.n	800b9e6 <expm1f+0x1ee>
 800ba0a:	bf00      	nop
 800ba0c:	4195b843 	.word	0x4195b843
 800ba10:	42b17217 	.word	0x42b17217
 800ba14:	0da24260 	.word	0x0da24260
 800ba18:	3eb17218 	.word	0x3eb17218
 800ba1c:	3f851591 	.word	0x3f851591
 800ba20:	3f317180 	.word	0x3f317180
 800ba24:	3717f7d1 	.word	0x3717f7d1
 800ba28:	b457edbb 	.word	0xb457edbb
 800ba2c:	36867e54 	.word	0x36867e54
 800ba30:	bd088889 	.word	0xbd088889
 800ba34:	b8a670cd 	.word	0xb8a670cd
 800ba38:	3ad00d01 	.word	0x3ad00d01
 800ba3c:	b717f7d1 	.word	0xb717f7d1
 800ba40:	3fb8aa3b 	.word	0x3fb8aa3b
 800ba44:	7149f2ca 	.word	0x7149f2ca

0800ba48 <fabsf>:
 800ba48:	ee10 3a10 	vmov	r3, s0
 800ba4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba50:	ee00 3a10 	vmov	s0, r3
 800ba54:	4770      	bx	lr

0800ba56 <with_errnof>:
 800ba56:	b510      	push	{r4, lr}
 800ba58:	ed2d 8b02 	vpush	{d8}
 800ba5c:	eeb0 8a40 	vmov.f32	s16, s0
 800ba60:	4604      	mov	r4, r0
 800ba62:	f7fe ff89 	bl	800a978 <__errno>
 800ba66:	eeb0 0a48 	vmov.f32	s0, s16
 800ba6a:	ecbd 8b02 	vpop	{d8}
 800ba6e:	6004      	str	r4, [r0, #0]
 800ba70:	bd10      	pop	{r4, pc}

0800ba72 <xflowf>:
 800ba72:	b130      	cbz	r0, 800ba82 <xflowf+0x10>
 800ba74:	eef1 7a40 	vneg.f32	s15, s0
 800ba78:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ba7c:	2022      	movs	r0, #34	@ 0x22
 800ba7e:	f7ff bfea 	b.w	800ba56 <with_errnof>
 800ba82:	eef0 7a40 	vmov.f32	s15, s0
 800ba86:	e7f7      	b.n	800ba78 <xflowf+0x6>

0800ba88 <__math_oflowf>:
 800ba88:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ba90 <__math_oflowf+0x8>
 800ba8c:	f7ff bff1 	b.w	800ba72 <xflowf>
 800ba90:	70000000 	.word	0x70000000

0800ba94 <_init>:
 800ba94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba96:	bf00      	nop
 800ba98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba9a:	bc08      	pop	{r3}
 800ba9c:	469e      	mov	lr, r3
 800ba9e:	4770      	bx	lr

0800baa0 <_fini>:
 800baa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa2:	bf00      	nop
 800baa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baa6:	bc08      	pop	{r3}
 800baa8:	469e      	mov	lr, r3
 800baaa:	4770      	bx	lr
